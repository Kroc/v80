; v80, (C) Kroc Camen 2023-2024, MIT License
; expression parsing / evaulation
;
; TODO: support combined unary operators (e.g. `!<`)
;       will work in eval but needs parser support
; TODO: parentheses
; TODO: we can store the stride size in the reserved byte(s)
;
.BLOCK  "code-expr"

nextExpr:
;===============================================================================
; skip spaces before parsing an expression:
; (see parseExpr below for parameters)
;
;-------------------------------------------------------------------------------
        ; skip whitespace and return on either the next non-space character,
        ; or a newline/end-of-file (where a comment is taken as a newline)
        call    nextWord

        ; since the expression is expected/required,
        ; newline or end-of-file is an error:
        jp      z,      errParam

        ; fallthrough
        ; ...

parseExpr:
;===============================================================================
; parse an expression from the input file, tokenise it and evaluate it,
; returning the result:
;
; if the expression contains forward-references it'll be
; deferred on the heap and carry-flag is returned set
;
; WARN: the first character of the expression is assumed to be read and
;       the first character of the next word following the expression
;       will be read but not used! this allows chaining of expressions,
;       but you must avoid calling `readChar` without first using the
;       character waiting in `[char]`
;
; in:   HL              current heap addr
;
; out:  BC              the result of the expression evaluation
;       cf              carry clear indicates success
;                       carry set indicates the expression includes forward-
;                       references and couldn't be evaluated; the value of BC
;                       is invalid and the expression was pushed to the heap
;       HL              any forward-references to labels will be added to the
;                       heap along with the whole expression
;       A, DE           (clobbered)
;-------------------------------------------------------------------------------
        ; expressions are tokenised into a space below the stack. this is
        ; because any forward-references to labels will need to be pushed to
        ; the heap so we can't write the expr on the heap at the same time!
        ;
        push    HL                      ; preserve heap addr
        ld      HL,     [expr]          ; addr of expr bytecode space
        xor     A                       ; set A to zero
        ld      [@flag],A               ; clear 'defer' flag
        ld      A,      [char]          ; get current unused input char
        jr      @unary                  ; jump into the parsing loop

        ;-----------------------------------------------------------------------
@flag   .BYTE   $00                     ; defer flag

        ;=======================================================================
        ; add an operator and fall-through to the next operand:
        ;
@next:  dec     HL                      ; move to next token space
        ld      [HL],   A               ; push token in A to expr

        call    nextWord                ; read first character of the next word
        jp      z,      errExpr         ; newline/EOF = unexpected expr end!

        ;-----------------------------------------------------------------------
        ; unary operators:
        ;=======================================================================
        ; an expression must begin with either a value,
        ; or a unary operator and a value
        ;
        ; unary operators can always precede values,
        ; even after an operator, e.g. `$10 + <:label`
        ;
@unary: cp      CHAR_OP_LO              ; lo-byte operator?
        jr      z,      +               ; a value must follow a unary operator
        ;-----------------------------------------------------------------------
        cp      CHAR_OP_HI              ; hi-byte operator?
        jr      z,      +               ; a value must follow a unary operator
        ;-----------------------------------------------------------------------
        cp      CHAR_OP_NOT             ; not operator?
        jr      nz,     @value          ; no unary operators, check for values

        ; a unary operator has been added,
        ; read the next character:
+       dec     HL                      ; move to next token space
        ld      [HL],   A               ; push a unary operator token

        ; TODO: support multiple unary operators without separating space
        call    nextWord                ; read first character of the next word
        jp      z,      errExpr         ; newline/EOF = unexpected expr end!

        ; after a unary operator, a value must follow
        ;
@value: cp      CHAR_HEX                ; hexadecimal sigil?
        jr      z,      @hex
        cp      CHAR_CONST              ; a constant?
        jr      z,      @const
        cp      CHAR_LABEL              ; a label?
        jp      nz,     errExpr         ; no? expression has no value!!

        ; fallthrough to label-handling
        ; ...

        ;-----------------------------------------------------------------------
        ; values:
        ;=======================================================================
        ; label?
        ;-----------------------------------------------------------------------
@label: call    getLabel                ; try get the label's value

        ; if the expression contains a forward-reference to a label we won't
        ; be able to evaluate the expression now and it needs to be deferred
        ;
        ; NOTE: it is very imporant to be aware that in the case of carry-set,
        ;       `getLabel` has returned the label-length in BC and the
        ;       address of the label's flag byte in DE
        ;
        jr      c,      +

        ; if the label is known, push a number literal token of its address
        ; and fall through to looking for a following operator token
        jr      nz,     @num

        ; this label has not been seen before but because it's in an expression
        ; this is a forward-reference -- we need to add a placeholder for the
        ; label on the heap before we can defer the whole expression
        ;
        ; swap our current position within the token space with the heap
        ; position preserved at the beginning of the routine!
        ex      [SP],   HL

        ; WARN: `pushLabel` requires the name length in BC which is returned
        ;       by `getLabel` when a label is a forward-reference / not-found
        ;
        scf                             ; set flag indicating forward-reference
        call    pushLabel               ; define the label name on the heap
        ld      D,      H               ; HL = last byte of label record
        ld      E,      L               ; copy HL to DE
        inc     DE                      ; step up to value hi-byte addr
        inc     DE                      ; step up to flag-byte addr

        ; save updated heap position for return and
        ; swap back to our position in token space
        ex      [SP],   HL

        ; any expression that contains a forward-reference to a label causes
        ; the whole expression to be deferred. instead of the label value,
        ; the address of the label's flag-byte in the dictionary is tokenised
        ;
+       dec     HL                      ; move to next token space
        ld      [HL],   CHAR_LABEL      ; push the label token
        dec     HL                      ; move to next token space
        ld      [HL],   D               ; push the label value hi-byte
        dec     HL                      ; move to next token space
        ld      [HL],   E               ; push the label value lo-byte

        ld      A,      %10000000       ; set the deferred flag
        ld      [@flag],A

        jr      @op                     ; an operator can follow a value

        ;-----------------------------------------------------------------------
        ; constant?
        ;-----------------------------------------------------------------------
@const: call    getConst                ; try get the constant's value
        jp      z,      errConstUndef   ; exprssion contains undefined const!

        ; push a number literal token and fallthrough to
        ; looking for a following operator token
        jr      @num

        ;-----------------------------------------------------------------------
        ; hexadecimal literal?
        ;-----------------------------------------------------------------------
        ; a sigil is required because A-F can't be separated
        ; from instruction names without look-ahead
        ;
@hex:   call    parseHexNumber          ; parse the hex number into BC

        ; push a literal number token:
        ;-----------------------------------------------------------------------
@num:   dec     HL                      ; move to next token space
        ld      [HL],   CHAR_HEX        ; push a number token
        dec     HL                      ; move to next token space
        ld      [HL],   B               ; push the number hi-byte
        dec     HL                      ; move to next token space
        ld      [HL],   C               ; push the number lo-byte

        ; an operator can follow a value
        ; ...

        ;-----------------------------------------------------------------------
        ; operators:
        ;=======================================================================
        ; a value has been added, check for the presence of an operator:
        ; if there's no operator, the expression ends here
        ;
@op:    call    nextWord                ; read first character of the next word
        jr      z,      @end            ; end expr at newline / end-of-file

        cp      CHAR_OP_ADD             ; add operator?
        jr      z,      @next           ; push token to heap, find next operand
        cp      CHAR_OP_SUB             ; subtract operator?
        jr      z,      @next           ; ...
        cp      CHAR_OP_MUL             ; multiply operator?
        jr      z,      @next           ; ...
        cp      CHAR_OP_DIV             ; divide operator?
        jr      z,      @next           ; ...
        cp      CHAR_OP_AND             ; and operator?
        jr      z,      @next           ; ...
        cp      CHAR_OP_OR              ; or operator?
        jr      z,      @next           ; ...
        cp      CHAR_OP_XOR             ; xor operator?
        jr      z,      @next           ; ...
        cp      CHAR_OP_MOD             ; modulo operator?
        jr      z,      @next           ; ...

        ; whatever it is, it isn't an operator;
        ; fall through and terminate the expression
        ; ...

        ; end of expr:
        ;=======================================================================
        ; TODO: check for heap spill here
@end:   xor     A                       ; (clear carry flag!)
        dec     HL                      ; a null terminator is appended to
        ld      [HL],   A               ;  avoid counting during evaluation
        ld      DE,     [expr]          ; get starting (high) addr of expr

        pop     HL                      ; restore heap addr to HL
        ld      A,      [@flag]         ; get the defer flag
        rla                             ; pop the hi-bit off into carry
        jr      nc,     evalExpr        ; if clear, evaluate the expression

        ; defer the expression
        ;=======================================================================
        ; calculate length of expression; this is needed
        ; to copy the expr to the heap using LDDR
        ;
        ; the expr bytecode is ordered *downwards* in memory, so the difference
        ; from the last address to the starting adress is the length
        ;
        ; the expr buffer runs from $xx7F downwards to $xx20
        ; so an 8-bit subtraction is sufficient
        ;
@defer: ld      B,      A               ; B must be 0 (LDDR uses BC)
        ld      A,      E               ; start with highest addr (expr-start)
        sub     A,      L               ; subtract lowest addr (expr-end)
        ld      C,      A               ; this is the expr length

        ; we need to push a bunch of values to the heap and the fastest way
        ; to write 16-bit values easily is... the stack! simply make the heap
        ; into the stack and we can PUSH our stuff on to it!
        ;
        ; WE DO NOT NEED TO DISABLE INTERRUPTS!!! any interrupt is going to
        ; push to our heap and then pop the address off when it returns,
        ; which has no effect on the values we're pushing
        ;
        ld      [sp],   SP              ; backup stack pointer
        ld      SP,     HL              ; move stack to heap!
        ;-----------------------------------------------------------------------

        ; link this expression to the previous one:
        ; (since the heap address is in SP, we can reuse HL)
        ;
        ld      HL,     [defer]         ; get previous deferred expr address
        push    HL                      ; write to heap
        ld      [defer],SP              ; write heap addr to the entry point!

        ; push the current code-segment position; this is where
        ; the expression result will be filled in after evaluation
        push    IY

        ; push the current virtual program-counter
        ; (for calculating relative jumps)
        push    IX                      ; PC is always stored in IX, not RAM

        ; push the source file line-number
        ld      HL,     [row]
        push    HL
        ; push the source file column-number, plus the number
        ; of bytes the result should occupy in the code-segment
        ld      HL,     [stride_col]
        push    HL

        ; reserve bytes for the expr result:
        ;
        ; this routine is only called if there is an instruction parameter
        ; (constant defines and if-statements cannot be deferred!) which
        ; assumes a minimum of 1 byte, so check for a second byte
        ;
        dec     L                       ; is the stride 1 or 2?
        jr      z,      +               ; if it is 1, skip the 2nd byte
        inc     IY                      ; reserve a byte and increment
        inc     IX                      ;  virtual program-counter
+       inc     IY                      ; reserve an additional byte
        inc     IX                      ;  and increment program-counter

        ;-----------------------------------------------------------------------
        ld      HL,     0               ; there is no `LD HL, SP` (!?), so
        add     HL,     SP              ;  it's quicker to just add SP to 0!
        ld      SP,     [sp]            ; restore stack pointer!

        ; copy expression bytecode to the heap:
        ;
        ; note that LDDR is post-decrement (copy-then-decrement), whereas
        ; the heap is pre-decrement like the stack (decrement-then-copy)
        ;
        dec     HL                      ; fix heap addr for copy-then-DEC
        ex      DE,     HL              ; LDDR requires DE to be destination
        ld      C,      [HL]            ; first byte is length / defer flag
        ld      B,      0               ; LDDR uses full BC count
        lddr                            ; copy BC bytes *from* [HL] *to* [DE]!
        ex      DE,     HL              ; swap updated heap addr back to HL
        inc     HL                      ; fix heap addr after copy

        ; because the expression could not be evaluated
        ; we must return carry-flag set to indicate no-value
        scf
        ret


evalExpr:
;===============================================================================
; evaluates an expr:
;
; WARN: this routine DOES NOT CHECK if the expression is deferred!
;       expressions are deferred when parsed from source code; it is assumed
;       once all code is parsed that all labels will have been defined and
;       evaluation will now succeed -- any label that is still deferred at
;       evaluation time is a hard error
;
; in:   DE      addr of expr (could be [`expr`] or on the heap!)
; out:  BC      result value
;       HL      (preserved)
;       A, DE   (clobbered)
;-------------------------------------------------------------------------------
        ; we won't need to push anything new to the heap
        ; so we preserve the current heap position
        push    HL
@expr:  ex      DE,     HL              ; use HL for reading tokens for now

        ; we do not use the length byte because we don't want to maintain a
        ; counter register. we can just rely on the null terminator to stop
        ;
        dec     HL                      ; skip length byte

        ; evaluation consists of a running total (in DE), an operator,
        ; and the next value (in BC). we need to start the expression
        ; with the first value, before any (non-unary) operator
        ;
        call    _value                  ; read first value
        ld      E,      C               ; initialise running total
        ld      D,      B               ; 

        ;-----------------------------------------------------------------------
@eval:  ld      A,      [HL]            ; read token type
        and     A                       ; (set CPU flags!)
        jr      z,      @end            ; end on expr terminator
        
        dec     HL                      ; move to next token space
        call    _value                  ; get value before applying operator

        cp      CHAR_OP_ADD
        jr      z,      @add
        cp      CHAR_OP_SUB
        jr      z,      @sub
        cp      CHAR_OP_MUL
        cp      CHAR_OP_DIV
        cp      CHAR_OP_AND
        cp      CHAR_OP_OR
        cp      CHAR_OP_XOR
        cp      CHAR_OP_MOD

        .printChar '!'
        halt                            ; unimplemented operator!

        ;-----------------------------------------------------------------------
@end:   ld      C,      E               ; copy the final total to BC
        ld      B,      D               ; 
        xor     A                       ; return carry-clear for success
        pop     HL                      ; restore heap position

        ret

        ; operators:
        ;=======================================================================
        ; add operator:
        ;-----------------------------------------------------------------------
        ; TODO: err on overflow?
@add:   ex      DE,     HL              ; switch running total to HL
        add     HL,     BC              ; add value to total
        ex      DE,     HL              ; swap expr addr back to HL
        jr      @eval                   ; continue evaluating
        ;-----------------------------------------------------------------------
        ; subtract operator:
        ;-----------------------------------------------------------------------
        ; TODO: err on underflow?
@sub:   ex      DE,     HL              ; switch running total to HL
        xor     A                       ; clear carry!
        sbc     HL,     BC              ; subtract value from total
        ex      DE,     HL              ; swap expr addr back to HL
        jr      @eval                   ; continue evaluating


_value:
;===============================================================================
; read a value:
;-------------------------------------------------------------------------------
; read the next value and returns it in BC:
; - if present, unary operator(s) are applied before return
; - TODO: parentheses are evaluated recursively
;-------------------------------------------------------------------------------
        ld      A,      [HL]            ; read token type
        dec     HL                      ; move to next token space

        ; take fast-path for values without a unary operator
        ;
        cp      CHAR_HEX                ; number literal?
        jr      z,      @hex            ;
        cp      CHAR_LABEL              ; a label? (that was deferred)
        jr      z,      @label          ;

        ; we don't care what unary operator is present, we'll need
        ; the value first, so store the unary operator until later
        push    AF

        ; recurse, fetching the value that follows --
        ; this allows for multiple unary operators per value
        call    _value

        pop     AF                      ; restore the unary operator
        cp      CHAR_OP_LO              ; lo-byte unary operator?
        jr      z,      @lo             ;
        cp      CHAR_OP_HI              ; hi-byte unary operator?
        jr      z,      @hi             ;

        ; ...

        ; NOT unary operator:
        ;-----------------------------------------------------------------------
@not:   ld      A,      B               ; 
        cpl                             ; invert bits in B
        ld      B,      A               ; 
        ld      A,      C               ; 
        cpl                             ; invert bits in C
        ld      C,      A               ; 
        
        ret
        ;-----------------------------------------------------------------------
        ; LO-byte unary operator:
        ;-----------------------------------------------------------------------
@lo:    ld      B,      0               ; clear the hi-byte
        
        ret
        ;-----------------------------------------------------------------------
        ; HI-byte unary operator:
        ;-----------------------------------------------------------------------
@hi:    ld      C,      B               ; swap the hi-byte into the lo-byte
        ld      B,      0               ;  and clear the hi-byte
        
        ret

        ;=======================================================================
        ; read a number literal:
        ;-----------------------------------------------------------------------
@hex:   ld      B,      [HL]
        dec     HL
        ld      C,      [HL]
        dec     HL
        ret

        ;-----------------------------------------------------------------------
        ; read a label addr:
        ;-----------------------------------------------------------------------
        ; known labels are always resolved to number literals during parsing,
        ; so the only labels that remain at evaluation are forward-references:
        ; the token value contains the address of the label's flag-byte
        ;
@label: push    DE                      ; preserve running total

        xor     A                       ; (set A to zero, clear carry-flag)
        ld      E,      [HL]            ; read label flag-byte addr into DE
        dec     HL                      ; ...
        ld      D,      [HL]            ; ..
        dec     HL                      ; .
        ex      DE,     HL              ; switch flag-byte addr to HL
        or      A,      [HL]            ; is the flag byte 0? (=fwd-ref!)
        jp      z,      errLabelUndef   ; label was never defined!
        dec     HL                      ; skip over flag byte
        ld      C,      [HL]            ; read label value into BC
        dec     HL                      ; ..
        ld      B,      [HL]            ; .
        ex      DE,     HL              ; switch back to expr addr in HL
        pop     DE                      ; restore running total

        ret


parseHexNumber:
;===============================================================================
; parses an ASCII hexadecimal number and returns the value:
;
; a hexadecimal sigil without a number (`$`) is a special case
; that always returns the current virtual program-counter
;
; out:  BC              the value, 0 padded for numbers < 256
;       HL              (preserved)
;       A, DE           (clobbered)
;-------------------------------------------------------------------------------
        ; try to read up to 4 digits; the 5th character
        ; must be whitespace or newline / end-of-file!
        ;
        ; the bottom of the word-buffer is used for temporary bytes
        ; (e.g. $FC00..) as we know this is page-aligned and can use
        ; INC E instead of INC DE
        ;
        ld      BC,     5<<8            ; B=5, C=0
        ld      DE,     [temp]          ; where to write the bytes
        ;-----------------------------------------------------------------------
-       call    readChar                ; read a char from file
        cp      ASCII_SPC+1             ; ASCII space or below?
        jr      c,      +               ; stop when reaching whitespace
        ld      [DE],   A               ; append byte
        inc     E                       ; space for next digit
        djnz    -                       ; decrement B, loop until 0
        ;-----------------------------------------------------------------------
        ; if a 5th byte was read that wasn't whitespace,
        ; it's an error -- the number is too long!
        jp      errHex

        ;-----------------------------------------------------------------------
+       ld      DE,     [temp]          ; go back to the start of the number

        ; number of digits in hex number is reversed;
        ; B=1 for 4 digits, B=2 for 3 digits, B=3 for 2 digits and B=4 for 1,
        ; and lastly B=5 for 0 digits, i.e. `$`, the program-counter
        ;
        dec     B                       ; 4 digits?
        jr      z,      @four
        dec     B                       ; 3 digits?
        jr      z,      @three
        dec     B                       ; 2 digits?
        jr      z,      @two
        dec     B                       ; 1 digit?
        jr      z,      @one

        ; return virtual program counter:
        ;-----------------------------------------------------------------------
        ; a hex sigil without a number (i.e. `$`) is a special symbol
        ; that always returns the current virtual program-counter
        ;
        push    IX                      ; transfer virtual program-counter
        pop     BC                      ;  to return value
        ret

        ; four-digit hex number:
        ;=======================================================================
        ; a 4th digit must go in the upper nybble of B:
        ;
@four:  call    @digit                  ; convert digit to number
        add     A,      A               ;
        add     A,      A               ; left-shift (faster than `sla A`)
        add     A,      A               ; (shift lo-nybble to hi-nybble)
        add     A,      A               ;
        ld      B,      A               ; answer goes in B
        inc     E                       ; move to 3rd digit
        ;-----------------------------------------------------------------------
        ; a 3rd digit goes in the lower nybble of B:
        ;
@three: call    @digit                  ; convert digit to number
        or      B                       ; combine with hi-nybble (if present)
        ld      B,      A               ; answer goes in B
        inc     E                       ; move to 2nd digit
        ;-----------------------------------------------------------------------
        ; a 2nd digit goes in the upper nybble of C:
        ;
@two:   call    @digit                  ; convert digit to number
        add     A,      A               ;
        add     A,      A               ; left-shift (faster than `sla A`)
        add     A,      A               ; (shift lo-nybble to hi-nybble)
        add     A,      A               ;
        ld      C,      A               ; answer goes in C
        inc     E                       ; move to 1st digit
        ;-----------------------------------------------------------------------
        ; 1st digit goes in the lower nybble of C:
        ;
@one:   call    @digit                  ; convert digit to number
        or      C                       ; combine with hi-nybble (if present)
        ld      C,      A               ; answer goes in C

        ret                             ; ship it!

        ; convert a digit to a number:
        ;=======================================================================
        ; whitespace must already be precluded. err if not hex-digit
        ;
        ; if we unset bit 5 then ASCII "a"-"f" ($61-) becomes "A"-"F" ($41-)
        ; without also altering existing uppercase letters. This also has the
        ; side-effect of changing ASCII "0"-"9" ($30-$39) to codes $10-$19!
        ; (this is why ASCII codes 0-32 must be precluded beforehand)
        ;
@digit: ld      A,      [DE]            ; get digit
        res     5,      A               ; force upper-case for "a"-"f"

        ; TODO: check for ?"F" and reject early, allowing us to avoid
        ;       the `add 10` at the end with some rework?

        ; by subtracting $41 ("A"), "A" = 0 & "F" = 5 with everything else,
        ; including "0"-"9", being 'above' this (negative is >=128)
        ;
        sub     $41                     ; rebase to "A"
        cp      6                       ; check for "A"-"F"
        jr      c,      +               ; if "A"-"F", exit

        ; having eliminated characters above "F", shift the axis right
        ; so that "0" is at 0. any character below "0" will be negative
        add     $31
        cp      10                      ; check for 0-9
        ret     c                       ; (conditional RET first is slightly
        jp      errHex                  ;  faster than conditional JP first)

+       add     10                      ; change "A"-"F" to 10-15
        ret

.ENDB