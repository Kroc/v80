; v80, (C) Kroc Camen 2023-2024, MIT License
; expression parsing / evaulation

nextExpr:
;===============================================================================
; skip space before parsing an expression:
; (see parseExpr below for parameters)
;
;-------------------------------------------------------------------------------
        call    nextWord

        ; since the expression is expected/required,
        ; newline or end-of-file is an error:
        jp      z,      errParam

        ; fallthrough
        ; ...

parseExpr:
;===============================================================================
; parse an expression from the input file, tokenise it and evaluate it,
; returning the result. if the expression has forward-references,
; it'll be deferred on the heap
;
; in:   HL              current heap addr
;-------------------------------------------------------------------------------
        call    tokenExpr               ; read expr and tokenise

        ; if the expression cannot be evaluated (contains forward
        ; references), the hi-bit of the return value will be set
        ;
        rla                             ; pop the hi-bit off into carry
        jr      nc,     evalExpr        ; if 0, evaluate expression!

        ; the expression cannot be evalulated, copy it to the heap
        ; to be re-evaluated after parsing is complete
        ;
        ; (fallthrough)
        ; ...

deferExpr:
;===============================================================================
; push an expression to the heap:
;
; - the link addr to the previous expression
; - the current code-segment address
; - the current virtual program-counter
;   (in case of relative jump)
; - the size of the output; 1 or 2 bytes
; - the expr tokens
;
; in:   HL              current heap position
;       IX              virtual program-counter
;       IY              code-segement addr to reserve result bytes
;
; out:  HL              updated heap position (defer record added to heap)
;       IY              updated code-segment addr (expr result space reserved)
;       IX              updated virtual program-counter (as with IY)
;       A, BC|DE        (clobbered)
;-------------------------------------------------------------------------------
        ; we need to push a bunch of values to the heap and the fastest way
        ; to write 16-bit values easily is... the stack! simply make the heap
        ; into the stack and we can PUSH our stuff on to it!
        ;
        ; WE DO NOT NEED TO DISABLE INTERRUPTS!!! any interrupt is going to
        ; push to our heap and then pop the address off when it returns,
        ; which has no affect on the values we're pushing
        ;
        ld      [sp],   SP              ; backup stack pointer
        ld      SP,     HL              ; move stack to heap!
        ;-----------------------------------------------------------------------

        ; link this expression to the previous one:
        ; (since the heap address is in SP, we can reuse HL)
        ;
        ld      HL,     [defer]         ; get previous deferred expr address
        push    HL                      ; write to heap
        ld      [defer],SP              ; write heap addr to the entry point!

        ; push the current code-segment position; this is where
        ; the expression result will be filled in after evaluation
        push    IY

        ; push the current virtual program-counter
        ; (for calculating relative jumps)
        push    IX                      ; PC is always stored in IX, not RAM

        ; push the source file line-number
        ld      BC,     [row]
        push    BC
        ; push the source file column-number, plus the number
        ; of bytes the result should occupy in the code-segment
        ld      BC,     [stride_col]
        push    BC

        ;-----------------------------------------------------------------------
        ld      HL,     0               ; there is no `LD HL, SP` (!?), so
        add     HL,     SP              ;  it's quicker to just add SP to 0!
        ld      SP,     [sp]            ; restore stack pointer!

        ; reserve bytes for the expr result:
        ;
        ; this routine is only called if there is an instruction parameter
        ; (constant defines and if-statements cannot be deferred!) which
        ; assumes a minimum of 1 byte, so check for a second byte
        ;
        dec     C                       ; is the stride 1 or 2?
        jr      z,      +               ; if it is 1, skip the 2nd byte
        inc     IY                      ; reserve a byte and increment
        inc     IX                      ;  virtual program-counter
+       inc     IY                      ; reserve an additional byte
        inc     IX                      ;  and increment program-counter

        ; copy expression bytecode to the heap:
        ;
        ; note that LDDR is post-decrement (copy-then-decrement), whereas
        ; the heap is pre-decrement like the stack (decrement-then-copy)
        ;
        dec     HL                      ; fix heap addr for copy-then-DEC
        ex      DE,     HL              ; LDDR requires DE to be destination
        ld      HL,     [expr]          ; get the addr of the expr-bytecode
        ld      C,      [HL]            ; first byte is length / defer flag
        res     7,      C               ; stip hi-bit (defer flag)
        ld      B,      0               ; LDDR uses full BC count
        ;ld      A,      [stride]        ; before copy, ue the first byte
        ;ld      [HL],   A               ;  to record the parameter size
        lddr                            ; copy BC bytes from [DE] to [HL]!
        ex      DE,     HL              ; swap updated heap addr back to HL
        inc     HL                      ; fix heap addr after copy

        ; TODO: is the heap address on a used or unused addr? (LDDR)
        ; TODO: must return the same as evalExpr

        ret


evalExpr:
;===============================================================================
; evaluates an expr:
;
; out:  HL      addr of expr (could be [`expr`] or heap!)
;       BC      result value
;       cf      carry-flag is set if the expression cannot be evaluated!
;               (contains forward-references)
;-------------------------------------------------------------------------------
        ld      A,      [HL]            ; first byte is length / defer flag
        
        
        ret


tokenExpr:
;===============================================================================
; read an expression from the input file into tokens:
;
; WARN: the first character of the expression is assumed to be read and
;       the first character of the next word following the expression
;       will be read but not used! this allows chaining of expressions,
;       but you must avoid calling `readChar` without first using the
;       character waiting in `[char]`
;
; out:  [expr]          the first byte is the length of the expr
;       HL              forward-references to labels are pushed to the heap
;       A               length of expr. the hi-bit is set if the expression
;                       has forward-references that cannot be evaluated!
;       BC|DE           (clobbered)
;-------------------------------------------------------------------------------
        ; expressions are tokenised into a temporary space below the stack,
        ; this is because any forward-references to labels will need to be
        ; pushed to the heap so we can't have the expression on the heap
        ; at the same time!
        ;
        push    HL                      ; preserve heap addr
        ld      HL,     [expr]          ; addr of expr bytecode space
        xor     A                       ; set A to zero
        ld      [@flag],A               ; clear 'defer' flag
        dec     HL                      ; next byte down is start of bytecode
        ld      A,      [char]          ; get current unused input char
        jr      @unary                  ; jump into the parsing loop

        ;=======================================================================
        ; add an operator and fall-through to the next operand:
        ;
-       dec     HL                      ; move to next token space
        ld      [HL],   A               ; push token in A to expr

        call    nextWord                ; read first character of the next word
        jp      z,      errExpr         ; newline/EOF = unexpected expr end!

        ; an expression must begin with either a value,
        ; or a unary operator and a value
        ;
        ; unary operator?
        ;-----------------------------------------------------------------------
        ; unary operators can always precede values,
        ; even after an operator, e.g. `$10 + <:label`
        ;
@unary: cp      CHAR_OP_LO              ; lo-byte operator?
        jr      z,      +               ; a value must follow a unary operator
        ;-----------------------------------------------------------------------
        cp      CHAR_OP_HI              ; hi-byte operator?
        jr      z,      +               ; a value must follow a unary operator
        ;-----------------------------------------------------------------------
        cp      CHAR_OP_NOT             ; not operator?
        jr      nz,     @value          ; no unary operators, check for values

        ; a unary operator has been added,
        ; read the next character:
+       dec     HL                      ; move to next token space
        ld      [HL],   A               ; push a unary operator token

        call    nextWord                ; read first character of the next word
        jp      z,      errExpr         ; newline/EOF = unexpected expr end!

        ; hexadecimal literal?
        ;-----------------------------------------------------------------------
        ; a sigil is required because A-F can't be separated
        ; from instruction names without look-ahead
        ;
@value: cp      CHAR_HEX                ; hexadecimal sigil?
        jr      nz,     @const

        dec     HL                      ; move to next token space
        ld      [HL],   A               ; push a number token
        call    parseHexNumber          ; parse the hex number into BC
        dec     HL                      ; move to next token space
        ld      [HL],   B               ; push the number hi-byte
        dec     HL                      ; move to next token space
        ld      [HL],   C               ; push the number lo-byte

        jr      @op                     ; an operator can follow a value

        ; constant?
        ;-----------------------------------------------------------------------
@const: cp      CHAR_CONST              ; a constant?
        jr      nz,     @label

        ld      DE,     const           ; const dictionary entry point
        call    getSymbol               ; try get the constant's value

        halt

        ; label?
        ;-----------------------------------------------------------------------
@label: cp      CHAR_LABEL              ; a label?
        jp      nz,     errExpr         ; expression has no value!!

        ld      DE,     label           ; label dictionary entry point
        call    getSymbol               ; try get the label's value
        jr      c,      @defer

        ; TODO: handle missing label


        halt

        ; any expression that contains a forward-reference to a label causes
        ; the whole expression to be deferred. instead of the label value,
        ; the label's address in the dictionary is tokenised
        ;
@defer: dec     HL                      ; move to next token space
        ld      [HL],   CHAR_LABEL      ; push the label token
        dec     HL                      ; move to next token space
        ld      [HL],   D               ; push the label addr hi-byte
        dec     HL                      ; move to next token space
        ld      [HL],   E               ; push the label addr lo-byte

        ld      A,      %10000000       ; set the deferred flag
        ld      [@flag],A

        ;-----------------------------------------------------------------------
        ; a value has been added, check for the presence of an operator:
        ; if there's no operator, the expression ends here
        ;
@op:    call    nextWord                ; read first character of the next word
        jr      z,      @end            ; end expr at newline / end-of-file

        cp      CHAR_OP_ADD             ; add operator?
        jr      z,      -               ; push token to heap, find next operand
        cp      CHAR_OP_SUB             ; subtract operator?
        jr      z,      -               ; ...
        cp      CHAR_OP_MUL             ; multiply operator?
        jr      z,      -               ; ...
        cp      CHAR_OP_DIV             ; divide operator?
        jr      z,      -               ; ...
        cp      CHAR_OP_AND             ; and operator?
        jr      z,      -               ; ...
        cp      CHAR_OP_OR              ; or operator?
        jr      z,      -               ; ...
        cp      CHAR_OP_XOR             ; xor operator?
        jr      z,      -               ; ...
        cp      CHAR_OP_MOD             ; modulo operator?
        jr      z,      -               ; ...

        ; whatever it is, it isn't an operator;
        ; fall through and terminate the expression

        ;-----------------------------------------------------------------------
        ; calculate length of expression:
        ;
        ; the expr bytecode is ordered *downwards* in memory, so the difference
        ; from the last address to the starting adress is the length
        ;
        ; TODO: check for an overflow here
@end:   xor     A                       ; (clear carry flag!)
        dec     HL                      ; a null terminator is appended to
        ld      [HL],   A               ;  avoid counting during evaluation
        ex      DE,     HL              ; (only HL can do subtract)
        ld      HL,     [expr]          ; get starting addr of expr
        sbc     HL,     DE              ; subtract end-addr from start-addr
        ld      A,      [@flag]         ; get the defer flag and merge
        or      A,      L               ;  with length of expr in L
        ld      [DE],   A               ; write to first byte of expr

        pop     HL                      ; restore heap addr to HL
        ret

        ;-----------------------------------------------------------------------
@flag   .BYTE   $00