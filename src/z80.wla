; v80, (C) Kroc Camen 2023-2024, MIT License
; z80 opcode tree / emit
;
.BLOCK  "code-emit"

emitOpcode:
;===============================================================================
; write CPU opcode bytes, parsing any required parameters:
;
; in:   B               opcode flags byte from the opcode table
;       C               opcode byte
;       HL              heap address for any deferred expressions
;
; out:  HL              parsing of instruction parameters may push to heap
;       A, BC, DE       (clobbered)
;===============================================================================
        ; the flags byte is a set of flags for Z80-specifics
        ; and what, if any, kind of parameter is required
        ;-----------------------------------------------------------------------
        ld      A,      B               ; opcode flags byte
        and     %01111111               ; remove the top bit
        jr      nz,     +               ; if 0, no extension or params

        ; single opcode, no params:
        ;-----------------------------------------------------------------------
        ld      [IY+0], C               ; emit opcode byte
        inc     IY                      ; move to next byte in code-segment
        inc     IX                      ; increment virtual program-counter

        ret

        ; opcode with extensions or parameters:
        ;=======================================================================
+       bit     6,      B               ; bit 6 indicates IX or IY
        jr      nz,     @ixy            ; go handle IX|IY madness...

        ; is it a $CB or $ED extended opcode?
        ;
        bit     4,      B               ; bit 4 indicates an extended opcode
        jr      z,      +               ; not extended? skip over $CB/$ED

        ; output $CB or $ED opcode extension byte:
        ;
        and     %00100010               ; bit 5&1 = $22 ($ED) or $00 ($CB)
        add     $cb                     ; $CB+$00 = $CB or $CB+$22 = $ED
        ld      [IY+0], A               ; emit $CB|$ED prefix byte
        inc     IY                      ; move to next byte in code-segment
        inc     IX                      ; increment virtual program-counter

        ; at this point, all parameters (if any) follow the opcode,
        ; so we can output the opcode now and forget it
        ;-----------------------------------------------------------------------
+       ld      [IY+0], C               ; emit opcode byte
        inc     IY                      ; move to next byte in code-segment
        inc     IX                      ; increment virtual program-counter
        ;-----------------------------------------------------------------------

        ; any parameters?
        ;
        ; bit 2 indicates any kind of parameter for non IX|IY opcodes,
        ; i.e. 8 / 16 bit immediate, or relative (bit 3). there are no
        ; 2-parameter Z80 opcodes without IX|IY so 1 param can be assumed
        ;
        bit     2,      B               ; if no parameters, extensions
        ret     z                       ;  have been done, finish now!

        ; a single, 1 or 2 byte parameter:
        ;
        and     %00000001               ; LSB indicates 2-bytes
        add     1                       ; param has at least 1-byte

        bit     3,      B               ; relative jump?
        jr      z,      +               ; skip over the next instruction if not
        or      %10000000               ; add the rel-flag to the param type

        ; parse the following expression and
        ; write the value to the code-segment
+       jp      parseParam

        ;=======================================================================
        ; handle IX|IY opcodes: (bit 5 chooses between IX & IY)
        ;
@ixy:   and     %00100000               ; isolate bit 5
        or      %11011101               ; map to $DD (IX) or $FD (IY)
        ld      [IY+0], A               ; emit IX|IY prefix byte
        inc     IY                      ; move to next byte in code-segment
        inc     IX                      ; increment virtual program-counter

        ; on the Z80, a combination of $DD|$FB (IX|IY) + $CB opcodes place
        ; the opcode after the offset parameter! if this is the case, we
        ; have to insert the parameter first, then return for the opcode
        ;
        bit     4,      B               ; bit 4 on indicates $CB-extended
        jr      nz,     @cb             ; go handle reverse parameter order

        ; at this point, all parameters (if any) follow the opcode,
        ; so we can output the opcode now and forget it
        ;-----------------------------------------------------------------------
        ld      [IY+0], C               ; emit opcode byte
        inc     IY                      ; move to next byte in code-segment
        inc     IX                      ; increment virtual program-counter
        ;-----------------------------------------------------------------------

        ; bit 3 (offset), bit 2 (8-bit immediate), and
        ; bit 0 (16-bit immediate) indicate parameters
        ;
        ld      A,      B               ; opcode flags byte
        and     %00001101               ; filter out parameter flags
        ret     z                       ; if none, we are finished

        ; there are only two Z80 instructions that use 2 parameters
        ; -- LD [IX+$aa], $bb and the matching IY-variant
        ;
        xor     %00001100               ; flip just the bits for 2 params
        jr      z,      @two            ; divert for 2 params!

        ; only one parameter
        ; -- determine parameter width (byte or word)
        ;
        xor     A                       ; set A to zero
        rrc     B                       ; pop off bit 0 of opcode-flags
        adc     1                       ; add that bit, if present

        ; parse the following expression and
        ; write the value to the code-segment
        jp      parseParam

        ;-----------------------------------------------------------------------
        ; handle two-parameter instruction special case:
        ;
@two:   inc     A                       ; (set the parameter width to 1-byte)

        ; the first expression will read to the first character of the next
        ; word following the expression, or a newline / end-of-file. since
        ; a 2nd parameter is expected, newline or end-of-file is an error!
        ;
        call    parseParam              ; parse and emit 1st parameter
        jp      nextParam               ; parse and emit 2nd parameter

        ;-----------------------------------------------------------------------
        ; IX|IY + $CB is the edge-case that keeps on giving: at all other
        ; times the IX|IY offset byte follows the opcode, but not here!
        ;
@cb:    ld      [IY+0], $cb             ; emit $CB prefix byte
        inc     IY                      ; move to next byte in code-segment
        inc     IX                      ; increment virtual program-counter
        push    BC                      ; keep opcode until emit time

        ld      A,      1               ; parse the following expression and
        call    parseParam              ;  write the value to the code-segment

        pop     BC                      ; retrieve delayed opcode
        ld      [IY+0], C               ; emit opcode byte
        inc     IY                      ; move to next byte in code-segment
        inc     IX                      ; increment virtual program-counter

        ret

.ENDB
.BLOCK  "data-z80"

; Z80 opcode table:
;===============================================================================
; types of opcodes:
;
;             op                ; implied
;    ED       op                ; implied, ED-extended
;       CB    op                ; implied, CB-extended
;             op nn             ; immediate, 8-bit
;             op nn nn          ; immediate, 16-bit
;    ED       op nn nn          ; immediate, 16-bit, ED-extended
;             op rr             ; immediate, relative
; DD|FD       op                ; IXY implied
; DD|FD       op oo             ; IXY offset
; DD|FD CB oo op                ; IXY offset, CB-extended (the cursed opcode!)
; DD|FD       op oo nn          ; IXY offset, immediate -- 2 parameters!
; DD|FD       op nn nn          ; IXY implied, immediate, 16-bit
;
; opcode flags byte:
;-------------------------------------------------------------------------------
; the opcode tree indicates the end of a branch with an opcode-flags byte
; that describes the opcode prefixes and parameters used:
;
; bit 7 is always set as that indicates an opcode, rather than a branch
;
; bit 6 on indicates that the opcode is IX ($DD) or IY ($FD) extended
;
; bit 5 is used to select between extensions; if bit 6 is on,
;       then bit 5 off chooses IX, and bit 5 on chooses IY
;
; bit 4 on indicates a $CB (or $ED) extension. if bit 6 is off (no IX|Y),
;       then bits 5 & 1 on ($22) indicates an $ED extensions, otherwise
;       bits 5 & 1 are off ($00). bits 5 & 1 are combined this way because
;       $CB + $22 = $ED
;
; bit 3 on indicates an offset is present. if bit 6 is on, then this is the
;       IX|IY offset byte. if bit 6 is off, then this indicates a relative
;       jump offset (e.g. JR / DJNZ)
;
; bit 2 on indicates an immediate parameter. this is separate from
;       the offset parameter above as there can be two parameters!
;
; bit 1 is on for $ED extended opcodes
;
; bit 0 on indicates an immediate parameter is 16-bits instead of 8,
;       this is always paired with bit 2, both must be on to be valid
;
OP      = %10000000     ; implied -- no parameters
OP_I    = %11000000     ; bit 6=1: IX or IY extended
OP_X    = %11000000     ; bit 6=1, bit 5=0: IX
OP_Y    = %11100000     ; bit 6=1, bit 5=1: IY
OP_IX   = OP_I|OP_X     ; = implied, IX ($DD)
OP_IY   = OP_I|OP_Y     ; = implied, IY ($FD)
OP_CB   = %10010000     ; bit 6=?, bit 4=1, bit 5&1=0: CB-extended (+IX|IY)
OP_ED   = %10110010     ; bit 6=0, bit 4=1, bit 5&1=1: ED-extended
OP_O    = %11001000     ; bit 6=1, bit 3=1, bit 2=?: IX|IY includes offset
OP_IXO  = OP_IX|OP_O    ; = immediate, IX ($DD) + offset
OP_IYO  = OP_IY|OP_O    ; = immediate, IY ($FD) + offset
OP_CBXO = OP_IXO|OP_CB  ; = extended ($CB), IX ($DD) + offset
OP_CBYO = OP_IYO|OP_CB  ; = extended ($CB), IY ($FD) + offset
OP_R    = %10001100     ; bit 6=0, bit 3=1, bit 2=1: relative jump offset
OP_B    = %10000100     ; bit 2=1: immediate parameter, 8-bits (byte)
OP_W    = %10000101     ; bit 2=1, bit 0=1: immediate parameter, 16-bits (word)

OP_IXB  = OP_B|OP_IX    ; = IX + immediate 8-bits
OP_IYB  = OP_B|OP_IY    ; = IY + immediate 8-bits
OP_IXOB = OP_B|OP_IXO   ; = IX ($DD) + offset + immediate (2 parameters!)
OP_IYOB = OP_B|OP_IYO   ; = IY ($FD) + offset + immediate (2 parameters!)
OP_EDW  = OP_W|OP_ED    ; = immediate, extended ($ED), 16-bit!
OP_IXW  = OP_W|OP_IX    ; = immediate, IX ($DD), 16-bit
OP_IYW  = OP_W|OP_IY    ; = immediate, IY ($FD), 16-bit

opcodes:
;===============================================================================
        AND     = 128
        END     = 0
        ERR     = $ff

        Z80_A   = 7     ; z80 opcodes use these modifiers where an instruction
        Z80_B   = 0     ;  is orthogonal. the value 6, missing here, is for
        Z80_C   = 1     ;  the memory dereference modes such as `*hl`
        Z80_D   = 2     ;
        Z80_E   = 3     ;
        Z80_H   = 4     ;
        Z80_L   = 5     ;

        Z80_IH  = 4     ; when the undocumented IXH/L and IYH/L registers
        Z80_IL  = 5     ;  are used, these mumbers differentiate the halves

        .TABLE  BYTE,WORD
        ;-----------------------------------------------------------------------
        .DATA   'a', (@a-CADDR)-1               ; = A...?
        .DATA   'b', (@b-CADDR)-1               ; = B...?
        .DATA   'c', (@c-CADDR)-1               ; = C...?
        .DATA   'd', (@d-CADDR)-1               ; = D...?
        .DATA   'e', (@e-CADDR)-1               ; = E...?
        .DATA   'h', (@h-CADDR)-1               ; = H...?
        .DATA   'i', (@i-CADDR)-1               ; = I...?
        .DATA   'j', (@j-CADDR)-1               ; = J...?
        .DATA   'l', (@l-CADDR)-1               ; = L...?
        .DATA   'n', (@n-CADDR)-1               ; = N...?
        .DATA   'o', (@o-CADDR)-1               ; = O...?
        .DATA   'p', (@p-CADDR)-1               ; = P...?
        .DATA   'r', (@r-CADDR)-1               ; = R...?
        .DATA   's', (@s-CADDR)-1               ; = S...?
        ;-----------------------------------------------------------------------
        .BYTE   'x'|AND
        .BYTE   'o'|AND
        .BYTE   'r'|AND
        .BYTE   END, $ee,               OP_B    ; XOR $nn       |    EE nn
        .DATA   '*', (@xor_m-CADDR)-1
        .BYTE   '.'|AND
        .BYTE   'a', $a8+Z80_A,         OP      ; XOR.A         |    AF
        .BYTE   'b', $a8+Z80_B,         OP      ; XOR.B         |    A8
        .BYTE   'c', $a8+Z80_C,         OP      ; XOR.C         |    A9
        .BYTE   'd', $a8+Z80_D,         OP      ; XOR.D         |    AA
        .BYTE   'e', $a8+Z80_E,         OP      ; XOR.E         |    AB
        .BYTE   'h', $a8+Z80_H,         OP      ; XOR.H         |    AC
        .BYTE   'l', $a8+Z80_L,         OP      ; XOR.L         |    AD
        .BYTE   'i'|AND
        .DATA   'x', (@xor_rx-CADDR)-1
        .BYTE   'y'|AND
        .BYTE   'h', $a8+Z80_IH,        OP_IY   ; XOR.IYH       | DD AC
        .BYTE   'l', $a8+Z80_IL,        OP_IY   ; XOR.IYL       | DD AD
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@xor_rx .BYTE   'h', $a8+Z80_IH,        OP_IX   ; XOR.IXH       | FD AC
        .BYTE   'l', $a8+Z80_IL,        OP_IX   ; XOR.IXL       | FD AD
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@xor_m  .DATA   'h', (@xor_mh-CADDR)-1
        .BYTE   'i'|AND
        .BYTE   'x', $ae,               OP_IXO  ; XOR*IX $nn    | DD AE nn
        .BYTE   'y', $ae,               OP_IYO  ; XOR*IY $nn    | FD AE nn
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@xor_mh .BYTE   'l', $ae,               OP      ; XOR*HL        |    AE
        .BYTE   ERR
        ;=======================================================================
@a      .DATA   'd', (@ad-CADDR)-1
        .BYTE   'n'|AND
        .DATA   'd', (@and-CADDR)-1
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@ad     .DATA   'c', (@adc-CADDR)-1
        .DATA   'd', (@add-CADDR)-1
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@adc    .BYTE   END, $ce,               OP_B    ; ADC $nn       |    CE nn
        .DATA   '.', (@adc_r-CADDR)-1
        .BYTE   '*'|AND
        .DATA   'h', (@adc_mh-CADDR)-1
        .BYTE   'i'|AND
        .BYTE   'x', $8e,               OP_IXO  ; ADC*IX $nn    | DD 8E nn
        .BYTE   'y', $8e,               OP_IYO  ; ADC*IY $nn    | FD 8E nn
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@adc_mh .BYTE   'l', $8e,               OP      ; ADC*HL        |    8E
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@adc_r  .BYTE   'a', $88+Z80_A,         OP      ; ADC.A         |    8F
        .BYTE   'b', $88+Z80_B,         OP      ; ADC.B         |    88
        .BYTE   'c', $88+Z80_C,         OP      ; ADC.C         |    89
        .BYTE   'd', $88+Z80_D,         OP      ; ADC.D         |    8A
        .BYTE   'e', $88+Z80_E,         OP      ; ADC.E         |    8B
        .DATA   'h', (@adc_h-CADDR)-1
        .BYTE   'l', $88+Z80_L,         OP      ; ADC.L         |    8D
        .BYTE   'i'|AND
        .DATA   'x', (@adc_x-CADDR)-1
        .BYTE   'y'|AND
        .BYTE   'h', $88+Z80_IH,        OP_IY   ; ADC.IYH       | FD 8C
        .BYTE   'l', $88+Z80_IL,        OP_IY   ; ADC.IYL       | FD 8D
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@adc_x  .BYTE   'h', $88+Z80_IH,        OP_IX   ; ADC.IXH       | DD 8C
        .BYTE   'l', $88+Z80_IL,        OP_IX   ; ADC.IXL       | DD 8D
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@adc_h  .BYTE   END, $88+Z80_H,         OP      ; ADC.H         |    8C
        .BYTE   ''', $88+Z80_H,         OP      ; ADC.H'        |    8C
        .BYTE   'l'|AND
        .DATA   '.', (@@dot-CADDR)-1            ; ADC.HL.__
        .BYTE   '''|AND                         ; ADC.HL'__
@@dot   .DATA   'b', (@adc_bc-CADDR)-1
        .DATA   'd', (@adc_de-CADDR)-1
        .DATA   'h', (@adc_hl-CADDR)-1
        .BYTE   's'|AND
        .BYTE   'p', $7a,               OP_ED   ; ADC.HL.SP     | ED 7A
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@adc_bc .BYTE   'c', $4a,               OP_ED   ; ADC.HL+BC     | ED 4A
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@adc_de .BYTE   'e', $5a,               OP_ED   ; ADC.HL+DE     | ED 5A
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@adc_hl .BYTE   'l', $6a,               OP_ED   ; ADC.HL+HL     | ED 6A
        .BYTE   ERR
        ;=======================================================================
@add    .BYTE   END, $c6,               OP_B    ; ADD $nn       |    C6 nn
        .DATA   '.', (@add_r-CADDR)-1
        .BYTE   '*'|AND
        .DATA   'h', (@add_mh-CADDR)-1
        .BYTE   'i'|AND
        .BYTE   'x', $86,               OP_IXO  ; ADD*IX $nn    | DD 86 nn
        .BYTE   'y', $86,               OP_IYO  ; ADD*IY $nn    | FD 86 nn
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@add_mh .BYTE   'l', $86,               OP      ; ADD*HL        |    86
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@add_r  .BYTE   'a', $80+Z80_A,         OP      ; ADD.A         |    87
        .BYTE   'b', $80+Z80_B,         OP      ; ADD.B         |    80
        .BYTE   'c', $80+Z80_C,         OP      ; ADD.C         |    81
        .BYTE   'd', $80+Z80_D,         OP      ; ADD.D         |    82
        .BYTE   'e', $80+Z80_E,         OP      ; ADD.E         |    83
        .DATA   'h', (@add_h-CADDR)-1
        .BYTE   'l', $80+Z80_L,         OP      ; ADD.L         |    85
        .BYTE   'i'|AND
        .DATA   'x', (@add_x-CADDR)-1
        .BYTE   'y'|AND
        .BYTE   'h', $80+Z80_IH,        OP_IY   ; ADD.IYH       | FD 84
        .BYTE   'l', $80+Z80_IL,        OP_IY   ; ADD.IYL       | FD 84
        .BYTE   '.'|AND
        .DATA   'b', (@add_yb-CADDR)-1
        .DATA   'd', (@add_yd-CADDR)-1
        .DATA   'i', (@add_yi-CADDR)-1
        .BYTE   's'|AND
        .BYTE   'p', $39,               OP_IY   ; ADD.IY+SP     | FD 39
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@add_yb .BYTE   'c', $09,               OP_IY   ; ADD.IY+BC     | FD 09
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@add_yd .BYTE   'e', $19,               OP_IY   ; ADD.IY+DE     | FD 19
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@add_yi .BYTE   'y', $29,               OP_IY   ; ADD.IY+IY     | FD 29
        .BYTE   ERR
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@add_x  .BYTE   'h', $80+Z80_IH,        OP_IX   ; ADD.IXH       | DD 84
        .BYTE   'l', $80+Z80_IL,        OP_IX   ; ADD.IXL       | DD 84
        .BYTE   '.'|AND
        .DATA   'b', (@add_xb-CADDR)-1
        .DATA   'd', (@add_xd-CADDR)-1
        .DATA   'i', (@add_xi-CADDR)-1
        .BYTE   's'|AND
        .BYTE   'p', $39,               OP_IX   ; ADD.IX+SP     | DD 39
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@add_xb .BYTE   'c', $09,               OP_IX   ; ADD.IX+BC     | DD 09
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@add_xd .BYTE   'e', $19,               OP_IX   ; ADD.IX+DE     | DD 19
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@add_xi .BYTE   'x', $29,               OP_IX   ; ADD.IX+IX     | DD 29
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@add_h  .BYTE   END, $80+Z80_H,         OP      ; ADD.H         |    84
        .BYTE   ''', $80+Z80_H,         OP      ; ADD.H'        |    84
        .BYTE   'l'|AND
        .DATA   '.', (@@dot-CADDR)-1            ; ADD.HL.__
        .BYTE   '''|AND                         ; ADD.HL'__
@@dot   .DATA   'b', (@add_bc-CADDR)-1
        .DATA   'd', (@add_de-CADDR)-1
        .DATA   'h', (@add_hl-CADDR)-1
        .BYTE   's'|AND
        .BYTE   'p', $39,               OP      ; ADD.HL+SP     |    39
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@add_bc .BYTE   'c', $09,               OP      ; ADD.HL+BC     |    09
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@add_de .BYTE   'e', $19,               OP      ; ADD.HL+DE     |    19
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@add_hl .BYTE   'l', $29,               OP      ; ADD.HL+HL     |    29
        .BYTE   ERR
        ;=======================================================================
@and    .BYTE   END, $e6,               OP_B    ; AND $nn       |    E6 nn
        .DATA   '*', (@and_m-CADDR)-1
        .BYTE   '.'|AND
        .BYTE   'a', $a0+Z80_A,         OP      ; AND.A         |    A7
        .BYTE   'b', $a0+Z80_B,         OP      ; AND.B         |    A0
        .BYTE   'c', $a0+Z80_C,         OP      ; AND.C         |    A1
        .BYTE   'd', $a0+Z80_D,         OP      ; AND.D         |    A2
        .BYTE   'e', $a0+Z80_E,         OP      ; AND.E         |    A3
        .BYTE   'h', $a0+Z80_H,         OP      ; AND.H         |    A4
        .BYTE   'l', $a0+Z80_L,         OP      ; AND.L         |    A5
        .DATA   'i', (@and_i-CADDR)-1
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@and_i  .DATA   'x', (@and_x-CADDR)-1
        .DATA   'y', (@and_y-CADDR)-1
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@and_x  .BYTE   'h', $a0+Z80_IH,        OP_IX   ; AND.IXH       | DD A4
        .BYTE   'l', $a0+Z80_IL,        OP_IX   ; AND.IXL       | DD A5
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@and_y  .BYTE   'h', $a0+Z80_IH,        OP_IY   ; AND.IXH       | FD A4
        .BYTE   'l', $a0+Z80_IL,        OP_IY   ; AND.IXL       | FD A5
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@and_m  .DATA   'h', (@and_mh-CADDR)-1
        .BYTE   'i'|AND
        .BYTE   'x', $a6,               OP_IXO  ; AND*IX $nn    | DD A6 nn
        .BYTE   'y', $a6,               OP_IYO  ; AND*IY $nn    | FD A6 nn
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@and_mh .BYTE   'l', $a6,               OP      ; AND*HL        |    A6
        .BYTE   ERR
        ;=======================================================================
@b      .BYTE   'i'|AND
        .BYTE   't'|AND
        .DATA   '7', (@bit7-CADDR)-1
        .DATA   '6', (@bit6-CADDR)-1
        .DATA   '5', (@bit5-CADDR)-1
        .DATA   '4', (@bit4-CADDR)-1
        .DATA   '3', (@bit3-CADDR)-1
        .DATA   '2', (@bit2-CADDR)-1
        .DATA   '1', (@bit1-CADDR)-1
        .BYTE   '0'|AND
        .DATA   '*', (@bit0m-CADDR)-1
        .BYTE   '.'|AND
        .BYTE   'a', $40+(8*0)+Z80_A,   OP_CB   ; BIT0.A        |    CB 47
        .BYTE   'b', $40+(8*0)+Z80_B,   OP_CB   ; BIT0.B        |    CB 40
        .BYTE   'c', $40+(8*0)+Z80_C,   OP_CB   ; BIT0.C        |    CB 41
        .BYTE   'd', $40+(8*0)+Z80_D,   OP_CB   ; BIT0.D        |    CB 42
        .BYTE   'e', $40+(8*0)+Z80_E,   OP_CB   ; BIT0.E        |    CB 43
        .BYTE   'h', $40+(8*0)+Z80_H,   OP_CB   ; BIT0.H        |    CB 44
        .BYTE   'l', $40+(8*0)+Z80_L,   OP_CB   ; BIT0.L        |    CB 45
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@bit0m  .DATA   'h', (@bit0hl-CADDR)-1
        .BYTE   'i'|AND
        .BYTE   'x', $46+(8*0),         OP_CBXO ; BIT0*IX $nn   | DD CB nn 46
        .BYTE   'y', $46+(8*0),         OP_CBYO ; BIT0*IY $nn   | FD CB nn 46
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@bit0hl .BYTE   'l', $46+(8*0),         OP_CB   ; BIT0*HL       |    CB 46
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@bit1   .DATA   '*', (@bit1m-CADDR)-1
        .BYTE   '.'|AND
        .BYTE   'a', $40+(8*1)+Z80_A,   OP_CB   ; BIT1.A        |    CB 4F
        .BYTE   'b', $40+(8*1)+Z80_B,   OP_CB   ; BIT1.B        |    CB 48
        .BYTE   'c', $40+(8*1)+Z80_C,   OP_CB   ; BIT1.C        |    CB 49
        .BYTE   'd', $40+(8*1)+Z80_D,   OP_CB   ; BIT1.D        |    CB 4A
        .BYTE   'e', $40+(8*1)+Z80_E,   OP_CB   ; BIT1.E        |    CB 4B
        .BYTE   'h', $40+(8*1)+Z80_H,   OP_CB   ; BIT1.H        |    CB 4C
        .BYTE   'l', $40+(8*1)+Z80_L,   OP_CB   ; BIT1.L        |    CB 4D
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@bit1m  .DATA   'h', (@bit1hl-CADDR)-1
        .BYTE   'i'|AND
        .BYTE   'x', $46+(8*1),         OP_CBXO ; BIT1*IX $nn   | DD CB nn 4E
        .BYTE   'y', $46+(8*1),         OP_CBYO ; BIT1*IY $nn   | FD CB nn 4E
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@bit1hl .BYTE   'l', $46+(8*1),         OP_CB   ; BIT1*HL       |    CB 4E
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@bit2   .DATA   '*', (@bit2m-CADDR)-1
        .BYTE   '.'|AND
        .BYTE   'a', $40+(8*2)+Z80_A,   OP_CB   ; BIT2.A        |    CB 57
        .BYTE   'b', $40+(8*2)+Z80_B,   OP_CB   ; BIT2.B        |    CB 50
        .BYTE   'c', $40+(8*2)+Z80_C,   OP_CB   ; BIT2.C        |    CB 51
        .BYTE   'd', $40+(8*2)+Z80_D,   OP_CB   ; BIT2.D        |    CB 52
        .BYTE   'e', $40+(8*2)+Z80_E,   OP_CB   ; BIT2.E        |    CB 53
        .BYTE   'h', $40+(8*2)+Z80_H,   OP_CB   ; BIT2.H        |    CB 54
        .BYTE   'l', $40+(8*2)+Z80_L,   OP_CB   ; BIT2.L        |    CB 55
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@bit2m  .DATA   'h', (@bit2hl-CADDR)-1
        .BYTE   'i'|AND
        .BYTE   'x', $46+(8*2),         OP_CBXO ; BIT2*IX $nn   | DD CB nn 56
        .BYTE   'y', $46+(8*2),         OP_CBYO ; BIT2*IY $nn   | FD CB nn 56
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@bit2hl .BYTE   'l', $46+(8*2),         OP_CB   ; BIT2*HL       |    CB 56
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@bit3   .DATA   '*', (@bit3m-CADDR)-1
        .BYTE   '.'|AND
        .BYTE   'a', $40+(8*3)+Z80_A,   OP_CB   ; BIT3.A        |    CB 5F
        .BYTE   'b', $40+(8*3)+Z80_B,   OP_CB   ; BIT3.B        |    CB 58
        .BYTE   'c', $40+(8*3)+Z80_C,   OP_CB   ; BIT3.C        |    CB 59
        .BYTE   'd', $40+(8*3)+Z80_D,   OP_CB   ; BIT3.D        |    CB 5A
        .BYTE   'e', $40+(8*3)+Z80_E,   OP_CB   ; BIT3.E        |    CB 5B
        .BYTE   'h', $40+(8*3)+Z80_H,   OP_CB   ; BIT3.H        |    CB 5C
        .BYTE   'l', $40+(8*3)+Z80_L,   OP_CB   ; BIT3.L        |    CB 5D
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@bit3m  .DATA   'h', (@bit3hl-CADDR)-1
        .BYTE   'i'|AND
        .BYTE   'x', $46+(8*3),         OP_CBXO ; BIT3*IX $nn   | DD CB nn 5E
        .BYTE   'y', $46+(8*3),         OP_CBYO ; BIT3*IY $nn   | FD CB nn 5E
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@bit3hl .BYTE   'l', $46+(8*3),         OP_CB   ; BIT3*HL       |    CB 5E
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@bit4   .DATA   '*', (@bit4m-CADDR)-1
        .BYTE   '.'|AND
        .BYTE   'a', $40+(8*4)+Z80_A,   OP_CB   ; BIT4.A        |    CB 67
        .BYTE   'b', $40+(8*4)+Z80_B,   OP_CB   ; BIT4.B        |    CB 60
        .BYTE   'c', $40+(8*4)+Z80_C,   OP_CB   ; BIT4.C        |    CB 61
        .BYTE   'd', $40+(8*4)+Z80_D,   OP_CB   ; BIT4.D        |    CB 62
        .BYTE   'e', $40+(8*4)+Z80_E,   OP_CB   ; BIT4.E        |    CB 63
        .BYTE   'h', $40+(8*4)+Z80_H,   OP_CB   ; BIT4.H        |    CB 64
        .BYTE   'l', $40+(8*4)+Z80_L,   OP_CB   ; BIT4.L        |    CB 65
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@bit4m  .DATA   'h', (@bit4hl-CADDR)-1
        .BYTE   'i'|AND
        .BYTE   'x', $46+(8*4),         OP_CBXO ; BIT4*IX $nn   | DD CB nn 66
        .BYTE   'y', $46+(8*4),         OP_CBYO ; BIT4*IY $nn   | FD CB nn 66
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@bit4hl .BYTE   'l', $46+(8*4),         OP_CB   ; BIT4*HL       |    CB 66
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@bit5   .DATA   '*', (@bit5m-CADDR)-1
        .BYTE   '.'|AND
        .BYTE   'a', $40+(8*5)+Z80_A,   OP_CB   ; BIT5.A        |    CB 6F
        .BYTE   'b', $40+(8*5)+Z80_B,   OP_CB   ; BIT5.B        |    CB 68
        .BYTE   'c', $40+(8*5)+Z80_C,   OP_CB   ; BIT5.C        |    CB 69
        .BYTE   'd', $40+(8*5)+Z80_D,   OP_CB   ; BIT5.D        |    CB 6A
        .BYTE   'e', $40+(8*5)+Z80_E,   OP_CB   ; BIT5.E        |    CB 6B
        .BYTE   'h', $40+(8*5)+Z80_H,   OP_CB   ; BIT5.H        |    CB 6C
        .BYTE   'l', $40+(8*5)+Z80_L,   OP_CB   ; BIT5.L        |    CB 6D
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@bit5m  .DATA   'h', (@bit5hl-CADDR)-1
        .BYTE   'i'|AND
        .BYTE   'x', $46+(8*5),         OP_CBXO ; BIT5*IX $nn   | DD CB nn 6E
        .BYTE   'y', $46+(8*5),         OP_CBYO ; BIT5*IY $nn   | FD CB nn 6E
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@bit5hl .BYTE   'l', $46+(8*5),         OP_CB   ; BIT5*HL       |    CB 6E
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@bit6   .DATA   '*', (@bit6m-CADDR)-1
        .BYTE   '.'|AND
        .BYTE   'a', $40+(8*6)+Z80_A,   OP_CB   ; BIT6.A        |    CB 77
        .BYTE   'b', $40+(8*6)+Z80_B,   OP_CB   ; BIT6.B        |    CB 70
        .BYTE   'c', $40+(8*6)+Z80_C,   OP_CB   ; BIT6.C        |    CB 71
        .BYTE   'd', $40+(8*6)+Z80_D,   OP_CB   ; BIT6.D        |    CB 72
        .BYTE   'e', $40+(8*6)+Z80_E,   OP_CB   ; BIT6.E        |    CB 73
        .BYTE   'h', $40+(8*6)+Z80_H,   OP_CB   ; BIT6.H        |    CB 74
        .BYTE   'l', $40+(8*6)+Z80_L,   OP_CB   ; BIT6.L        |    CB 75
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@bit6m  .DATA   'h', (@bit6hl-CADDR)-1
        .BYTE   'i'|AND
        .BYTE   'x', $46+(8*6),         OP_CBXO ; BIT6*IX $nn   | DD CB nn 76
        .BYTE   'y', $46+(8*6),         OP_CBYO ; BIT6*IY $nn   | FD CB nn 76
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@bit6hl .BYTE   'l', $46+(8*6),         OP_CB   ; BIT6*HL       |    CB 76
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@bit7   .DATA   '*', (@bit7m-CADDR)-1
        .BYTE   '.'|AND
        .BYTE   'a', $40+(8*7)+Z80_A,   OP_CB   ; BIT7.A        |    CB 7F
        .BYTE   'b', $40+(8*7)+Z80_B,   OP_CB   ; BIT7.B        |    CB 78
        .BYTE   'c', $40+(8*7)+Z80_C,   OP_CB   ; BIT7.C        |    CB 79
        .BYTE   'd', $40+(8*7)+Z80_D,   OP_CB   ; BIT7.D        |    CB 7A
        .BYTE   'e', $40+(8*7)+Z80_E,   OP_CB   ; BIT7.E        |    CB 7B
        .BYTE   'h', $40+(8*7)+Z80_H,   OP_CB   ; BIT7.H        |    CB 7C
        .BYTE   'l', $40+(8*7)+Z80_L,   OP_CB   ; BIT7.L        |    CB 7D
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@bit7m  .DATA   'h', (@bit7hl-CADDR)-1
        .BYTE   'i'|AND
        .BYTE   'x', $46+(8*7),         OP_CBXO ; BIT7*IX $nn   | DD CB nn 7E
        .BYTE   'y', $46+(8*7),         OP_CBYO ; BIT7*IY $nn   | FD CB nn 7E
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@bit7hl .BYTE   'l', $46+(8*7),         OP_CB   ; BIT7*HL       |    CB 7E
        .BYTE   ERR
        ;=======================================================================
@c      .DATA   'a', (@call-CADDR)-1
        .DATA   'c', (@ccf-CADDR)-1
        .BYTE   'p'|AND
        .BYTE   END, $fe,               OP_B    ; CP nn         |    FE nn
        .DATA   '*', (@cp_m-CADDR)-1
        .DATA   '.', (@cp_r-CADDR)-1
        .DATA   'd', (@cpd-CADDR)-1
        .DATA   'i', (@cpi-CADDR)-1
        .BYTE   'l', $2f,               OP      ; CPL           |    2F
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@cp_m   .DATA   'h', (@cp_mh-CADDR)-1
        .BYTE   'i'|AND
        .BYTE   'x', $be,               OP_IXO  ; CP*IX $nn     | DD BE nn
        .BYTE   'y', $be,               OP_IYO  ; CP*IY $nn     | FD BE nn
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@cp_mh  .BYTE   'l', $be,               OP      ; CP*HL         |    BE
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@cp_r   .BYTE   'a', $b8+Z80_A,         OP      ; CP.A          |    BF
        .BYTE   'b', $b8+Z80_B,         OP      ; CP.B          |    B8
        .BYTE   'c', $b8+Z80_C,         OP      ; CP.C          |    B9
        .BYTE   'd', $b8+Z80_D,         OP      ; CP.D          |    BA
        .BYTE   'e', $b8+Z80_E,         OP      ; CP.E          |    BB
        .BYTE   'h', $b8+Z80_H,         OP      ; CP.H          |    BC
        .BYTE   'l', $b8+Z80_L,         OP      ; CP.L          |    BD
        .BYTE   'i'|AND
        .DATA   'x', (@cp_ix-CADDR)-1
        .BYTE   'y'|AND
        .BYTE   'h', $b8+Z80_IH,        OP_IY   ; CP.IYH        | FD BC
        .BYTE   'l', $b8+Z80_IL,        OP_IY   ; CP.IYL        | FD BD
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@cp_ix  .BYTE   'h', $b8+Z80_IH,        OP_IX   ; CP.IXH        | DD BC
        .BYTE   'l', $b8+Z80_IL,        OP_IX   ; CP.IXL        | DD BD
        .BYTE   ERR
        ;=======================================================================
@cpd    .BYTE   END, $a9,               OP_ED   ; CPD           | ED A9
        .BYTE   'r', $b9,               OP_ED   ; CPDR          | ED B9
        .BYTE   ERR
        ;=======================================================================
@cpi    .BYTE   END, $a1,               OP_ED   ; CPI           | ED A1
        .BYTE   'r', $b1,               OP_ED   ; CPIR          | ED B1
        .BYTE   ERR
        ;=======================================================================
@call   .BYTE   'l'|AND
        .BYTE   'l'|AND
        .BYTE   END, $cd,               OP_W    ; CALL $nnnn    |    CD nn nn
        .BYTE   '?'|AND
        .BYTE   'z', $cc,               OP_W    ; CALL?z $nnnn  |    CC nn nn
        .BYTE   'c', $dc,               OP_W    ; CALL?c $nnnn  |    DC nn nn
        .BYTE   'm', $fc,               OP_W    ; CALL?m $nnnn  |    FC nn nn
        .DATA   'p', (@callp-CADDR)-1
        .BYTE   'n'|AND
        .BYTE   'z', $c4,               OP_W    ; CALL?nz $nnnn |    C4 nn nn
        .BYTE   'c', $d4,               OP_W    ; CALL?nc $nnnn |    D4 nn nn
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@callp  .BYTE   END, $f4,               OP_W    ; CALL?p $nnnn  |    F4 nn nn
        .BYTE   'o', $e4,               OP_W    ; CALL?po $nnnn |    E4 nn nn
        .BYTE   'e', $ec,               OP_W    ; CALL?pe $nnnn |    EC nn nn
        .BYTE   ERR
        ;=======================================================================
@ccf    .BYTE   'f', $3f,               OP      ; CCF           |    3F
        .BYTE   ERR
        ;=======================================================================
@d      .DATA   'a', (@da-CADDR)-1
        .DATA   'e', (@de-CADDR)-1
        .BYTE   'i', $f3,               OP      ; DI            |    F3
        .BYTE   'j'|AND
        .BYTE   'n'|AND
        .BYTE   'z', $10,               OP_R    ; DJNZ $nn      |    10 nn
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@da     .BYTE   'a', $27,               OP      ; DAA           |    27
        .BYTE   ERR
        ;=======================================================================
@de     .BYTE   'c'|AND
        .DATA   '*', (@dec_m-CADDR)-1
        .DATA   '.', (@dec_r-CADDR)-1
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@dec_m  .DATA   'h', (@dec_mh-CADDR)-1
        .DATA   'i', (@dec_mi-CADDR)-1
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@dec_mh .BYTE   'l', $35,               OP      ; DEC*HL        |    35
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@dec_mi .BYTE   'x', $35,               OP_IXO  ; DEC*IX $nn    | DD 35 nn
        .BYTE   'y', $35,               OP_IYO  ; DEC*IY $nn    | FD 35 nn
        .BYTE   ERR
        ;-----------------------------------------------------------------------
        ; note how these opcodes don't follow the usual pattern!
@dec_r  .BYTE   'a', $3d,               OP      ; DEC.A         |    3D
        .DATA   'b', (@dec_b-CADDR)-1
        .BYTE   'c', $0d,               OP      ; DEC.C         |    0D
        .DATA   'd', (@dec_d-CADDR)-1
        .BYTE   'e', $1d,               OP      ; DEC.E         |    1D
        .DATA   'h', (@dec_h-CADDR)-1
        .BYTE   'l', $2d,               OP      ; DEC.L         |    2D
        .DATA   'i', (@dec_i-CADDR)-1
        .BYTE   's'|AND
        .BYTE   'p', $3b,               OP      ; DEC.SP        |    3B
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@dec_b  .BYTE   END, $05,               OP      ; DEC.B         |    05
        .BYTE   ''', $05,               OP      ; DEC.B'        |    05
        .BYTE   'c', $0b,               OP      ; DEC.BC        |    0B
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@dec_d  .BYTE   END, $15,               OP      ; DEC.D         |    15
        .BYTE   ''', $15,               OP      ; DEC.D'        |    15
        .BYTE   'e', $1b,               OP      ; DEC.DE        |    1B
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@dec_h  .BYTE   END, $25,               OP      ; DEC.H         |    25
        .BYTE   ''', $25,               OP      ; DEC.H'        |    25
        .BYTE   'l', $2b,               OP      ; DEC.HL        |    2B
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@dec_i  .DATA   'x', (@dec_ix-CADDR)-1
        .BYTE   'y'|AND
        .BYTE   END, $2b,               OP_IY   ; DEC.IY        | FD 2B
        .BYTE   'h', $05+(8*Z80_IH),    OP_IY   ; DEC.IYH       | FD 25
        .BYTE   'l', $05+(8*Z80_IL),    OP_IY   ; DEC.IYL       | FD 2D
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@dec_ix .BYTE   END, $2b,               OP_IX   ; DEC.IX        | DD 2B
        .BYTE   'h', $05+(8*Z80_IH),    OP_IX   ; DEC.IXH       | DD 25
        .BYTE   'l', $05+(8*Z80_IL),    OP_IX   ; DEC.IXL       | DD 2D
        .BYTE   ERR
        ;=======================================================================
@e      .BYTE   'i', $fb,               OP      ; EI            |    FB
        .BYTE   'x'|AND
        .BYTE   'x', $d9,               OP      ; EXX           |    D9
        .DATA   '*', (@ex_m-CADDR)-1
        .BYTE   '.'|AND
        .DATA   'a', (@ex_af-CADDR)-1
        .DATA   'h', (@ex_hl-CADDR)-1
        .BYTE   'd'|AND
        .BYTE   'e'|AND
        .DATA   '.', (@@dot-CADDR)-1            ; EX.DE.__
        .BYTE   '''|AND                         ; EX.DE'__
@@dot   .BYTE   'h'|AND
        .BYTE   'l', $eb,               OP      ; EX.DE.HL      |    EB
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@ex_hl  .BYTE   'l'|AND
        .DATA   '.', (@@dot-CADDR)-1            ; EX.HL.__
        .BYTE   '''|AND                         ; EX.HL'__
@@dot   .BYTE   'd'|AND
        .BYTE   'e', $eb,               OP      ; EX.HL.DE      |    EB
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@ex_af  .BYTE   'f'|AND                         ; TODO: allow shadow registers
        .DATA   '.', (@@dot-CADDR)-1
        .BYTE   '''|AND
@@dot   .BYTE   'a'|AND
        .BYTE   'f', $08,               OP      ; EX.AF.AF      |    08
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@ex_m   .BYTE   's'|AND
        .BYTE   'p'|AND
        .BYTE   '.'|AND
        .DATA   'i', (@ex_mi-CADDR)-1
        .BYTE   'h'|AND
        .BYTE   'l', $e3,               OP      ; EX*SP.HL      |    E3
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@ex_mi  .BYTE   'x', $e3,               OP_IX   ; EX*SP.IX      | DD E3
        .BYTE   'y', $e3,               OP_IY   ; EX*SP.IY      | FD E3
        .BYTE   ERR
        ;=======================================================================
@h      .BYTE   'a'|AND                         ; TODO: allow `hlt` / `hcf`
        .BYTE   'l'|AND
        .BYTE   't', $76,               OP      ; HALT          |    76
        .BYTE   ERR
        ;=======================================================================
@i      .DATA   'm', (@im-CADDR)-1
        .BYTE   'n'|AND
        .DATA   '.', (@in_r-CADDR)-1
        .DATA   'c', (@inc-CADDR)-1
        .DATA   'd', (@ind-CADDR)-1
        .BYTE   'i'|AND
        .BYTE   END, $a2,               OP_ED   ; INI           | ED A2
        .BYTE   'r', $b2,               OP_ED   ; INIR          | ED B2
        .BYTE   ERR
        ;=======================================================================
@im     .BYTE   '.'|AND
        .BYTE   '0', $46,               OP_ED   ; IM.0          | ED 46
        .BYTE   '1', $56,               OP_ED   ; IM.1          | ED 56
        .BYTE   '2', $5e,               OP_ED   ; IM.2          | ED 5E
        .BYTE   ERR
        ;=======================================================================
@in_r   .DATA   'a', (@in_a-CADDR)-1
        .DATA   'b', (@in_b-CADDR)-1
        .DATA   'c', (@in_c-CADDR)-1
        .DATA   'd', (@in_d-CADDR)-1
        .DATA   'e', (@in_e-CADDR)-1
        .DATA   'h', (@in_h-CADDR)-1
        .BYTE   'l'|AND
        .DATA   ''', (@@_-CADDR)-1              ; IN.A'_
@@_     .BYTE   '*'|AND
        .BYTE   'c', $68,               OP_ED   ; IN.L*C        | ED 68
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@in_a   .DATA   ''', (@@_-CADDR)-1              ; IN.A'_
@@_     .BYTE   '*'|AND
        .BYTE   END, $db,               OP_B    ; IN.A* $nn     |    DB nn
        .BYTE   'c', $78,               OP_ED   ; IN.A*C        | ED 78
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@in_b   .DATA   ''', (@@_-CADDR)-1              ; IN.B'_
@@_     .BYTE   '*'|AND
        .BYTE   'c', $40,               OP_ED   ; IN.B*C        | ED 40
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@in_c   .DATA   ''', (@@_-CADDR)-1              ; IN.C'_
@@_     .BYTE   '*'|AND
        .BYTE   'c', $48,               OP_ED   ; IN.C*C        | ED 48
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@in_d   .DATA   ''', (@@_-CADDR)-1              ; IN.D'_
@@_     .BYTE   '*'|AND
        .BYTE   'c', $50,               OP_ED   ; IN.D*C        | ED 50
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@in_e   .DATA   ''', (@@_-CADDR)-1              ; IN.E'_
@@_     .BYTE   '*'|AND
        .BYTE   'c', $58,               OP_ED   ; IN.E*C        | ED 58
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@in_h   .DATA   ''', (@@_-CADDR)-1              ; IN.H'_
@@_     .BYTE   '*'|AND
        .BYTE   'c', $60,               OP_ED   ; IN.H*C        | ED 60
        .BYTE   ERR
        ;=======================================================================
@inc    .DATA   '.', (@inc_r-CADDR)-1
        .BYTE   '*'|AND
@inc_m  .DATA   'h', (@inc_mh-CADDR)-1
        .DATA   'i', (@inc_mi-CADDR)-1
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@inc_mh .BYTE   'l', $34,               OP      ; INC*HL        |    34
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@inc_mi .BYTE   'x', $34,               OP_IXO  ; INC*IX $nn    | DD 34 nn
        .BYTE   'y', $34,               OP_IYO  ; INC*IY $nn    | FD 34 nn
        .BYTE   ERR
        ;-----------------------------------------------------------------------
        ; note how these opcodes don't follow the usual pattern!
@inc_r  .BYTE   'a', $3c,               OP      ; INC.A         |    3C
        .DATA   'b', (@inc_b-CADDR)-1
        .BYTE   'c', $0c,               OP      ; INC.C         |    0C
        .DATA   'd', (@inc_d-CADDR)-1
        .BYTE   'e', $1c,               OP      ; INC.E         |    1C
        .DATA   'h', (@inc_h-CADDR)-1
        .BYTE   'l', $2c,               OP      ; INC.L         |    2C
        .DATA   'i', (@inc_i-CADDR)-1
        .BYTE   's'|AND
        .BYTE   'p', $33,               OP      ; INC.SP        |    33
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@inc_b  .BYTE   END, $04,               OP      ; INC.B         |    04
        .BYTE   ''', $04,               OP      ; INC.B'        |    04
        .BYTE   'c', $03,               OP      ; INC.BC        |    03
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@inc_d  .BYTE   END, $14,               OP      ; INC.D         |    14
        .BYTE   ''', $14,               OP      ; INC.D'        |    14
        .BYTE   'e', $13,               OP      ; INC.DE        |    13
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@inc_h  .BYTE   END, $24,               OP      ; INC.H         |    24
        .BYTE   ''', $24,               OP      ; INC.H'        |    24
        .BYTE   'l', $23,               OP      ; INC.HL        |    23
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@inc_i  .DATA   'x', (@inc_ix-CADDR)-1
        .BYTE   'y'|AND
        .BYTE   END, $23,               OP_IY   ; INC.IY        | FD 23
        .BYTE   'h', $04+(8*Z80_IH),    OP_IY   ; INC.IYH       | FD 24
        .BYTE   'l', $04+(8*Z80_IL),    OP_IY   ; INC.IYL       | FD 2C
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@inc_ix .BYTE   END, $23,               OP_IX   ; INC.IX        | DD 23
        .BYTE   'h', $04+(8*Z80_IH),    OP_IX   ; INC.IXH       | DD 24
        .BYTE   'l', $04+(8*Z80_IL),    OP_IX   ; INC.IXL       | DD 2C
        .BYTE   ERR
        ;=======================================================================
@ind    .BYTE   END, $aa,               OP_ED   ; IND           | ED AA
        .BYTE   'r', $ba,               OP_ED   ; INDR          | ED BA
        .BYTE   ERR
        ;=======================================================================
@j      .DATA   'p', (@jp-CADDR)-1
        .BYTE   'r'|AND
        .BYTE   END, $18,               OP_R    ; JR $nnnn      |    18 nn
        .BYTE   '?'|AND
        .BYTE   'z', $28,               OP_R    ; JR?z $nnnn    |    28 nn
        .BYTE   'c', $38,               OP_R    ; jr?c $nnnn    |    38 nn
        .BYTE   'n'|AND
        .BYTE   'z', $20,               OP_R    ; jr?nz $nnnn   |    20 nn
        .BYTE   'c', $30,               OP_R    ; jr?nc $nnnn   |    30 nn
        .BYTE   ERR
        ;=======================================================================
@jp     .BYTE   END, $c3,               OP_W    ; JP $nnnn      |    C3 nn nn
        .DATA   '*', (@jp_m-CADDR)-1
        .BYTE   '?'|AND
        .BYTE   'z', $ca,               OP_W    ; JP?z $nnnn    |    CA nn nn
        .BYTE   'c', $da,               OP_W    ; JP?c $nnnn    |    DA nn nn
        .BYTE   'm', $fa,               OP_W    ; JP?m $nnnn    |    FA nn nn
        .DATA   'p', (@jp_p-CADDR)-1
        .BYTE   'n'|AND
        .BYTE   'z', $c2,               OP_W    ; JP?nz $nnnn   |    C2 nn nn
        .BYTE   'c', $d2,               OP_W    ; JP?nc $nnnn   |    D2 nn nn
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@jp_p   .BYTE   END, $f2,               OP_W    ; JP?p $nnnn    |    F2 nn nn
        .BYTE   'o', $e2,               OP_W    ; JP?po $nnnn   |    E2 nn nn
        .BYTE   'e', $ea,               OP_W    ; JP?pe $nnnn   |    EA nn nn
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@jp_m   .DATA   'h', (@jp_hl-CADDR)-1
        .BYTE   'i'|AND
        .BYTE   'x', $e9,               OP_IX   ; JP*IX         | DD E9
        .BYTE   'y', $e9,               OP_IY   ; JP*IY         | FD E9
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@jp_hl  .BYTE   'l', $e9,               OP      ; JP*HL         |    E9
        .BYTE   ERR
        ;=======================================================================
@l      .BYTE   'd'|AND
        .DATA   'd', (@ldd-CADDR)-1
        .DATA   'i', (@ldi-CADDR)-1
        .DATA   '.', (@ld_r-CADDR)-1
        ;-----------------------------------------------------------------------
        .BYTE   '*'|AND
        .DATA   'b', (@ld_bc-CADDR)-1
        .DATA   'd', (@ld_de-CADDR)-1
        .DATA   'h', (@ld_hl-CADDR)-1
        .DATA   'i', (@ld_mi-CADDR)-1
        .BYTE   '$'|AND
        .BYTE   '.'|AND                         ; LD*$._
        .BYTE   'a', $32,               OP_W    ; LD*$.A $nnnn  |   32 nn nn
        .DATA   'b', (@ld_mb-CADDR)-1
        .DATA   'd', (@ld_md-CADDR)-1
        .DATA   'h', (@ld_mh-CADDR)-1
        .DATA   'i', (@ld_xy-CADDR)-1
        .BYTE   's'|AND
        .BYTE   'p', $73,               OP_EDW  ; LD*$.SP $nnnn | ED 73 nn nn
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@ld_mb  .BYTE   'c', $43,               OP_EDW  ; LD*$.BC $nnnn | ED 43 nn nn
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@ld_md  .BYTE   'e', $53,               OP_EDW  ; LD*$.DE $nnnn | ED 53 nn nn
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@ld_mh  .BYTE   'l', $22,               OP_W    ; LD*$.HL $nnnn |    22 nn nn
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@ld_xy  .BYTE   'x', $22,               OP_IXW  ; LD*$.IX $nnnn | DD 22 nn nn
        .BYTE   'y', $22,               OP_IYW  ; LD*$.IY $nnnn | FD 22 nn nn
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@ld_bc  .BYTE   'c'|AND
        .DATA   '.', (@@dot-CADDR)-1            ; LD*BC._
        .BYTE   '''|AND                         ; LD*BC'_
@@dot   .BYTE   'a', $02,               OP      ; LD*BC.A       |    02
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@ld_de  .BYTE   'e'|AND
        .DATA   '.', (@@dot-CADDR)-1            ; LD*DE._
        .BYTE   '''|AND                         ; LD*DE'_
@@dot   .BYTE   'a', $12,               OP      ; LD*DE.A       |    12
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@ld_hl  .BYTE   'l'|AND
        .BYTE   END, $36,               OP_B    ; LD*HL $nn    |    36 nn
        .DATA   '.', (@@dot-CADDR)-1            ; LD*HL._
        .DATA   ''', (@@pos-CADDR)-1            ; LD*HL'_
@@pos   .BYTE   END, $36,               OP_B    ; LD*HL' $nn    |    36 nn
@@dot   .BYTE   'a', $70+Z80_A,         OP      ; LD*HL.A       |    77
        .BYTE   'b', $70+Z80_B,         OP      ; LD*HL.B       |    70
        .BYTE   'c', $70+Z80_C,         OP      ; LD*HL.C       |    71
        .BYTE   'd', $70+Z80_D,         OP      ; LD*HL.D       |    72
        .BYTE   'e', $70+Z80_E,         OP      ; LD*HL.E       |    73
        .BYTE   'h', $70+Z80_H,         OP      ; LD*HL.H       |    74
        .BYTE   'l', $70+Z80_L,         OP      ; LD*HL.L       |    75
        .BYTE   ERR
        
        ;-----------------------------------------------------------------------
@ld_mi  .DATA   'x', (@ld_mx-CADDR)-1
        .BYTE   'y'|AND
        .BYTE   END, $36,               OP_IYOB ; LD*IY $oo $nn | FD 36 oo nn
        .BYTE   '.'|AND
        .BYTE   'a', $70+Z80_A,         OP_IYO  ; LD*IY.A       | FD 77
        .BYTE   'b', $70+Z80_B,         OP_IYO  ; LD*IY.B       | FD 70
        .BYTE   'c', $70+Z80_C,         OP_IYO  ; LD*IY.C       | FD 71
        .BYTE   'd', $70+Z80_D,         OP_IYO  ; LD*IY.D       | FD 72
        .BYTE   'e', $70+Z80_E,         OP_IYO  ; LD*IY.E       | FD 73
        .BYTE   'h', $70+Z80_H,         OP_IYO  ; LD*IY.H       | FD 74
        .BYTE   'l', $70+Z80_L,         OP_IYO  ; LD*IY.L       | FD 75
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@ld_mx  .BYTE   END, $36,               OP_IXOB ; LD*IX $oo $nn | DD 36 oo nn
        .BYTE   '.'|AND
        .BYTE   'a', $70+Z80_A,         OP_IXO  ; LD*IX.A       | DD 77
        .BYTE   'b', $70+Z80_B,         OP_IXO  ; LD*IX.B       | DD 70
        .BYTE   'c', $70+Z80_C,         OP_IXO  ; LD*IX.C       | DD 71
        .BYTE   'd', $70+Z80_D,         OP_IXO  ; LD*IX.D       | DD 72
        .BYTE   'e', $70+Z80_E,         OP_IXO  ; LD*IX.E       | DD 73
        .BYTE   'h', $70+Z80_H,         OP_IXO  ; LD*IX.H       | DD 74
        .BYTE   'l', $70+Z80_L,         OP_IXO  ; LD*IX.L       | DD 75
        .BYTE   ERR
        ;=======================================================================
@ldd    .BYTE   END, $a8,               OP_ED   ; LDD           | ED A8
        .BYTE   'r', $b8,               OP_ED   ; LDDR          | ED B8
        .BYTE   ERR
        ;=======================================================================
@ldi    .BYTE   END, $a0,               OP_ED   ; LDI           | ED A0
        .BYTE   'r', $b0,               OP_ED   ; LDIR          | ED B0
        .BYTE   ERR
        ;=======================================================================
@ld_r   .DATA   'a', (@ld_a-CADDR)-1
        .DATA   'b', (@ld_b-CADDR)-1
        .DATA   'c', (@ld_c-CADDR)-1
        .DATA   'd', (@ld_d-CADDR)-1
        .DATA   'e', (@ld_e-CADDR)-1
        .DATA   'h', (@ld_h-CADDR)-1
        .DATA   'l', (@ld_l-CADDR)-1
        .DATA   'i', (@ld_i-CADDR)-1
        .DATA   's', (@ld_s-CADDR)-1
        .BYTE   'r'|AND
        .BYTE   '.'|AND
        .BYTE   'a', $4f,               OP_ED   ; LD.R.A        | ED 4F
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@ld_s   .BYTE   'p'|AND
        .BYTE   END, $31,               OP_W    ; LD.SP $nnnn   |    31 nn nn
        .BYTE   '*', $7b,               OP_EDW  ; LD.SP* $nnnn  | ED 7B nn nn
        .BYTE   '.'|AND
        .DATA   'h', (@ldsp_h-CADDR)-1
        .BYTE   'i'|AND
        .BYTE   'x', $f9,               OP_IX   ; LD.SP.IX      | DD F9
        .BYTE   'y', $f9,               OP_IY   ; LD.SP.IY      | FD F9
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@ldsp_h .BYTE   'l', $f9,               OP      ; LD.SP.HL      |    F9
        .BYTE   ERR
        ;=======================================================================
@ld_a   .DATA   ''', (@@pos-CADDR)-1
@@pos   .BYTE   END, $3e,               OP_B    ; LD.A $nn      |    3E nn
        .DATA   '*', (@lda_m-CADDR)-1
        .DATA   '.', (@@dot-CADDR)-1
@@dot   .BYTE   'a', $78+Z80_A,         OP      ; LD.A.A        |    7F
        .BYTE   'b', $78+Z80_B,         OP      ; LD.A.B        |    78
        .BYTE   'c', $78+Z80_C,         OP      ; LD.A.C        |    79
        .BYTE   'd', $78+Z80_D,         OP      ; LD.A.D        |    7A
        .BYTE   'e', $78+Z80_E,         OP      ; LD.A.E        |    7B
        .BYTE   'h', $78+Z80_H,         OP      ; LD.A.H        |    7C
        .BYTE   'l', $78+Z80_L,         OP      ; LD.A.L        |    7D
        .BYTE   'r', $5f,               OP_ED   ; LD.A.R        | ED 5F
        .BYTE   'i'|AND
        .BYTE   END, $57                OP_ED   ; LD.A.I        | ED 57
        .DATA   'x', (@lda_ix-CADDR)-1
        .BYTE   'y'|AND
        .BYTE   'h', $78+Z80_IH,        OP_IY   ; LD.A.IYH      | FD 7C
        .BYTE   'l', $78+Z80_IL,        OP_IY   ; LD.A.IYL      | FD 7D
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@lda_ix .BYTE   'h', $78+Z80_IH,        OP_IX   ; LD.A.IXH      | DD 7C
        .BYTE   'l', $78+Z80_IL,        OP_IX   ; LD.A.IXL      | DD 7D
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@lda_m  .BYTE   END, $3a,               OP_W    ; LD.A* $nnnn   |    3A nn nn
        .DATA   'b', (@lda_bc-CADDR)-1
        .DATA   'd', (@lda_de-CADDR)-1
        .DATA   'h', (@lda_hl-CADDR)-1
        .BYTE   'i'|AND
        .BYTE   'x', $7e,               OP_IXO  ; LD.A*IX $nn   | DD 7E nn
        .BYTE   'y', $7e,               OP_IYO  ; LD.A*IY $nn   | FD 7E nn
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@lda_bc .BYTE   'c', $0a,               OP      ; LD.A*BC       |    0A
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@lda_de .BYTE   'e', $1a,               OP      ; LD.A*DE       |    1A
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@lda_hl .BYTE   'l', $7e,               OP      ; LD.A*HL       |    7E
        .BYTE   ERR
        ;=======================================================================
@ld_b   .DATA   'c', (@ldbc-CADDR)-1            ; LD.BC?
        .DATA   '.', (@@dot-CADDR)-1            ; LD.B._
        .DATA   ''', (@@pos-CADDR)-1            ; LD.B'_
@@pos   .BYTE   END, $06,               OP_B    ; LD.B $nn      |    06 nn
        .DATA   '*', (@ldb_m-CADDR)-1
        ;-----------------------------------------------------------------------
@@dot   .BYTE   'a', $40+Z80_A,         OP      ; LD.B.A        |    47
        .BYTE   'b', $40+Z80_B,         OP      ; LD.B.B        |    40
        .BYTE   'c', $40+Z80_C,         OP      ; LD.B.C        |    41
        .BYTE   'd', $40+Z80_D,         OP      ; LD.B.D        |    42
        .BYTE   'e', $40+Z80_E,         OP      ; LD.B.E        |    43
        .BYTE   'h', $40+Z80_H,         OP      ; LD.B.H        |    44
        .BYTE   'l', $40+Z80_L,         OP      ; LD.B.L        |    45
        .BYTE   'i'|AND
        .DATA   'x', (@ldb_ix-CADDR)-1
        .BYTE   'y'|AND
        .BYTE   'h', $40+Z80_IH,        OP_IY   ; LD.B.IYH      | FD 44
        .BYTE   'l', $40+Z80_IL,        OP_IY   ; LD.B.IYL      | FD 45
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@ldb_ix .BYTE   'h', $40+Z80_IH,        OP_IX   ; LD.B.IXH      | DD 44
        .BYTE   'l', $40+Z80_IL,        OP_IX   ; LD.B.IXL      | DD 45
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@ldbc   .DATA   ''', (@@pos-CADDR)-1            ; LD.BC'?
@@pos   .BYTE   END, $01,               OP_W    ; LD.BC  $nnnn  |    01 nn nn
        .BYTE   '*', $4b,               OP_EDW  ; LD.BC* $nnnn  | ED 4B nn nn
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@ldb_m  .DATA   'h', (@ldb_hl-CADDR)-1
        .BYTE   'i'|AND
        .BYTE   'x', $46,               OP_IXO  ; LD.B*IX $nn   | DD 46 nn
        .BYTE   'y', $46,               OP_IYO  ; LD.B*IY $nn   | FD 46 nn
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@ldb_hl .BYTE   'l', $46,               OP      ; LD.B*HL       |    46
        .BYTE   ERR
        ;=======================================================================
@ld_c   .DATA   '.', (@@dot-CADDR)-1            ; LD.C._
        .DATA   ''', (@@pos-CADDR)-1            ; LD.C'_
@@pos   .BYTE   END, $0e,               OP_B    ; LD.C $nn      |    0E nn
        .DATA   '*', (@ldc_m-CADDR)-1
        ;-----------------------------------------------------------------------
@@dot   .BYTE   'a', $48+Z80_A,         OP      ; LD.C.A        |    4F
        .BYTE   'b', $48+Z80_B,         OP      ; LD.C.B        |    48
        .BYTE   'c', $48+Z80_C,         OP      ; LD.C.C        |    49
        .BYTE   'd', $48+Z80_D,         OP      ; LD.C.D        |    4A
        .BYTE   'e', $48+Z80_E,         OP      ; LD.C.E        |    4B
        .BYTE   'h', $48+Z80_H,         OP      ; LD.C.H        |    4C
        .BYTE   'l', $48+Z80_L,         OP      ; LD.C.L        |    4D
        .BYTE   'i'|AND
        .DATA   'x', (@ldc_ix-CADDR)-1
        .BYTE   'y'|AND
        .BYTE   'h', $48+Z80_IH,        OP_IY   ; LD.C.IYH      | FD 4C
        .BYTE   'l', $48+Z80_IL,        OP_IY   ; LD.C.IYL      | FD 4D
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@ldc_ix .BYTE   'h', $48+Z80_IH,        OP_IX   ; LD.C.IXH      | DD 4C
        .BYTE   'l', $48+Z80_IL,        OP_IX   ; LD.C.IXL      | DD 4D
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@ldc_m  .DATA   'h', (@ldc_hl-CADDR)-1
        .BYTE   'i'|AND
        .BYTE   'x', $4e,               OP_IXO  ; LD.C*IX $nn   | DD 4E nn
        .BYTE   'y', $4e,               OP_IYO  ; LD.C*IY $nn   | FD 4E nn
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@ldc_hl .BYTE   'l', $4e,               OP      ; LD.C*HL       |    4E
        .BYTE   ERR
        ;=======================================================================
@ld_d   .DATA   'e', (@ldde-CADDR)-1            ; LD.DE?
        .DATA   '.', (@@dot-CADDR)-1            ; LD.D._
        .DATA   ''', (@@pos-CADDR)-1            ; LD.D'_
@@pos   .BYTE   END, $16,               OP_B    ; LD.D $nn      |    16 nn
        .DATA   '*', (@ldd_m-CADDR)-1
        ;-----------------------------------------------------------------------
@@dot   .BYTE   'a', $50+Z80_A,         OP      ; LD.D.A        |    57
        .BYTE   'b', $50+Z80_B,         OP      ; LD.D.B        |    50
        .BYTE   'c', $50+Z80_C,         OP      ; LD.D.C        |    51
        .BYTE   'd', $50+Z80_D,         OP      ; LD.D.D        |    52
        .BYTE   'e', $50+Z80_E,         OP      ; LD.B.E        |    53
        .BYTE   'h', $50+Z80_H,         OP      ; LD.B.H        |    54
        .BYTE   'l', $50+Z80_L,         OP      ; LD.B.L        |    55
        .BYTE   'i'|AND
        .DATA   'x', (@ldd_ix-CADDR)-1
        .BYTE   'y'|AND
        .BYTE   'h', $50+Z80_IH,        OP_IY   ; LD.D.IYH      | FD 54
        .BYTE   'l', $50+Z80_IL,        OP_IY   ; LD.D.IYL      | FD 55
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@ldd_ix .BYTE   'h', $50+Z80_IH,        OP_IX   ; LD.D.IXH      | DD 54
        .BYTE   'l', $50+Z80_IL,        OP_IX   ; LD.D.IXL      | DD 55
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@ldde   .DATA   ''', (@@pos-CADDR)-1            ; LD.DE'?
@@pos   .BYTE   END, $11,               OP_W    ; LD.DE $nnnn   |    11 nn nn
        .BYTE   '*', $5b,               OP_EDW  ; LD.DE* $nnnn  | ED 5B nn nn
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@ldd_m  .DATA   'h', (@ldd_hl-CADDR)-1
        .BYTE   'i'|AND
        .BYTE   'x', $56,               OP_IXO  ; LD.D*IX $nn   | DD 56 nn
        .BYTE   'y', $56,               OP_IYO  ; LD.D*IY $nn   | FD 56 nn
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@ldd_hl .BYTE   'l', $56,               OP      ; LD.D*HL       |    56
        .BYTE   ERR
        ;=======================================================================
@ld_e   .DATA   '.', (@@dot-CADDR)-1            ; LD.E._
        .DATA   ''', (@@pos-CADDR)-1            ; LD.E'_
@@pos   .BYTE   END, $1e,               OP_B    ; LD.E $nn      |    1E nn
        .DATA   '*', (@lde_m-CADDR)-1
        ;-----------------------------------------------------------------------
@@dot   .BYTE   'a', $58+Z80_A,         OP      ; LD.E.A        |    5F
        .BYTE   'b', $58+Z80_B,         OP      ; LD.E.B        |    58
        .BYTE   'c', $58+Z80_C,         OP      ; LD.E.C        |    59
        .BYTE   'd', $58+Z80_D,         OP      ; LD.E.D        |    5A
        .BYTE   'e', $58+Z80_E,         OP      ; LD.E.E        |    5B
        .BYTE   'h', $58+Z80_H,         OP      ; LD.E.H        |    5C
        .BYTE   'l', $58+Z80_L,         OP      ; LD.E.L        |    5D
        .BYTE   'i'|AND
        .DATA   'x', (@lde_ix-CADDR)-1
        .BYTE   'y'|AND
        .BYTE   'h', $58+Z80_IH,        OP_IY   ; LD.E.IYH      | FD 5C
        .BYTE   'l', $58+Z80_IL,        OP_IY   ; LD.E.IYL      | FD 5D
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@lde_ix .BYTE   'h', $58+Z80_IH,        OP_IX   ; LD.E.IXH      | DD 5C
        .BYTE   'l', $58+Z80_IL,        OP_IX   ; LD.E.IXL      | DD 5D
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@lde_m  .DATA   'h', (@lde_hl-CADDR)-1
        .BYTE   'i'|AND
        .BYTE   'x', $5e,               OP_IXO  ; LD.E*IX $nn   | DD 5E nn
        .BYTE   'y', $5e,               OP_IYO  ; LD.E*IY $nn   | FD 5E nn
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@lde_hl .BYTE   'l', $5e,               OP      ; LD.E*HL       |    5E
        .BYTE   ERR
        ;=======================================================================
@ld_h   .DATA   'l', (@ldhl-CADDR)-1            ; LD.HL?
        .DATA   '.', (@@dot-CADDR)-1            ; LD.H._
        .DATA   ''', (@@pos-CADDR)-1            ; LD.H'_
@@pos   .BYTE   END, $26,               OP_B    ; LD.H $nn      |    26 nn
        .DATA   '*', (@ldh_m-CADDR)-1
        ;-----------------------------------------------------------------------
@@dot   .BYTE   'a', $60+Z80_A,         OP      ; LD.H.A        |    67
        .BYTE   'b', $60+Z80_B,         OP      ; LD.H.B        |    60
        .BYTE   'c', $60+Z80_C,         OP      ; LD.H.C        |    61
        .BYTE   'd', $60+Z80_D,         OP      ; LD.H.D        |    62
        .BYTE   'e', $60+Z80_E,         OP      ; LD.H.E        |    63
        .BYTE   'h', $60+Z80_H,         OP      ; LD.H.H        |    64
        .BYTE   'l', $60+Z80_L,         OP      ; LD.H.L        |    65
        .BYTE   'i'|AND
        .DATA   'x', (@ldh_ix-CADDR)-1
        .BYTE   'y'|AND
        .BYTE   'h', $60+Z80_IH,        OP_IY   ; LD.H.IYH      | FD 64
        .BYTE   'l', $60+Z80_IL,        OP_IY   ; LD.H.IYL      | FD 65
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@ldh_ix .BYTE   'h', $60+Z80_IH,        OP_IX   ; LD.H.IXH      | DD 64
        .BYTE   'l', $60+Z80_IL,        OP_IX   ; LD.H.IXL      | DD 65
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@ldhl   .DATA   ''', (@@pos-CADDR)-1            ; LD.HL'?
@@pos   .BYTE   END, $21,               OP_W    ; LD.HL $nnnn   |    21 nn nn
        .BYTE   '*', $2a,               OP_EDW  ; LD.HL* $nnnn  | ED 2A nn nn
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@ldh_m  .DATA   'h', (@ldh_hl-CADDR)-1
        .BYTE   'i'|AND
        .BYTE   'x', $66,               OP_IXO  ; LD.H*IX $nn   | DD 66 nn
        .BYTE   'y', $66,               OP_IYO  ; LD.H*IY $nn   | FD 66 nn
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@ldh_hl .BYTE   'l', $66,               OP      ; LD.H*HL       |    66
        .BYTE   ERR
        ;=======================================================================
@ld_l   .DATA   '.', (@@dot-CADDR)-1            ; LD.L._
        .DATA   ''', (@@pos-CADDR)-1            ; LD.L'_
@@pos   .BYTE   END, $2e,               OP_B    ; LD.L $nn      |    2E nn
        .DATA   '*', (@ldl_m-CADDR)-1
        ;-----------------------------------------------------------------------
@@dot   .BYTE   'a', $68+Z80_A,         OP      ; LD.L.A        |    6F
        .BYTE   'b', $68+Z80_B,         OP      ; LD.L.B        |    68
        .BYTE   'c', $68+Z80_C,         OP      ; LD.L.C        |    69
        .BYTE   'd', $68+Z80_D,         OP      ; LD.L.D        |    6A
        .BYTE   'e', $68+Z80_E,         OP      ; LD.L.E        |    6B
        .BYTE   'h', $68+Z80_H,         OP      ; LD.L.H        |    6C
        .BYTE   'l', $68+Z80_L,         OP      ; LD.L.L        |    6D
        .BYTE   'i'|AND
        .DATA   'x', (@ldl_ix-CADDR)-1
        .BYTE   'y'|AND
        .BYTE   'h', $68+Z80_IH,        OP_IY   ; LD.L.IYH      | FD 6C
        .BYTE   'l', $68+Z80_IL,        OP_IY   ; LD.L.IYL      | FD 6D
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@ldl_ix .BYTE   'h', $68+Z80_IH,        OP_IX   ; LD.L.IXH      | DD 6C
        .BYTE   'l', $68+Z80_IL,        OP_IX   ; LD.L.IXL      | DD 6D
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@ldl_m  .DATA   'h', (@ldl_hl-CADDR)-1
        .BYTE   'i'|AND
        .BYTE   'x', $6e,               OP_IXO  ; LD.L*IX $nn   | DD 6E nn
        .BYTE   'y', $6e,               OP_IYO  ; LD.L*IY $nn   | FD 6E nn
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@ldl_hl .BYTE   'l', $6e,               OP      ; LD.L*HL       |    6E
        .BYTE   ERR
        ;=======================================================================
@ld_i   .DATA   'x', (@ldix-CADDR)-1
        .DATA   'y', (@ldiy-CADDR)-1
        .BYTE   '.'|AND
        .BYTE   'a', $47,               OP_ED   ; LD.I.A        | ED 47
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@ldix   .BYTE   END, $21,               OP_IXW  ; LD.IX $nnnn   | DD 21 nn nn
        .BYTE   '*', $2a,               OP_IXW  ; LD.IX* $nnnn  | DD 2A nn nn
        .DATA   'h', (@ldixh-CADDR)-1
        .BYTE   'l'|AND
        .BYTE   END, $2e,               OP_IXB  ; LD.IXL $nn    | DD 2E nn
        .BYTE   '.'|AND
        .BYTE   'a', $68+Z80_A,         OP_IX   ; LD.IXL.A      | DD 6F
        .BYTE   'b', $68+Z80_B,         OP_IX   ; LD.IXL.B      | DD 68
        .BYTE   'c', $68+Z80_C,         OP_IX   ; LD.IXL.C      | DD 69
        .BYTE   'd', $68+Z80_D,         OP_IX   ; LD.IXL.D      | DD 6A
        .BYTE   'e', $68+Z80_E,         OP_IX   ; LD.IXL.E      | DD 6B
        .BYTE   'i'|AND
        .BYTE   'x'|AND
        .BYTE   'h', $68+Z80_H,         OP_IX   ; LD.IXL.IXH    | DD 6C
        .BYTE   'l', $68+Z80_L,         OP_IX   ; LD.IXL.IXL    | DD 6D
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@ldixh  .BYTE   END, $26,               OP_IXB  ; LD.IXH $nn    | DD 26 nn
        .BYTE   '.'|AND
        .BYTE   'a', $60+Z80_A,         OP_IX   ; LD.IXH.A      | DD 67
        .BYTE   'b', $60+Z80_B,         OP_IX   ; LD.IXH.B      | DD 60
        .BYTE   'c', $60+Z80_C,         OP_IX   ; LD.IXH.C      | DD 61
        .BYTE   'd', $60+Z80_D,         OP_IX   ; LD.IXH.D      | DD 62
        .BYTE   'e', $60+Z80_E,         OP_IX   ; LD.IXH.E      | DD 63
        .BYTE   'i'|AND
        .BYTE   'x'|AND
        .BYTE   'h', $60+Z80_H,         OP_IX   ; LD.IXH.IXH    | DD 64
        .BYTE   'l', $60+Z80_L,         OP_IX   ; LD.IXH.IXL    | DD 65
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@ldiy   .BYTE   END, $21,               OP_IYW  ; LD.IY $nnnn   | FD 21 nn nn
        .BYTE   '*', $2a,               OP_IYW  ; LD.IY* $nnnn  | FD 2A nn nn
        .DATA   'h', (@ldiyh-CADDR)-1
        .BYTE   'l'|AND
        .BYTE   END, $2e,               OP_IYB  ; LD.IYL $nn    | FD 2e nn
        .BYTE   '.'|AND
        .BYTE   'a', $68+Z80_A,         OP_IY   ; LD.IYL.A      | FD 6F
        .BYTE   'b', $68+Z80_B,         OP_IY   ; LD.IYL.B      | FD 68
        .BYTE   'c', $68+Z80_C,         OP_IY   ; LD.IYL.C      | FD 69
        .BYTE   'd', $68+Z80_D,         OP_IY   ; LD.IYL.D      | FD 6A
        .BYTE   'e', $68+Z80_E,         OP_IY   ; LD.IYL.E      | FD 6B
        .BYTE   'i'|AND
        .BYTE   'y'|AND
        .BYTE   'h', $68+Z80_H,         OP_IY   ; LD.IYL.IYH    | FD 6C
        .BYTE   'l', $68+Z80_L,         OP_IY   ; LD.IYL.IYL    | FD 6D
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@ldiyh  .BYTE   END, $26,               OP_IYB  ; LD.IYH $nn    | FD 26 nn
        .BYTE   '.'|AND
        .BYTE   'a', $60+Z80_A,         OP_IY   ; LD.IYH.A      | FD 67
        .BYTE   'b', $60+Z80_B,         OP_IY   ; LD.IYH.B      | FD 60
        .BYTE   'c', $60+Z80_C,         OP_IY   ; LD.IYH.C      | FD 61
        .BYTE   'd', $60+Z80_D,         OP_IY   ; LD.IYH.D      | FD 62
        .BYTE   'e', $60+Z80_E,         OP_IY   ; LD.IYH.E      | FD 63
        .BYTE   'i'|AND
        .BYTE   'y'|AND
        .BYTE   'h', $60+Z80_H,         OP_IY   ; LD.IYH.IYH    | FD 64
        .BYTE   'l', $60+Z80_L,         OP_IY   ; LD.IYH.IYL    | FD 65
        .BYTE   ERR
        ;=======================================================================
@n      .DATA   'e', (@ne-CADDR)-1
        .BYTE   'o'|AND
        .BYTE   'p', $00                OP      ; NOP           |    00
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@ne     .BYTE   'g', $44                OP_ED   ; NEG           | ED 44
        .BYTE   ERR
        ;=======================================================================
@o      .DATA   't', (@ot-CADDR)-1
        .DATA   'u', (@out-CADDR)-1
        .BYTE   'r'|AND
        .BYTE   END, $f6                OP_B    ; OR $nn        |    F6 nn
        .DATA   '.', (@or_r-CADDR)-1
        .BYTE   '*'|AND
        .DATA   'h', (@or_hl-CADDR)-1
        .BYTE   'i'|AND
        .BYTE   'x', $b6,               OP_IXO  ; OR*IX $nn     | DD B6 nn
        .BYTE   'y', $b6,               OP_IYO  ; OR*IY $nn     | FD B6 nn
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@or_hl  .BYTE   'l', $b6                OP      ; OR*HL         |    B6
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@or_r   .BYTE   'a', $b0+Z80_A,         OP      ; OR.A          |    B7
        .BYTE   'b', $b0+Z80_B,         OP      ; OR.B          |    B0
        .BYTE   'c', $b0+Z80_C,         OP      ; OR.C          |    B1
        .BYTE   'd', $b0+Z80_D,         OP      ; OR.D          |    B2
        .BYTE   'e', $b0+Z80_E,         OP      ; OR.E          |    B3
        .BYTE   'h', $b0+Z80_H,         OP      ; OR.H          |    B4
        .BYTE   'l', $b0+Z80_L,         OP      ; OR.L          |    B5
        .BYTE   'i'|AND
        .DATA   'x', (@or_rx-CADDR)-1
        .BYTE   'y'|AND
        .BYTE   'h', $b0+Z80_IH,        OP_IY   ; OR.IYH        | FD B4
        .BYTE   'l', $b0+Z80_IL,        OP_IY   ; OR.IYL        | FD B5
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@or_rx  .BYTE   'h', $b0+Z80_IH,        OP_IX   ; OR.IXH        | DD B4
        .BYTE   'l', $b0+Z80_IL,        OP_IX   ; OR.IXL        | DD B5
        .BYTE   ERR
        ;=======================================================================
@ot     .DATA   'd', (@otd-CADDR)-1
        .BYTE   'i'|AND
        .BYTE   'r', $b3,               OP_ED   ; OTIR          | ED B3
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@otd    .BYTE   'r', $bb,               OP_ED   ; OTDR          | ED BB
        .BYTE   ERR
        ;=======================================================================
@out    .BYTE   't'|AND
        .BYTE   'd', $ab,               OP_ED   ; OUTD          | ED AB
        .BYTE   'i', $a3,               OP_ED   ; OUTI          | ED A3
        .BYTE   '*'|AND
        .DATA   '$', (@out_nn-CADDR)-1
        .BYTE   'c'|AND
        .DATA   ''', (@@pos-CADDR)-1
        .BYTE   '.'|AND
@@pos   .BYTE   'a', $79,               OP_ED   ; OUT*C.A       | ED 79
        .BYTE   'b', $41,               OP_ED   ; OUT*C.B       | ED 41
        .BYTE   'c', $49,               OP_ED   ; OUT*C.C       | ED 49
        .BYTE   'd', $51,               OP_ED   ; OUT*C.D       | ED 51
        .BYTE   'e', $59,               OP_ED   ; OUT*C.E       | ED 59
        .BYTE   'h', $61,               OP_ED   ; OUT*C.H       | ED 61
        .BYTE   'l', $69,               OP_ED   ; OUT*C.L       | ED 69
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@out_nn .BYTE   '.'|AND
        .BYTE   'a', $d3,               OP_B    ; OUT*.A $nn    |    D3 nn
        .BYTE   ERR
        ;=======================================================================
@p      .DATA   'o', (@pop-CADDR)-1
        .BYTE   'u'|AND
        .BYTE   's'|AND
        .BYTE   'h'|AND
        .BYTE   '.'|AND
        .DATA   'a', (@pushaf-CADDR)-1
        .DATA   'b', (@pushbc-CADDR)-1
        .DATA   'd', (@pushde-CADDR)-1
        .DATA   'h', (@pushhl-CADDR)-1
        .BYTE   'i'|AND
        .BYTE   'x', $e5,               OP_IX   ; PUSH.IX       | DD E5
        .BYTE   'y', $e5,               OP_IY   ; PUSH.IY       | FD E5
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@pushaf .BYTE   'f', $f5,               OP      ; PUSH.AF       |    F5
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@pushbc .BYTE   'c', $c5,               OP      ; PUSH.BC       |    C5
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@pushde .BYTE   'e', $d5,               OP      ; PUSH.DE       |    D5
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@pushhl .BYTE   'l', $e5,               OP      ; PUSH.HL       |    E5
        .BYTE   ERR
        ;=======================================================================
@pop    .BYTE   'p'|AND
        .BYTE   '.'|AND
        .DATA   'a', (@popaf-CADDR)-1
        .DATA   'b', (@popbc-CADDR)-1
        .DATA   'd', (@popde-CADDR)-1
        .DATA   'h', (@pophl-CADDR)-1
        .BYTE   'i'|AND
        .BYTE   'x', $e1,               OP_IX   ; POP.IX        | DD E1
        .BYTE   'y', $e1,               OP_IY   ; POP.IY        | FD E1
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@popaf  .BYTE   'f', $f1,               OP      ; POP.AF        |    F1
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@popbc  .BYTE   'c', $c1,               OP      ; POP.BC        |    C1
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@popde  .BYTE   'e', $d1,               OP      ; POP.DE        |    D1
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@pophl  .BYTE   'l', $e1,               OP      ; POP.HL        |    E1
        .BYTE   ERR
        ;=======================================================================
@r      .DATA   'e', (@re-CADDR)-1
        .DATA   'l', (@rl-CADDR)-1
        .DATA   'r', (@rr-CADDR)-1
        .BYTE   's'|AND
        .BYTE   't'|AND
        .BYTE   '.'|AND
        .BYTE   '0', $c7,               OP      ; RST0          |    C7
        .DATA   '1', (@rst1-CADDR)-1
        .DATA   '2', (@rst2-CADDR)-1
        .DATA   '3', (@rst3-CADDR)-1
        .BYTE   '8', $cf,               OP      ; RST8          |    CF
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@rst1   .BYTE   '0', $d7,               OP      ; RST10         |    D7
        .BYTE   '8', $df,               OP      ; RST18         |    DF
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@rst2   .BYTE   '0', $e7,               OP      ; RST20         |    E7
        .BYTE   '8', $ef,               OP      ; RST28         |    EF
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@rst3   .BYTE   '0', $f7,               OP      ; RST30         |    F7
        .BYTE   '8', $ff,               OP      ; RST38         |    FF
        .BYTE   ERR
        ;=======================================================================
@re     .DATA   's', (@res-CADDR)-1
        .BYTE   't'|AND
        .BYTE   END, $c9,               OP      ; RET           |    C9
        .BYTE   'i', $4d,               OP_ED   ; RETI          | ED 4D
        .BYTE   'n', $45,               OP_ED   ; RETN          | ED 45
        .BYTE   '?'|AND
        .BYTE   'c', $d8,               OP      ; RET?c         |    D8
        .BYTE   'm', $f8,               OP      ; RET?m         |    F8
        .BYTE   'z', $c8,               OP      ; RET?z         |    C8
        .DATA   'p', (@ret_p-CADDR)-1
        .BYTE   'n'|AND
        .BYTE   'z', $c0,               OP      ; RET?nz        |    C0
        .BYTE   'c', $d0,               OP      ; RET?nc        |    D0
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@ret_p  .BYTE   END, $f0,               OP      ; RET?p         |    F0
        .BYTE   'o', $e0,               OP      ; RET?po        |    E0
        .BYTE   'e', $e8,               OP      ; RET?pe        |    E8
        .BYTE   ERR
        ;=======================================================================
@res    .DATA   '7', (@res7-CADDR)-1
        .DATA   '6', (@res6-CADDR)-1
        .DATA   '5', (@res5-CADDR)-1
        .DATA   '4', (@res4-CADDR)-1
        .DATA   '3', (@res3-CADDR)-1
        .DATA   '2', (@res2-CADDR)-1
        .DATA   '1', (@res1-CADDR)-1
        ;-----------------------------------------------------------------------
        .BYTE   '0'|AND
        .DATA   '*', (@res0m-CADDR)-1
        .BYTE   '.'|AND
        .BYTE   'a', $80+(8*0)+Z80_A,   OP_CB   ; RES0.A        |    CB 87
        .BYTE   'b', $80+(8*0)+Z80_B,   OP_CB   ; RES0.B        |    CB 80
        .BYTE   'c', $80+(8*0)+Z80_C,   OP_CB   ; RES0.C        |    CB 81
        .BYTE   'd', $80+(8*0)+Z80_D,   OP_CB   ; RES0.D        |    CB 82
        .BYTE   'e', $80+(8*0)+Z80_E,   OP_CB   ; RES0.E        |    CB 83
        .BYTE   'h', $80+(8*0)+Z80_H,   OP_CB   ; RES0.H        |    CB 84
        .BYTE   'l', $80+(8*0)+Z80_L,   OP_CB   ; RES0.L        |    CB 85
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@res0m  .DATA   'h', (@res0hl-CADDR)-1
        .BYTE   'i'|AND
        .BYTE   'x', $86+(8*0),         OP_CBXO ; RES0*IX $nn   | DD CB nn 86
        .BYTE   'y', $86+(8*0),         OP_CBYO ; RES0*IY $nn   | FD CB nn 86
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@res0hl .BYTE   'l', $86+(8*0),         OP_CB   ; RES0*HL       |    CB 86
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@res1   .DATA   '*', (@res1m-CADDR)-1
        .BYTE   '.'|AND
        .BYTE   'a', $80+(8*1)+Z80_A,   OP_CB   ; RES1.A        |    CB 8F
        .BYTE   'b', $80+(8*1)+Z80_B,   OP_CB   ; RES1.B        |    CB 88
        .BYTE   'c', $80+(8*1)+Z80_C,   OP_CB   ; RES1.C        |    CB 89
        .BYTE   'd', $80+(8*1)+Z80_D,   OP_CB   ; RES1.D        |    CB 8A
        .BYTE   'e', $80+(8*1)+Z80_E,   OP_CB   ; RES1.E        |    CB 8B
        .BYTE   'h', $80+(8*1)+Z80_H,   OP_CB   ; RES1.H        |    CB 8C
        .BYTE   'l', $80+(8*1)+Z80_L,   OP_CB   ; RES1.L        |    CB 8D
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@res1m  .DATA   'h', (@res1hl-CADDR)-1
        .BYTE   'i'|AND
        .BYTE   'x', $86+(8*1),         OP_CBXO ; RES1*IX $nn   | DD CB nn 8E
        .BYTE   'y', $86+(8*1),         OP_CBYO ; RES1*IY $nn   | FD CB nn 8E
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@res1hl .BYTE   'l', $86+(8*1),         OP_CB   ; RES1*HL       |    CB 8E
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@res2   .DATA   '*', (@res2m-CADDR)-1
        .BYTE   '.'|AND
        .BYTE   'a', $80+(8*2)+Z80_A,   OP_CB   ; RES2.A        |    CB 97
        .BYTE   'b', $80+(8*2)+Z80_B,   OP_CB   ; RES2.B        |    CB 90
        .BYTE   'c', $80+(8*2)+Z80_C,   OP_CB   ; RES2.C        |    CB 91
        .BYTE   'd', $80+(8*2)+Z80_D,   OP_CB   ; RES2.D        |    CB 92
        .BYTE   'e', $80+(8*2)+Z80_E,   OP_CB   ; RES2.E        |    CB 93
        .BYTE   'h', $80+(8*2)+Z80_H,   OP_CB   ; RES2.H        |    CB 94
        .BYTE   'l', $80+(8*2)+Z80_L,   OP_CB   ; RES2.L        |    CB 95
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@res2m  .DATA   'h', (@res2hl-CADDR)-1
        .BYTE   'i'|AND
        .BYTE   'x', $86+(8*2),         OP_CBXO ; RES2*IX $nn   | DD CB nn 96
        .BYTE   'y', $86+(8*2),         OP_CBYO ; RES2*IY $nn   | FD CB nn 96
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@res2hl .BYTE   'l', $86+(8*2),         OP_CB   ; RES2*HL       |    CB 96
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@res3   .DATA   '*', (@res3m-CADDR)-1
        .BYTE   '.'|AND
        .BYTE   'a', $80+(8*3)+Z80_A,   OP_CB   ; RES3.A        |    CB 9F
        .BYTE   'b', $80+(8*3)+Z80_B,   OP_CB   ; RES3.B        |    CB 98
        .BYTE   'c', $80+(8*3)+Z80_C,   OP_CB   ; RES3.C        |    CB 99
        .BYTE   'd', $80+(8*3)+Z80_D,   OP_CB   ; RES3.D        |    CB 9A
        .BYTE   'e', $80+(8*3)+Z80_E,   OP_CB   ; RES3.E        |    CB 9B
        .BYTE   'h', $80+(8*3)+Z80_H,   OP_CB   ; RES3.H        |    CB 9C
        .BYTE   'l', $80+(8*3)+Z80_L,   OP_CB   ; RES3.L        |    CB 9D
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@res3m  .DATA   'h', (@res3hl-CADDR)-1
        .BYTE   'i'|AND
        .BYTE   'x', $86+(8*3),         OP_CBXO ; RES3*IX $nn   | DD CB nn 9E
        .BYTE   'y', $86+(8*3),         OP_CBYO ; RES3*IY $nn   | FD CB nn 9E
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@res3hl .BYTE   'l', $86+(8*3),         OP_CB   ; RES3*HL       |    CB 9E
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@res4   .DATA   '*', (@res4m-CADDR)-1
        .BYTE   '.'|AND
        .BYTE   'a', $80+(8*4)+Z80_A,   OP_CB   ; RES4.A        |    CB A7
        .BYTE   'b', $80+(8*4)+Z80_B,   OP_CB   ; RES4.B        |    CB A0
        .BYTE   'c', $80+(8*4)+Z80_C,   OP_CB   ; RES4.C        |    CB A1
        .BYTE   'd', $80+(8*4)+Z80_D,   OP_CB   ; RES4.D        |    CB A2
        .BYTE   'e', $80+(8*4)+Z80_E,   OP_CB   ; RES4.E        |    CB A3
        .BYTE   'h', $80+(8*4)+Z80_H,   OP_CB   ; RES4.H        |    CB A4
        .BYTE   'l', $80+(8*4)+Z80_L,   OP_CB   ; RES4.L        |    CB A5
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@res4m  .DATA   'h', (@res4hl-CADDR)-1
        .BYTE   'i'|AND
        .BYTE   'x', $86+(8*4),         OP_CBXO ; RES4*IX $nn   | DD CB nn A6
        .BYTE   'y', $86+(8*4),         OP_CBYO ; RES4*IY $nn   | FD CB nn A6
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@res4hl .BYTE   'l', $86+(8*4),         OP_CB   ; RES4*HL       |    CB A6
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@res5   .DATA   '*', (@res5m-CADDR)-1
        .BYTE   '.'|AND
        .BYTE   'a', $80+(8*5)+Z80_A,   OP_CB   ; RES5.A        |    CB AF
        .BYTE   'b', $80+(8*5)+Z80_B,   OP_CB   ; RES5.B        |    CB A8
        .BYTE   'c', $80+(8*5)+Z80_C,   OP_CB   ; RES5.C        |    CB A9
        .BYTE   'd', $80+(8*5)+Z80_D,   OP_CB   ; RES5.D        |    CB AA
        .BYTE   'e', $80+(8*5)+Z80_E,   OP_CB   ; RES5.E        |    CB AB
        .BYTE   'h', $80+(8*5)+Z80_H,   OP_CB   ; RES5.H        |    CB AC
        .BYTE   'l', $80+(8*5)+Z80_L,   OP_CB   ; RES5.L        |    CB AD
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@res5m  .DATA   'h', (@res5hl-CADDR)-1
        .BYTE   'i'|AND
        .BYTE   'x', $86+(8*5),         OP_CBXO ; RES5*IX $nn   | DD CB nn AE
        .BYTE   'y', $86+(8*5),         OP_CBYO ; RES5*IY $nn   | FD CB nn AE
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@res5hl .BYTE   'l', $86+(8*5),         OP_CB   ; RES5*HL       |    CB AE
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@res6   .DATA   '*', (@res6m-CADDR)-1
        .BYTE   '.'|AND
        .BYTE   'a', $80+(8*6)+Z80_A,   OP_CB   ; RES6.A        |    CB B7
        .BYTE   'b', $80+(8*6)+Z80_B,   OP_CB   ; RES6.B        |    CB B0
        .BYTE   'c', $80+(8*6)+Z80_C,   OP_CB   ; RES6.C        |    CB B1
        .BYTE   'd', $80+(8*6)+Z80_D,   OP_CB   ; RES6.D        |    CB B2
        .BYTE   'e', $80+(8*6)+Z80_E,   OP_CB   ; RES6.E        |    CB B3
        .BYTE   'h', $80+(8*6)+Z80_H,   OP_CB   ; RES6.H        |    CB B4
        .BYTE   'l', $80+(8*6)+Z80_L,   OP_CB   ; RES6.L        |    CB B5
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@res6m  .DATA   'h', (@res6hl-CADDR)-1
        .BYTE   'i'|AND
        .BYTE   'x', $86+(8*6),         OP_CBXO ; RES6*IX $nn   | DD CB nn B6
        .BYTE   'y', $86+(8*6),         OP_CBYO ; RES6*IY $nn   | FD CB nn B6
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@res6hl .BYTE   'l', $86+(8*6),         OP_CB   ; RES6*HL       |    CB B6
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@res7   .DATA   '*', (@res7m-CADDR)-1
        .BYTE   '.'|AND
        .BYTE   'a', $80+(8*7)+Z80_A,   OP_CB   ; RES7.A        |    CB BF
        .BYTE   'b', $80+(8*7)+Z80_B,   OP_CB   ; RES7.B        |    CB B8
        .BYTE   'c', $80+(8*7)+Z80_C,   OP_CB   ; RES7.C        |    CB B9
        .BYTE   'd', $80+(8*7)+Z80_D,   OP_CB   ; RES7.D        |    CB BA
        .BYTE   'e', $80+(8*7)+Z80_E,   OP_CB   ; RES7.E        |    CB BB
        .BYTE   'h', $80+(8*7)+Z80_H,   OP_CB   ; RES7.H        |    CB BC
        .BYTE   'l', $80+(8*7)+Z80_L,   OP_CB   ; RES7.L        |    CB BD
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@res7m  .DATA   'h', (@res7hl-CADDR)-1
        .BYTE   'i'|AND
        .BYTE   'x', $86+(8*7),         OP_CBXO ; RES7*IX $nn   | DD CB nn BE
        .BYTE   'y', $86+(8*7),         OP_CBYO ; RES7*IY $nn   | FD CB nn BE
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@res7hl .BYTE   'l', $86+(8*7),         OP_CB   ; RES7*HL       |    CB BE
        .BYTE   ERR
        ;=======================================================================
@rl     .BYTE   'a', $17,               OP      ; RLA           |    17
        .DATA   '*', (@rl_m-CADDR)-1
        .DATA   '.', (@rl_r-CADDR)-1
        .DATA   'c', (@rlc-CADDR)-1
        .BYTE   'd', $6f,               OP_ED   ; RLD           | ED 6F
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@rl_m   .DATA   'h', (@rl_hl-CADDR)-1
        .BYTE   'i'|AND
        .BYTE   'x', $16,               OP_CBXO ; RL*IX $nn     | DD CB nn 16
        .BYTE   'y', $16,               OP_CBYO ; RL*IY $nn     | FD CB nn 16
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@rl_hl  .BYTE   'l', $16,               OP_CB   ; RL*HL         |    CB 16
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@rl_r   .BYTE   'a', $10+Z80_A,         OP_CB   ; RL.A          |    CB 17
        .BYTE   'b', $10+Z80_B,         OP_CB   ; RL.B          |    CB 10
        .BYTE   'c', $10+Z80_C,         OP_CB   ; RL.C          |    CB 11
        .BYTE   'd', $10+Z80_D,         OP_CB   ; RL.D          |    CB 12
        .BYTE   'e', $10+Z80_E,         OP_CB   ; RL.E          |    CB 13
        .BYTE   'h', $10+Z80_H,         OP_CB   ; RL.H          |    CB 14
        .BYTE   'l', $10+Z80_L,         OP_CB   ; RL.L          |    CB 15
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@rlc    .BYTE   'a', $07,               OP      ; RLCA          |    07
        .DATA   '*', (@rlc_m-CADDR)-1
        .BYTE   '.'|AND
        .BYTE   'a', $00+Z80_A,         OP_CB   ; RLC.A         |    CB 07
        .BYTE   'b', $00+Z80_B,         OP_CB   ; RLC.B         |    CB 00
        .BYTE   'c', $00+Z80_C,         OP_CB   ; RLC.C         |    CB 01
        .BYTE   'd', $00+Z80_D,         OP_CB   ; RLC.D         |    CB 02
        .BYTE   'e', $00+Z80_E,         OP_CB   ; RLC.E         |    CB 03
        .BYTE   'h', $00+Z80_H,         OP_CB   ; RLC.H         |    CB 04
        .BYTE   'l', $00+Z80_L,         OP_CB   ; RLC.L         |    CB 05
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@rlc_m  .DATA   'h', (@rlc_hl-CADDR)-1
        .BYTE   'i'|AND
        .BYTE   'x', $06,               OP_CBXO ; RLC*IX $aa    | DD CB nn 06
        .BYTE   'y', $06,               OP_CBYO ; RLC*IY $aa    | FD CB nn 06
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@rlc_hl .BYTE   'l', $06,               OP_CB   ; RLC*HL        |    CB 06
        .BYTE   ERR
        ;=======================================================================
@rr     .BYTE   'a', $1f,               OP      ; RRA           |    1F
        .DATA   '*', (@rr_m-CADDR)-1
        .DATA   '.', (@rr_r-CADDR)-1
        .DATA   'c', (@rrc-CADDR)-1
        .BYTE   'd', $67,               OP_ED   ; RRD           | ED 67
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@rr_m   .DATA   'h', (@rr_hl-CADDR)-1
        .BYTE   'i'|AND
        .BYTE   'x', $1e,               OP_CBXO ; RR*IX $nn     | DD CB nn 1E
        .BYTE   'y', $1e,               OP_CBYO ; RR*IY $nn     | FD CB nn 1E
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@rr_hl  .BYTE   'l', $1e,               OP_CB   ; RR*HL         |    CB 1E
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@rr_r   .BYTE   'a', $18+Z80_A,         OP_CB   ; RR.A          |    CB 1F
        .BYTE   'b', $18+Z80_B,         OP_CB   ; RR.B          |    CB 18
        .BYTE   'c', $18+Z80_C,         OP_CB   ; RR.C          |    CB 19
        .BYTE   'd', $18+Z80_D,         OP_CB   ; RR.D          |    CB 1A
        .BYTE   'e', $18+Z80_E,         OP_CB   ; RR.E          |    CB 1B
        .BYTE   'h', $18+Z80_H,         OP_CB   ; RR.H          |    CB 1C
        .BYTE   'l', $18+Z80_L,         OP_CB   ; RR.L          |    CB 1D
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@rrc    .BYTE   'a', $0f,               OP      ; RRCA          |    0F
        .DATA   '*', (@rrc_m-CADDR)-1
        .BYTE   '.'|AND
        .BYTE   'a', $08+Z80_A,         OP_CB   ; RRC.A         |    CB 0F
        .BYTE   'b', $08+Z80_B,         OP_CB   ; RRC.B         |    CB 08
        .BYTE   'c', $08+Z80_C,         OP_CB   ; RRC.C         |    CB 09
        .BYTE   'd', $08+Z80_D,         OP_CB   ; RRC.D         |    CB 0A
        .BYTE   'e', $08+Z80_E,         OP_CB   ; RRC.E         |    CB 0B
        .BYTE   'h', $08+Z80_H,         OP_CB   ; RRC.H         |    CB 0C
        .BYTE   'l', $08+Z80_L,         OP_CB   ; RRC.L         |    CB 0D
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@rrc_m  .DATA   'h', (@rrc_hl-CADDR)-1
        .BYTE   'i'|AND
        .BYTE   'x', $0e,               OP_CBXO ; RRC*IX $aa    | DD CB nn 0e
        .BYTE   'y', $0e,               OP_CBYO ; RRC*IY $aa    | FD CB nn 0e
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@rrc_hl .BYTE   'l', $0e,               OP_CB   ; RRC*HL        |    CB 0e
        .BYTE   ERR
        ;=======================================================================
@s      .DATA   'b', (@sbc-CADDR)-1
        .DATA   'e', (@set-CADDR)-1
        .DATA   'l', (@sla-CADDR)-1
        .DATA   'r', (@sr-CADDR)-1
        .DATA   'u', (@sub-CADDR)-1
        .BYTE   'c'|AND
        .BYTE   'f', $37,               OP      ; SCF           |    37
        .BYTE   ERR
        ;=======================================================================
@sbc    .BYTE   'c'|AND
        .BYTE   END, $de,               OP_B    ; SBC $nn       |    DE nn
        .DATA   '*', (@sbc_m-CADDR)-1
        .BYTE   '.'|AND
        .BYTE   'a', $98+Z80_A,         OP      ; SBC.A         |    9F
        .BYTE   'b', $98+Z80_B,         OP      ; SBC.B         |    98
        .BYTE   'c', $98+Z80_C,         OP      ; SBC.C         |    99
        .BYTE   'd', $98+Z80_D,         OP      ; SBC.D         |    9A
        .BYTE   'e', $98+Z80_E,         OP      ; SBC.E         |    9B
        .DATA   'h', (@sbc_h-CADDR)-1
        .BYTE   'l', $98+Z80_L,         OP      ; SBC.L         |    9D
        .BYTE   'i'|AND
        .DATA   'x', (@sbc_rx-CADDR)-1
        .BYTE   'y'|AND
        .BYTE   'h', $98+Z80_IH,        OP_IY   ; SBC.IYH       | FD 9C
        .BYTE   'l', $98+Z80_IL,        OP_IY   ; SBC.IYL       | FD 9D
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@sbc_rx .BYTE   'h', $98+Z80_IH,        OP_IX   ; SBC.IXH       | DD 9C
        .BYTE   'l', $98+Z80_IL,        OP_IX   ; SBC.IXL       | DD 9D
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@sbc_h  .BYTE   END, $98+Z80_H,         OP      ; SBC.H         |    9C
        .BYTE   ''', $98+Z80_H,         OP      ; SBC.H'        |    9C
        .BYTE   'l'|AND
        .DATA   '.', (@@dot-CADDR)-1            ; SBC.HL.__
        .BYTE   '''|AND                         ; SBC.HL'__
@@dot   .DATA   'b', (@sbc_bc-CADDR)-1
        .DATA   'd', (@sbc_de-CADDR)-1
        .DATA   'h', (@sbc_hl-CADDR)-1
        .BYTE   's'|AND
        .BYTE   'p', $72,               OP_ED   ; SBC.HL.SP     | ED 72
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@sbc_bc .BYTE   'c', $42,               OP_ED   ; SBC.HL.BC     | ED 42
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@sbc_de .BYTE   'e', $52,               OP_ED   ; SBC.HL.DE     | ED 52
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@sbc_hl .BYTE   'l', $62,               OP_ED   ; SBC.HL.HL     | ED 62
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@sbc_m  .DATA   'h', (@sbc_mh-CADDR)-1
        .BYTE   'i'|AND
        .BYTE   'x', $9e,               OP_IXO  ; SBC*IX $nn    | DD 9E nn
        .BYTE   'y', $9e,               OP_IYO  ; SBC*IY $nn    | FD 9E nn
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@sbc_mh .BYTE   'l', $9e,               OP      ; SBC*HL        |    9E
        .BYTE   ERR
        ;=======================================================================
@set    .BYTE   't'|AND
        .DATA   '7', (@set7-CADDR)-1
        .DATA   '6', (@set6-CADDR)-1
        .DATA   '5', (@set5-CADDR)-1
        .DATA   '4', (@set4-CADDR)-1
        .DATA   '3', (@set3-CADDR)-1
        .DATA   '2', (@set2-CADDR)-1
        .DATA   '1', (@set1-CADDR)-1
        ;-----------------------------------------------------------------------
        .BYTE   '0'|AND
        .DATA   '*', (@set0m-CADDR)-1
        .BYTE   '.'|AND
        .BYTE   'a', $80+(8*0)+Z80_A,   OP_CB   ; SET0.A        |    CB 87
        .BYTE   'b', $80+(8*0)+Z80_B,   OP_CB   ; SET0.B        |    CB 80
        .BYTE   'c', $80+(8*0)+Z80_C,   OP_CB   ; SET0.C        |    CB 81
        .BYTE   'd', $80+(8*0)+Z80_D,   OP_CB   ; SET0.D        |    CB 82
        .BYTE   'e', $80+(8*0)+Z80_E,   OP_CB   ; SET0.E        |    CB 83
        .BYTE   'h', $80+(8*0)+Z80_H,   OP_CB   ; SET0.H        |    CB 84
        .BYTE   'l', $80+(8*0)+Z80_L,   OP_CB   ; SET0.L        |    CB 85
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@set0m  .DATA   'h', (@set0hl-CADDR)-1
        .BYTE   'i'|AND
        .BYTE   'x', $86+(8*0),         OP_CBXO ; SET0*IX $nn   | DD CB nn 86
        .BYTE   'y', $86+(8*0),         OP_CBYO ; SET0*IY $nn   | FD CB nn 86
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@set0hl .BYTE   'l', $86+(8*0),         OP_CB   ; SET0*HL       |    CB 86
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@set1   .DATA   '*', (@set1m-CADDR)-1
        .BYTE   '.'|AND
        .BYTE   'a', $80+(8*1)+Z80_A,   OP_CB   ; SET1.A        |    CB 8F
        .BYTE   'b', $80+(8*1)+Z80_B,   OP_CB   ; SET1.B        |    CB 88
        .BYTE   'c', $80+(8*1)+Z80_C,   OP_CB   ; SET1.C        |    CB 89
        .BYTE   'd', $80+(8*1)+Z80_D,   OP_CB   ; SET1.D        |    CB 8A
        .BYTE   'e', $80+(8*1)+Z80_E,   OP_CB   ; SET1.E        |    CB 8B
        .BYTE   'h', $80+(8*1)+Z80_H,   OP_CB   ; SET1.H        |    CB 8C
        .BYTE   'l', $80+(8*1)+Z80_L,   OP_CB   ; SET1.L        |    CB 8D
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@set1m  .DATA   'h', (@set1hl-CADDR)-1
        .BYTE   'i'|AND
        .BYTE   'x', $86+(8*1),         OP_CBXO ; SET1*IX $nn   | DD CB nn 8E
        .BYTE   'y', $86+(8*1),         OP_CBYO ; SET1*IY $nn   | FD CB nn 8E
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@set1hl .BYTE   'l', $86+(8*1),         OP_CB   ; SET1*HL       |    CB 8E
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@set2   .DATA   '*', (@set2m-CADDR)-1
        .BYTE   '.'|AND
        .BYTE   'a', $80+(8*2)+Z80_A,   OP_CB   ; SET2.A        |    CB 97
        .BYTE   'b', $80+(8*2)+Z80_B,   OP_CB   ; SET2.B        |    CB 90
        .BYTE   'c', $80+(8*2)+Z80_C,   OP_CB   ; SET2.C        |    CB 91
        .BYTE   'd', $80+(8*2)+Z80_D,   OP_CB   ; SET2.D        |    CB 92
        .BYTE   'e', $80+(8*2)+Z80_E,   OP_CB   ; SET2.E        |    CB 93
        .BYTE   'h', $80+(8*2)+Z80_H,   OP_CB   ; SET2.H        |    CB 94
        .BYTE   'l', $80+(8*2)+Z80_L,   OP_CB   ; SET2.L        |    CB 95
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@set2m  .DATA   'h', (@set2hl-CADDR)-1
        .BYTE   'i'|AND
        .BYTE   'x', $86+(8*2),         OP_CBXO ; SET2*IX $nn   | DD CB nn 96
        .BYTE   'y', $86+(8*2),         OP_CBYO ; SET2*IY $nn   | FD CB nn 96
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@set2hl .BYTE   'l', $86+(8*2),         OP_CB   ; SET2*HL       |    CB 96
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@set3   .DATA   '*', (@set3m-CADDR)-1
        .BYTE   '.'|AND
        .BYTE   'a', $80+(8*3)+Z80_A,   OP_CB   ; SET3.A        |    CB 9F
        .BYTE   'b', $80+(8*3)+Z80_B,   OP_CB   ; SET3.B        |    CB 98
        .BYTE   'c', $80+(8*3)+Z80_C,   OP_CB   ; SET3.C        |    CB 99
        .BYTE   'd', $80+(8*3)+Z80_D,   OP_CB   ; SET3.D        |    CB 9A
        .BYTE   'e', $80+(8*3)+Z80_E,   OP_CB   ; SET3.E        |    CB 9B
        .BYTE   'h', $80+(8*3)+Z80_H,   OP_CB   ; SET3.H        |    CB 9C
        .BYTE   'l', $80+(8*3)+Z80_L,   OP_CB   ; SET3.L        |    CB 9D
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@set3m  .DATA   'h', (@set3hl-CADDR)-1
        .BYTE   'i'|AND
        .BYTE   'x', $86+(8*3),         OP_CBXO ; SET3*IX $nn   | DD CB nn 9E
        .BYTE   'y', $86+(8*3),         OP_CBYO ; SET3*IY $nn   | FD CB nn 9E
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@set3hl .BYTE   'l', $86+(8*3),         OP_CB   ; SET3*HL       |    CB 9E
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@set4   .DATA   '*', (@set4m-CADDR)-1
        .BYTE   '.'|AND
        .BYTE   'a', $80+(8*4)+Z80_A,   OP_CB   ; SET4.A        |    CB A7
        .BYTE   'b', $80+(8*4)+Z80_B,   OP_CB   ; SET4.B        |    CB A0
        .BYTE   'c', $80+(8*4)+Z80_C,   OP_CB   ; SET4.C        |    CB A1
        .BYTE   'd', $80+(8*4)+Z80_D,   OP_CB   ; SET4.D        |    CB A2
        .BYTE   'e', $80+(8*4)+Z80_E,   OP_CB   ; SET4.E        |    CB A3
        .BYTE   'h', $80+(8*4)+Z80_H,   OP_CB   ; SET4.H        |    CB A4
        .BYTE   'l', $80+(8*4)+Z80_L,   OP_CB   ; SET4.L        |    CB A5
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@set4m  .DATA   'h', (@set4hl-CADDR)-1
        .BYTE   'i'|AND
        .BYTE   'x', $86+(8*4),         OP_CBXO ; SET4*IX $nn   | DD CB nn A6
        .BYTE   'y', $86+(8*4),         OP_CBYO ; SET4*IY $nn   | FD CB nn A6
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@set4hl .BYTE   'l', $86+(8*4),         OP_CB   ; SET4*HL       |    CB A6
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@set5   .DATA   '*', (@set5m-CADDR)-1
        .BYTE   '.'|AND
        .BYTE   'a', $80+(8*5)+Z80_A,   OP_CB   ; SET5.A        |    CB AF
        .BYTE   'b', $80+(8*5)+Z80_B,   OP_CB   ; SET5.B        |    CB A8
        .BYTE   'c', $80+(8*5)+Z80_C,   OP_CB   ; SET5.C        |    CB A9
        .BYTE   'd', $80+(8*5)+Z80_D,   OP_CB   ; SET5.D        |    CB AA
        .BYTE   'e', $80+(8*5)+Z80_E,   OP_CB   ; SET5.E        |    CB AB
        .BYTE   'h', $80+(8*5)+Z80_H,   OP_CB   ; SET5.H        |    CB AC
        .BYTE   'l', $80+(8*5)+Z80_L,   OP_CB   ; SET5.L        |    CB AD
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@set5m  .DATA   'h', (@set5hl-CADDR)-1
        .BYTE   'i'|AND
        .BYTE   'x', $86+(8*5),         OP_CBXO ; SET5*IX $nn   | DD CB nn AE
        .BYTE   'y', $86+(8*5),         OP_CBYO ; SET5*IY $nn   | FD CB nn AE
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@set5hl .BYTE   'l', $86+(8*5),         OP_CB   ; SET5*HL       |    CB AE
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@set6   .DATA   '*', (@set6m-CADDR)-1
        .BYTE   '.'|AND
        .BYTE   'a', $80+(8*6)+Z80_A,   OP_CB   ; SET6.A        |    CB B7
        .BYTE   'b', $80+(8*6)+Z80_B,   OP_CB   ; SET6.B        |    CB B0
        .BYTE   'c', $80+(8*6)+Z80_C,   OP_CB   ; SET6.C        |    CB B1
        .BYTE   'd', $80+(8*6)+Z80_D,   OP_CB   ; SET6.D        |    CB B2
        .BYTE   'e', $80+(8*6)+Z80_E,   OP_CB   ; SET6.E        |    CB B3
        .BYTE   'h', $80+(8*6)+Z80_H,   OP_CB   ; SET6.H        |    CB B4
        .BYTE   'l', $80+(8*6)+Z80_L,   OP_CB   ; SET6.L        |    CB B5
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@set6m  .DATA   'h', (@set6hl-CADDR)-1
        .BYTE   'i'|AND
        .BYTE   'x', $86+(8*6),         OP_CBXO ; SET6*IX $nn   | DD CB nn B6
        .BYTE   'y', $86+(8*6),         OP_CBYO ; SET6*IY $nn   | FD CB nn B6
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@set6hl .BYTE   'l', $86+(8*6),         OP_CB   ; SET6*HL       |    CB B6
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@set7   .DATA   '*', (@set7m-CADDR)-1
        .BYTE   '.'|AND
        .BYTE   'a', $80+(8*7)+Z80_A,   OP_CB   ; SET7.A        |    CB BF
        .BYTE   'b', $80+(8*7)+Z80_B,   OP_CB   ; SET7.B        |    CB B8
        .BYTE   'c', $80+(8*7)+Z80_C,   OP_CB   ; SET7.C        |    CB B9
        .BYTE   'd', $80+(8*7)+Z80_D,   OP_CB   ; SET7.D        |    CB BA
        .BYTE   'e', $80+(8*7)+Z80_E,   OP_CB   ; SET7.E        |    CB BB
        .BYTE   'h', $80+(8*7)+Z80_H,   OP_CB   ; SET7.H        |    CB BC
        .BYTE   'l', $80+(8*7)+Z80_L,   OP_CB   ; SET7.L        |    CB BD
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@set7m  .DATA   'h', (@set7hl-CADDR)-1
        .BYTE   'i'|AND
        .BYTE   'x', $86+(8*7),         OP_CBXO ; SET7*IX $nn   | DD CB nn BE
        .BYTE   'y', $86+(8*7),         OP_CBYO ; SET7*IY $nn   | FD CB nn BE
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@set7hl .BYTE   'l', $86+(8*7),         OP_CB   ; SET7*HL       |    CB BE
        .BYTE   ERR
        ;=======================================================================
@sla    .BYTE   'a'|AND
        .DATA   '*', (@sla_m-CADDR)-1
        .BYTE   '.'|AND
        .BYTE   'a', $20+Z80_A,         OP_CB   ; SLA.A         |    CB 27
        .BYTE   'b', $20+Z80_B,         OP_CB   ; SLA.B         |    CB 20
        .BYTE   'c', $20+Z80_C,         OP_CB   ; SLA.C         |    CB 21
        .BYTE   'd', $20+Z80_D,         OP_CB   ; SLA.D         |    CB 22
        .BYTE   'e', $20+Z80_E,         OP_CB   ; SLA.E         |    CB 23
        .BYTE   'h', $20+Z80_H,         OP_CB   ; SLA.H         |    CB 24
        .BYTE   'l', $20+Z80_L,         OP_CB   ; SLA.L         |    CB 25
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@sla_m  .DATA   'h', (@sla_mh-CADDR)-1
        .BYTE   'i'|AND
        .BYTE   'x', $26,               OP_CBXO ; SLA*IX $nn    | DD CB nn 26
        .BYTE   'y', $26,               OP_CBYO ; SLA*IY $nn    | FD CB nn 26
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@sla_mh .BYTE   'l', $26,               OP_CB   ; SLA*HL        |    CB 26
        .BYTE   ERR
        ;=======================================================================
@sr     .DATA   'a', (@sra-CADDR)-1
        .BYTE   'l'|AND
        .DATA   '*', (@srl_m-CADDR)-1
        .BYTE   '.'|AND
        .BYTE   'a', $38+Z80_A,         OP_CB   ; SRL.A         |    CB 3F
        .BYTE   'b', $38+Z80_B,         OP_CB   ; SRL.B         |    CB 38
        .BYTE   'c', $38+Z80_C,         OP_CB   ; SRL.C         |    CB 39
        .BYTE   'd', $38+Z80_D,         OP_CB   ; SRL.D         |    CB 3A
        .BYTE   'e', $38+Z80_E,         OP_CB   ; SRL.E         |    CB 3B
        .BYTE   'h', $38+Z80_H,         OP_CB   ; SRL.H         |    CB 3C
        .BYTE   'l', $38+Z80_L,         OP_CB   ; SRL.L         |    CB 3D
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@srl_m  .DATA   'h', (@srl_mh-CADDR)-1
        .BYTE   'i'|AND
        .BYTE   'x', $3e,               OP_CBXO ; SRL*IX $nn    | DD CB nn 3E
        .BYTE   'y', $3e,               OP_CBYO ; SRL*IY $nn    | FD CB nn 3E
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@srl_mh .BYTE   'l', $3e,               OP_CB   ; SRL*HL        |    CB 3E
        .BYTE   ERR
        ;=======================================================================
@sra    .DATA   '*', (@sra_m-CADDR)-1
        .BYTE   '.'|AND
        .BYTE   'a', $28+Z80_A,         OP_CB   ; SRL.A         |    CB 2F
        .BYTE   'b', $28+Z80_B,         OP_CB   ; SRL.B         |    CB 28
        .BYTE   'c', $28+Z80_C,         OP_CB   ; SRL.C         |    CB 29
        .BYTE   'd', $28+Z80_D,         OP_CB   ; SRL.D         |    CB 2A
        .BYTE   'e', $28+Z80_E,         OP_CB   ; SRL.E         |    CB 2B
        .BYTE   'h', $28+Z80_H,         OP_CB   ; SRL.H         |    CB 2C
        .BYTE   'l', $28+Z80_L,         OP_CB   ; SRL.L         |    CB 2D
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@sra_m  .DATA   'h', (@sra_mh-CADDR)-1
        .BYTE   'i'|AND
        .BYTE   'x', $2e,               OP_CBXO ; SRA*IX $nn    | DD CB nn 2E
        .BYTE   'y', $2e,               OP_CBYO ; SRA*IY $nn    | FD CB nn 2E
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@sra_mh .BYTE   'l', $2e,               OP_CB   ; SRA*HL        |    CB 2E
        .BYTE   ERR
        ;=======================================================================
@sub    .BYTE   'b'|AND
        .BYTE   END, $d6,               OP_B    ; SUB $nn       |    D6 nn
        .DATA   '*', (@sub_m-CADDR)-1
        .BYTE   '.'|AND
        .BYTE   'a', $90+Z80_A,         OP      ; SUB.A         |    97
        .BYTE   'b', $90+Z80_B,         OP      ; SUB.B         |    90
        .BYTE   'c', $90+Z80_C,         OP      ; SUB.C         |    91
        .BYTE   'd', $90+Z80_D,         OP      ; SUB.D         |    92
        .BYTE   'e', $90+Z80_E,         OP      ; SUB.E         |    93
        .BYTE   'h', $90+Z80_H,         OP      ; SUB.H         |    94
        .BYTE   'l', $90+Z80_L,         OP      ; SUB.L         |    95
        .BYTE   'i'|AND
        .DATA   'x', (@sub_rx-CADDR)-1
        .BYTE   'y'|AND
        .BYTE   'h', $90+Z80_IH,        OP_IY   ; SUB.IYH       | DD 94
        .BYTE   'l', $90+Z80_IL,        OP_IY   ; SUB.IYL       | DD 95
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@sub_rx .BYTE   'h', $90+Z80_IH,        OP_IX   ; SUB.IXH       | FD 94
        .BYTE   'l', $90+Z80_IL,        OP_IX   ; SUB.IXL       | FD 95
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@sub_m  .DATA   'h', (@sub_mh-CADDR)-1
        .BYTE   'i'|AND
        .BYTE   'x', $96,               OP_IXO  ; SUB*IX $nn    | DD 96 nn
        .BYTE   'y', $96,               OP_IYO  ; SUB*IY $nn    | FD 96 nn
        .BYTE   ERR
        ;-----------------------------------------------------------------------
@sub_mh .BYTE   'l', $96,               OP      ; SUB*HL        |    96
        ;=======================================================================
.ENDB