; v80, (C) Kroc Camen 2023-2024, MIT License
; CP/M-2.2 interface
;
; memory layout:
;-------------------------------------------------------------------------------
.MEMORYMAP
    DEFAULTSLOT 1
    ; RUNCPM 60K, BDOS @ $FD00, BIOS @ $FE00
    SLOT 0 START $0000 SIZE $0100       NAME "ZP"
    SLOT 1 START $0100 SIZE $FD00-$0100 NAME "TPA"
.ENDME

.ROMBANKSIZE $FD00-$0100
.ROMBANKS 1

; system constants:
;-------------------------------------------------------------------------------
NULL                    = 0
LO                      = 0
HI                      = 1

ASCII_SPC               = $20           ; ASCII space (whitespace)
ASCII_TAB               = $09           ; ASCII tab (whitespace)
ASCII_CR                = $0d           ; ASCII carriage-return
ASCII_LF                = $0a           ; ASCII line-feed
ASCII_SUB               = $1a           ; ASCII "substitute", end-of-file char

CPM_VER                 = $22           ; CP/M version as BCD
CPM_VER_STR             = "2.2"         ; CP/M version as string

BOOT                    = $0000
TBASE                   = $0100         ; start of transient program area


; bootstrap:
;===============================================================================
.BLOCK  "os-cpm"

.BANK 0 SLOT "TPA"
.ORGA TBASE

boot:
;===============================================================================
        ; always print the banner first,
        ; it differs for each OS/platform
        ;
        ld      DE,     @banner         ; print the program banner
        call    osPrintStr

        ; check CP/M version -- it's not likely we're going to be running
        ; on CP/M-1 but this same check will be required for a CP/M-3 version
        ;
        ld      C,      BDOS_VER
        call    BDOS
        ld      A,      L               ; compare returned version
        cp      CPM_VER                 ;  with required CP/M version
        jr      c,      @err            ; ver < CPM_VER, quit with error

        ; when a program is loaded in CP/M a small stack is created, enough
        ; to call the BDOS/BIOS. we want to set the stack to the top of
        ; memory although that depends were the TPA ends and the BDOS begins
        ;
        ; the address at $06/07 points to the beginning of BDOS,
        ; so if we set the stack there the first push will go to BDOS-1.
        ; on RunCPM this is $FD00
        ;
@ok:    ld      HL,     [BDOS+1]        ; get BDOS address from `jp $xxxx`
        ld      L,      0               ; normalise to beginning of page
        ld      SP,     HL

        ; check for an automatic file-reference,
        ; i.e. a file parameter was passed on the command line
        ;-----------------------------------------------------------------------
        ; check filename first-letter in the built-in file-control-block
        ld      A,      [command_fcb.filename]
        and     %01111111               ; (hi-bit might be set)
        cp      ' '+1                   ; non-visible char? $00-$20?
        jp      c,      @help           ; show help msg and quit

        ; open file:
        xor     A                       ; start reading at record 0
        ld      [command_fcb.current_record],   A
        ld      C,      BDOS_OPEN
        ld      DE,     command_fcb     ; use default FileControlBlock
        call    BDOS
        and     A                       ; (set flags!)
        jp      m,      errFile         ; $FF = error

        ; run the program
        ;-----------------------------------------------------------------------
        call    init
        ;-----------------------------------------------------------------------

        ; since we've overwritten the CCP,
        ; we need to restart CP/M fully
        jp      osQuit

        ;-----------------------------------------------------------------------
@banner .BYTE   "v80 CP/M v0, Kroc Camen 2034-2024\n$"

        ;=======================================================================
@err:   ld      DE,     @@str           ; exit with a version error
        call    osPrintStr
        jp      osQuit

@@str   .BYTE "Error: CP/M ", CPM_VER_STR, " or higher required!$"

        ;=======================================================================
@help:  ld      DE,     @@str
        jp      osPrintStr

@@str   .BYTE "\n    V80 SOURCE.V80$"


; BDOS calls:
;===============================================================================
BDOS                    = $0005         ; call address to access BDOS

; function              ; C             ; notes
BDOS_RESET              = 0             ; system reset
BDOS_CONIN              = 1             ; console input
BDOS_CONOUT             = 2             ; console output
BDOS_RDRIN              = 3             ; reader input
BDOS_PUNOUT             = 4             ; punch output
BDOS_LISTOUT            = 5             ; list output
BDOS_DIRCON             = 6             ; direct console control
BDOS_GETIO              = 7             ; get I/O byte
BDOS_SETIO              = 8             ; set I/O byte
BDOS_PRNSTR             = 9             ; print string
BDOS_CONBUF             = 10            ; buffered console input (line input)
BDOS_CONSTAT            = 11            ; get console status
BDOS_VER                = 12            ; get version number
BDOS_RSTDSK             = 13            ; reset disk system
BDOS_SELDSK             = 14            ; select disk
BDOS_OPEN               = 15            ; open file
BDOS_CLOSE              = 16            ; close file
BDOS_FIND1ST            = 17            ; search for first file
BDOS_FINDNEXT           = 18            ; search for next file
BDOS_DEL                = 19            ; delete file
BDOS_READSEQ            = 20            ; read sequential
BDOS_WRITESEQ           = 21            ; write sequential
BDOS_MAKEFILE           = 22            ; create new file
BDOS_RENFILE            = 23            ; rename file
BDOS_LOGIN              = 24            ; return bitmap of present drives A-P
BDOS_CURDSK             = 25            ; get current disk
BDOS_SETDMA             = 26            ; set DMA address at $0008
BDOS_GETADDR            = 27            ; get addr of disk allocation
BDOS_WRTPTRCT           = 28            ; write protect disk
BDOS_GETRO              = 29            ; get read-only bitmap for drives A-P
BDOS_SETATTR            = 30            ; set file attributes
BDOS_DSKPARMS           = 31            ; get file parameters addr
BDOS_USER               = 32            ; set/return user number
BDOS_READRND            = 33            ; read random-access
BDOS_WRITERND           = 34            ; write random-access
BDOS_FILESIZE           = 35            ; get file size
BDOS_RECORD             = 36            ; get random-access record
BDOS_RSTDRV             = 37            ; reset drive
BDOS_FILLZERO           = 40            ; random-access zero-out

.STRUCT FileControlBlock
        drive_code      BYTE
        filename        DSB 8
        extension       DSB 3
        extent          BYTE
        reserved1       BYTE
        reserved2       BYTE
        record_count    BYTE
        data            DSB 16
        current_record  BYTE
        random_record   FARADDR
.ENDST

.RAMSECTION "CPMCommandFCB"             SLOT "ZP" ORGA $5C FORCE RETURNORG
;:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
command_fcb             INSTANCEOF FileControlBlock
;:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
.ENDS
.RAMSECTION "CPMBuffer"                 SLOT "ZP" ORGA $80 FORCE RETURNORG
;:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
buffer                  DSB 128
;:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
.ENDS


osQuit:
;===============================================================================
; quit the application and return to the OS (if present)
;-------------------------------------------------------------------------------
        ld      C,      BDOS_RESET      ; CP/M doesn't require us to unwind
        jp      BDOS                    ;  the stack, we can just reset


osGetChar:
;===============================================================================
; read an ASCII character from an open file:
;
; out:  A               character. 0 = end-of-file
;       zf              zero-flag is set for end of file
;       BC, DE, HL      (preserved)
;
; NOTE: this assumes no other file activity or user-input between reads!
;
; TODO: index byte will not be reset when changing file!
;       this routine needs to multi-task FCBs (store index in FCB?)
;-------------------------------------------------------------------------------
        exx                             ; swap to shadow registers
        ld      HL',    @index+1        ; index is stored *in* the instruction!

        ; if a sector has not been read, then fetch from disk first.
        ; CP/M uses 128-byte records and reads 1 record at a time
        ;
        ld      A,      [HL']           ; current index, 0 if uninitialised
        and     A                       ; (set flags!)
        jr      nz,     @index          ; skip if at least 1-byte read

        ; read sector:
        ;-----------------------------------------------------------------------
        ld      C',     BDOS_READSEQ
        ld      DE',    command_fcb
        call    BDOS

        ; reset record byte counter
        ld      HL',    @index+1        ; re-get index
        ld      [HL'],  <buffer         ; set addr *in* instruction below

        dec     A                       ; if A is $01, the file has ended
        jr      z,      @eof            ; go return 0 for EOF, zero-flag set

        ; TODO: non-zero indicates some other error;
        ;       does BDOS terminate anyway or do we need to handle this?

        ;-----------------------------------------------------------------------
        ; get byte:
        ;
        ; the sector is read to the "DMA" address, which is $80 by default.
        ; the address "$0000" is assembled into the instruction and the code
        ; will replace the low-byte with $80 after a sector read
        ;
@index  ld      A,      [$0000]         ; get byte at current index
        inc     [HL']                   ; increment index (address above!)

        ; in CP/M the ASCII SUB control code ($1A) terminates the file
        ; because all CP/M2 files are padded to 128 bytes sectors!
        ; <https://en.wikipedia.org/wiki/Substitute_character>
        ;
        cp      ASCII_SUB               ; is this a CP/M sector padding byte?
        jr      z,      @sub            ; return A=0, zero-flag set for EOF

        exx                             ; (restore register set)
        ret

        ;-----------------------------------------------------------------------
@sub:   xor     A                       ; return 0 for EOF, zero-flag set
@eof:   exx                             ; restore register set
        ret


osPrintChar:
;===============================================================================
; prints a single ASCII character:
;
; in:   A               input character
; out:  BC|DE|HL|IX/Y   (preserved)
;       A               (clobbered)
;-------------------------------------------------------------------------------
        exx                             ; swap to shadow registers

        ld      C',     BDOS_CONOUT
        ld      E',     A
        call    BDOS

        exx                             ; restore register set
        ret

osPrintStr:
;===============================================================================
; TODO: this relies on "$" as terminator on CPM2.2;
;       we can speed up a byte-by-byte print a little by using direct I/O
;
; in:   DE              string addr
; out:  C               (clobbered)
;-------------------------------------------------------------------------------
        ld      C,      BDOS_PRNSTR
        jp      BDOS

.ENDB