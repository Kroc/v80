; v80, (C) Kroc Camen 2023-2024, MIT License
; a z80 assembler for Z80s
;
.INC    "cpm.wla"                       ; CP/M interface
.INC    "err.wla"                       ; error message handling
.INC    "z80.wla"                       ; Z80 parser & opcode binary tree

.BLOCK  "code"
;===============================================================================
; memory map:
;
;   +-----+----------------------------------------+------+----------------+
;   | v80 | code->                          <-heap | word | expr-> <-stack |
;   +-----+----------------------------------------+------+----------------+
;
; the bottom of the stack, just above the heap,
; can be used as temporary space for a few bytes
; (these values are set during initialisation)
;
.DEF    WORD_LEN        30              ; maximum symbol name length

temp:   .ADDR $fc00                     ; temp bytes at bottom of stack
word:   .ADDR $fc1f                     ; word-buffer (works backwards)
sp:     .ADDR $fd00                     ; stack pointer backup

char:   .BYTE $00                       ; current character

row:    .WORD $0000                     ; current line-number in file

; NOTE: these two bytes are specifically grouped together because they
;       are required by deferred expressions written to the heap,
;       and are pushed together as a single word
stride_col:
stride: .BYTE $00                       ; number of bytes to occupy
col:    .BYTE $00                       ; current column-number in file

; heap:
;-------------------------------------------------------------------------------
; as assembly progresses, the dictionary of symbols and deferred expressions
; will be built up on the heap. it works downwards from the top of memory
; in order to maximise the available space before the assembled binary
; and heap collide. during initialisation the heap will be placed 256 bytes
; below the stack at the top of memory, giving enough room for the stack
;
; like the stack, the heap is pre-decrement meaning that the heap address
; is decremented first before writing a value, ergo the heap addr points
; to a currently occupied byte on the heap
;
heap:   .ADDR $fc00                     ; current position on the heap

; dictionaries:
;-------------------------------------------------------------------------------
; labels and constants are stored as a linked-list of dictionary entries.
; each has its own entry point to avoid wasting time searching for labels
; amongst constants and vice-versa. $0000 terminates the list
;
; although the heap extends downwards, the link address has to point to
; the lo-byte of the entry's link field which is technically the 2nd byte
; of the record
;                     +------+
;          .--------->| addr |  (entry point)
;       2. |          +--|---+
; - - -----+------+      | 1.
;  ...data | addr | <----'      (heap extends downwards)
; - - -----+------+
;
label:  .ADDR $000                      ; addr of last label dictionary-entry
const:  .ADDR $000                      ; addr of last const dictionary-entry

; expression bytecode:
;-------------------------------------------------------------------------------
; calculations are compiled into bytecode to allow for later evaluation,
; i.e. for deferred calculations where a symbol is not yet known
;
.DEF    CHAR_END         0              ; general terminator
.DEF    CHAR_COMMENT    ';'             ; comment
.DEF    CHAR_HEX        '$'             ; hexadecimal literal or PC
.DEF    CHAR_LABEL      ':'             ; a label (16-bit)
.DEF    CHAR_CONST      '#'             ; a constant (flexible size)
.DEF    CHAR_OP_LO      '<'             ; lo-byte unary operator
.DEF    CHAR_OP_HI      '>'             ; hi-byte unary operator
.DEF    CHAR_OP_NOT     '!'             ; not unary operator
.DEF    CHAR_OP_ADD     '+'             ; add operator 
.DEF    CHAR_OP_SUB     '-'             ; subtract operator
.DEF    CHAR_OP_MUL     '*'             ; multiply operator
.DEF    CHAR_OP_DIV     '/'             ; divide operator
.DEF    CHAR_OP_AND     '&'             ; and operator
.DEF    CHAR_OP_OR      '|'             ; or operator
.DEF    CHAR_OP_XOR     '^'             ; xor operator
.DEF    CHAR_OP_MOD     '\'             ; modulo operator

expr:   .ADDR $fc20                     ; expression token space
defer:  .ADDR $0000                     ; addr of last deferred expr


init:
;===============================================================================
        ; set heap position below stack:
        ;-----------------------------------------------------------------------
        ; this *assumes* we are at least 1 call deep on the stack,
        ; i.e. $FCFE rather than the unused stack top @ $FD00
        ;
        ld      HL,     $0000           ; oddly, there's no `ld HL, SP`!
        add     HL,     SP              ; stack address, e.g. $FCFE
        ld      L,      0               ; use 0 for lo-byte, e.g. $FC00
        ld      [temp], HL              ; use bottom of stack for temp bytes
        ld      [heap], HL              ; finally set the heap position
        ld      BC,     WORD_LEN+1      ; max word-length for word buffer,
        add     HL,     BC              ;  plus 1 byte to store word-length
        ld      [word], HL              ;  (word buffer works downwards)
        inc     HL                      ; immediately above that
        ld      [expr], HL              ;  is the expr tokens space

        call    memStat                 ; print the memory status

        ; assemble the file
        ;-----------------------------------------------------------------------
        call    assemble
        ;-----------------------------------------------------------------------

        ld      [heap], HL
        call    memStat
        ret                             ; return to CP/M to quit the program


memStat:
;===============================================================================
; prints memory status:
;-------------------------------------------------------------------------------
        ld      HL,     $0000           ; oddly, there's no `ld HL, SP`!
        add     HL,     SP              ; stack address, e.g. $FCFE
        ex      DE,     HL              ; swap SP into DE
        ld      HL,     @stack          ; stack addr position in string
        call    @hex                    ; convert and insert

        ld      DE,     [heap]
        ld      HL,     @heap           ; heap addr position in string
        call    @hex                    ; convert and insert

        ld      DE,     [code]
        ld      HL,     @code           ; code addr position in string
        call    @hex                    ; convert and insert

        ld      DE,     @mem
        jp      osPrintStr

        ;-----------------------------------------------------------------------
        ; convert DE to ASCII hexadecimal digits and insert in the string
        ;
@hex:   ld      A,      D
        call    @byte
        ld      A,      E
@byte:  call    getHexByte
        ld      [HL],   B
        inc     HL
        ld      [HL],   C
        inc     HL
        ret

        ;-----------------------------------------------------------------------
@mem    .BYTE   "[stack: "
@stack  .BYTE   "0000"
        .BYTE   " | heap: "
@heap   .BYTE   "0000"
        .BYTE   " | code: "
@code   .BYTE   "0000"
        .BYTE   "]\n$"


assemble:
;===============================================================================
; assembles a file:
;
; TODO: do the file opening here so that we can do includes
;-------------------------------------------------------------------------------
        ; the virtual program counter is permanently pinned to IX since
        ; it's a value that needs to be incremented often but not read
        ; back too often. this avoids a bunch of HL/DE register swapping
        ;
        ld      IX,     $0100           ; virtual program-counter
        ld      HL,     [heap]          ; where symbols / expressions go

        ; parse root scope:
        ;-----------------------------------------------------------------------
@word:  call    skipWhitespace          ; find first character
-       ret     z                       ; stop at end-of-file

        ; first character determines the word type:
        cp      CHAR_COMMENT            ; is comment?
        jr      z,      @skip           ; skip until end of line
        cp      CHAR_LABEL              ; is label?
        jr      z,      @label          ; define a label

        call    parseInstruction

        ;///////////////////////////////////////////////////////////////////////
        ld      A,      ASCII_LF
        call    osPrintChar             ; DEBUG!
        ;///////////////////////////////////////////////////////////////////////
        
        and     A
        jr      -

        ; skip comments:
        ;=======================================================================
@skip:  call    getChar                 ; read next character (returns z-flag)
        ret     z                       ; return on end-of-file
        cp      ASCII_LF                ; is newline?
        jr      nz, @word               ; keep going until new line
        jr      @word                   ; try get next word

        ; define label:
        ;=======================================================================
@label: push    DE                      ; code-segment is not used here...

        call    readWord                ; read the label in
        call    findLabel               ; does it already exist?
        jp      nz,     errLabel        ; cannot redefine labels!
        call    pushLabel               ; define label on the heap

        pop     DE                      ; restore code-segment
        jr      @word


skipWhitespace:
;===============================================================================
; reads input until a visible character (ASCII >32),
; or the end of the file is reached:
; 
; out:  A               ASCII code. 0 = end-of-file
;       z               zero-flag is set only if end-of-file
;-------------------------------------------------------------------------------
-       call    getChar                 ; read a character (returns z-flag)
        ret     z                       ; return z-flag set if end-of-file
        
        ; we need to be careful not to return z-flag set!
        ;
        ; we cannot check for ASCII_SPC+1 ("!") as if this character appears,
        ; the parser will think the file ended. instead look for space itself
        ; -- for any ASCII code below we continue looping, and space itself
        ; is caught with the zero-flag and re-looped
        ; 
        cp      ASCII_SPC               ; is ASCII code a space?
        jr      c,      -               ; keep reading if codes 1-31
        jr      z,      -               ; also, keep reading if space

        ret

getChar:
;===============================================================================
; reads the next character in the file.
; current row and column are maintained
;
; TODO: handle tab (next 8th char boundary)
;
; out:  A                               ASCII code, 0 for end-of-file
;       z                               zero-flag is set according to A
;       DE, HL                          (preserved)
;       BC                              (undefined)
;-------------------------------------------------------------------------------
-       call    osGetChar               ; read a char from file
        ld      [char], A               ; retain returned character
        ret     z                       ; return on null byte (end-of-file)

        ; check for end of line:
        ;-----------------------------------------------------------------------
        cp      ASCII_CR                ; /r is always ignored,
        jr      z, -                    ;  don't advance row/col, get next char

        exx                             ; must preserve HL & DE
        ld      HL',    col             ; prepare to increment column number

        cp      ASCII_LF                ; /n is newline
        jr      nz,     @col            ; if not, skip to next column

        ; increment line-number:
        ;-----------------------------------------------------------------------
        ; TODO: should we pin this to IY?
        ;
        ld      DE',    [row]           ; 16-bit load,
        inc     DE'                     ;  and increment,
        ld      [row],  DE'             ;  and write
        ld      [HL'],  0               ; reset column number

        ; increment column number:
        ;-----------------------------------------------------------------------
        ; (capped at 255 even though lines can be longer)
        ; TODO: don't even bother capping the length! lines should not
        ; be longer than 80 and an incorrect number beyond 255 is not
        ; a major issue
        ;
@col:   inc     [HL']
        jr      nz,     +               ; if roll over, roll back (less
        dec     [HL']                   ;  instructions than read+add+write)

+       exx                             ; restore HL/DE
        and     A                       ; return z-flag
        ret


readWord:
;===============================================================================
; reads a word into a buffer:
;
; NOTE: an error occurs if a word is > WORD_LEN chars long.
;       this routine doesn't handle strings
;
; in:   A               first character of word already read
; out:  BC              length of word
;       HL              (preserved)
;       DE              (clobbered)
;-------------------------------------------------------------------------------
        ; note that the word is written *downwards* in RAM, to match how
        ; symbol names are written on the heap, for faster comparison --
        ; we use the bottom of the stack to hold the incoming word;
        ; because this is page-aligned we can get away with using
        ; `DEC E` instead of `DEC DE`
        ;
        ld      DE,     [word]          ; top of word-buffer, e.g $FC1F
        jr      +                       ; (first character already read)
        ;-----------------------------------------------------------------------
-       call    osGetChar               ; read char form input file
        cp      ASCII_SPC+1             ; whitespace?
        jr      c,      @ok             ; (leave loop at whitespace)
+       dec     E                       ; move to next space in buffer
        ld      [DE],   A               ; add the character to the buffer
        jp      p,      -               ; keep going until buffer full
        ;-----------------------------------------------------------------------
        jp      errWord                 ; word too long!

        ;-----------------------------------------------------------------------
@ok:    ld      A,      WORD_LEN        ; max size - characters remaining
        sub     E                       ;  = length of word
        ld      [word], A               ; write word-length byte

        ld      C,      A               ; return word-length in BC,
        ld      B,      0               ;  convenient for `findSymbol` etc.

        ret

findLabel:
;===============================================================================
; search the dictionary for a label:
;
; out:  A               0 if symbol not found, non-zero if found
;       z               z-flag is set according to the above
;       BC              if symbol found, BC holds its value
;       HL              (preserved)
;       DE              (clobbered)
;-------------------------------------------------------------------------------
        push    HL                      ; preserve heap position

        ld      HL,     label           ; label dictionary entry point
        call    findSymbol

        pop     HL                      ; restore heap position
        and     A                       ; set z-flag according to result
        ret

findConstant:
;===============================================================================
; search the dictionary for a constant:
;
; out:  A               0 if symbol not found, non-zero if found
;       z               z-flag is set according to the above
;       BC              if symbol found, BC holds its value
;       HL              (preserved)
;       DE              (clobbered)
;-------------------------------------------------------------------------------
        push    HL                      ; preserve heap position

        ld      HL,     const           ; constants dictionary entry point
        call    findSymbol

        pop     HL                      ; restore heap position
        and     A                       ; set z-flag according to result
        ret

findSymbol:
;===============================================================================
; search for a symbol (label / constant) in a dictionary:
;
; in:   HL              dictionary entry point: an addr that contains the
;                       addr of the last symbol added to the dictionary,
;                       e.g. `label` for labels & `const` for constants
;       BC              length of symbol name; `readWord` provides this.
;                       despite names being limited to 30 chars, B must be 0
;       [word]          the label is assumed to be in the word-buffer,
;                       i.e. after calling `readWord`
;
; out:  A               0 if symbol not found, non-zero if found
;       BC              if symbol found, BC holds its value
;                       if not found, BC retains the name length
;       HL              if found, the addr of the symbol record,
;                       pointing to the lo-byte of the link field
;       DE              (clobbered)
;-------------------------------------------------------------------------------
        ld      DE,     [word]          ; initialise addr of word-buffer
        jr      _findSymbol             ; jump into the main loop

        ; (this is a loop fall-through, see the label below for entry point)

        ;=======================================================================
        ; names do not match!
        ;
--      ld      E,      WORD_LEN+1      ; snap back to length byte in buffer
        pop     HL                      ; snap back to length byte in symbol
        ld      C,      [HL]            ; re-get word-length to check
-       inc     HL                      ; move *up* to link addr lo-byte        

_findSymbol:
        ;-----------------------------------------------------------------------
        ; the link field of a symbol points to      - - -+------+
        ; the lo-byte of the next symbol's link          | link |
        ; field in the chain, with the remaining    - - -+--|---+
        ; fields extending *downwards* in RAM            .--'
        ;                                                v
        ;          +-------+---+---+---+---+---+---+-----+------+
        ;  < heap  | value | l | e | b | a | l | : | len | link |
        ;          +-------+---+---+---+---+---+---+-----+------+
        ;
        ; follow this link, but exit if it's $0000
        ;
        ld      A,      [HL]            ; read next symbol addr, lo-byte
        inc     HL                      ; move *up* to link addr hi-byte
        ld      H,      [HL]            ; read next symbol addr, hi-byte
        ld      L,      A               ; (complete the addr)
        or      H                       ; is the link addr $0000?
        ret     z                       ; terminate at end of chain

        ; (HL is now the next symbol addr in the heap)

        dec     HL                      ; move down to length byte
        ld      A,      [HL]            ; get symbol name length
        cp      C                       ; compare with word-buffer length
        jr      nz,      -              ; different? return to link and follow

        ;-----------------------------------------------------------------------
        ; symbol length matches, check characters:
        ;
        ; remember this position to snap-back to if the symbol doesn't
        ; match and we need to follow the link to the next symbol
        push    HL

        dec     HL                      ; move down a character in the heap
@loop:  dec     E                       ; move down a character in word-buffer
        ld      A,      [DE]            ; read char from word-buffer
        cpd                             ; = CP A, [HL]; DEC HL; DEC BC
        jr      nz,     --              ; stop looping if mismatch
        jp      pe,     @loop           ; keep looping until chars run out

        ; names match! read and return the symbol value:
        ;-----------------------------------------------------------------------
        ; NOTE: CPD has already decremented HL to the value hi-byte
        ;
        ld      B,      [HL]            ; symbol value hi-byte
        dec     HL                      ; move to value lo-byte
        ld      C,      [HL]            ; return BC = symbol value
        
        ; return the address of the symbol:
        pop     HL                      ; snap back to the symbol-len field
        inc     HL                      ; move *up* to link addr lo-byte   

        ret

pushLabel:
;===============================================================================
; push a new label to the heap:
; 
; - the link addr to the previous label
; - the label name length; here for faster searching
; - the label name, written right-to-left -- the heap extends downwards!
; - the label value; the current virtual program-counter
;
; WARN: does not check if the label already exists!
;
; in:   HL              heap position to write new label
;       [word]          the label is assumed to be in the word-buffer,
;                       i.e. after calling `readWord`
; out:  HL              heap position is advanced (downwards!)
;       A, BC|DE        clobbered
;-------------------------------------------------------------------------------
        ; link this label to the previous one:
        ;
        ld      DE,     [label]         ; read prev label addr
        dec     HL                      ; pre-decrement heap to empty byte
        ld      [HL],   D               ; write prev label addr hi-byte
        dec     HL                      ; (this is the heap addr we want)
        ld      [HL],   E               ; write prev label addr lo-byte
        ld      [label],DE              ; update entry point with heap addr

        ; push the label name:
        ;
        ld      DE,     [word]          ; get word-buffer addr
        ld      A,      [DE]            ; first byte is word-length
        ld      B,      0               ; loop count must be in BC
        ld      C,      A               ; 
        inc     C                       ; +1 to include the length-byte

        ; note that LDDR is post-decrement (copy-then-decrement), whereas
        ; the heap is pre-decrement like the stack (decrement-then-copy)
        ; -- decrement HL once to adjust for this before the copy
        ;
        dec     HL                      ; adjust heap for post-decrement copy
        lddr                            ; copy BC bytes from [DE] to [HL]!

        ; push the label value (virtual program-counter):
        ;
        ; the value comes after the label name to speed up symbol searching
        ; as the value is only needed once a symbol name is matched and then
        ; the addr is in the right place
        ;
        ; NOTE: CPDR has already decremented HL to the value hi-byte
        ;
        ld      A,      IXH
        ld      [HL],   A
        dec     HL
        ld      A,      IXL
        ld      [HL],   A

        ret


parseExpr:
;===============================================================================
; parse an expression from the input file, tokenise it and evaluate it,
; writing the result to the code-segment. if the expression has forward-
; references, it'll be deferred
;
; in:   HL              current heap addr; if the expr has to be deferred
;                       it'll be pushed to the heap
;       [stride]        the stride (parameter width) needs to be set as this
;                       determines the number of bytes the result fits in
;-------------------------------------------------------------------------------
        call    tokenExpr               ; read expr and tokenise

        ; HL, the start of the expression will be returned as-is. DE will
        ; contain the *end* of the expression. if we can't evaluate the
        ; expression, we need to keep it and append a defer record
        ;


        ; evaluate the expression and return its value:
        ; (fallthrough...)

evalExpr:
;===============================================================================
; evaluates an expr:
;
; in:   HL      addr of the expr tokens on the heap
; out:  BC      result value
;-------------------------------------------------------------------------------
        ret


tokenExpr:
;===============================================================================
; read an expression from the input file into tokens:
;
; words are read and converted into tokens.
; if the expression contains forward references a flag is returned
;
; WARN: the first character of the expression is assumed to be read and
;       the first character of the next word following the expression
;       will be read but not used! this allows chaining of expressions,
;       but you must avoid calling `getChar` without first using the
;       character waiting in `[char]`
;
; TODO: return some flag for evaluable state. A? c? z?
;
; out:  A, BC|DE|HL     (clobbered)
;-------------------------------------------------------------------------------
        ; expressions are tokenised into a temporary space at the bottom of
        ; the stack, this is because any forward-references to labels will
        ; need to be pushed to the heap so we can't have the expr on the
        ; heap at the same time!
        ;
        ; TODO: `ld HL, [expr]` can be patched with `ld HL, $xx20`
        ;       to save 10 cycles here
        ;
        ld      HL,     [expr]          ; get addr of expr bytecode space
        ld      A,      [char]          ; get current unused input char
        jr      @unary                  ; jump into the parsing loop

        ;=======================================================================
-       ld      [HL],   A               ; push token in A to expr
        inc     HL                      ; move to next token space

        call    skipWhitespace          ; read first character of the next word
        jp      z,      errExpr         ; unexpected end of file!

        ; an expression must begin with either a value,
        ; or a unary operator and a value
        ;
        ; unary operator?
        ;-----------------------------------------------------------------------
        ; unary operators can always precede values,
        ; even after an operator, e.g. `$10 + <:label`
        ;
@unary: cp      CHAR_OP_LO              ; lo-byte operator?
        jr      z,      +               ; a value must follow a unary operator
        ;-----------------------------------------------------------------------
        cp      CHAR_OP_HI              ; hi-byte operator?
        jr      z,      +               ; a value must follow a unary operator
        ;-----------------------------------------------------------------------
        cp      CHAR_OP_NOT             ; not operator?
        jr      nz,     @value          ; no unary operators, check for values

        ; a unary operator has been added,
        ; read the next character:
+       ld      [HL],   A               ; push a unary operator token
        inc     HL                      ; move to next token space

        call    skipWhitespace          ; read first character of the next word
        jp      z,      errEndOfFile    ; handle unexpected end of file!

        ; hexadecimal literal?
        ;-----------------------------------------------------------------------
        ; a sigil is required because A-F can't be separated
        ; from instruction names without look-ahead
        ;
@value: cp      CHAR_HEX                ; hexadecimal sigil?
        jr      nz,     +

        ld      [HL],   A               ; push a number token
        inc     HL                      ; move to next token space
        call    parseHexNumber          ; parse the hex number into BC
        ld      [HL],   B               ; push the number hi-byte
        inc     HL                      ; move to next token space
        ld      [HL],   C               ; push the number lo-byte
        inc     HL                      ; move to next token space

        jr      @operator               ; an operator can follow a value

        ; constant?
        ;-----------------------------------------------------------------------
+       cp      CHAR_CONST              ; a constant?
        jr      nz,     +

        halt

        ; label?
        ;-----------------------------------------------------------------------
+       cp      CHAR_LABEL              ; a label?
        jp      nz,     errExpr         ; expression has no value!!

        call    readWord                ; get the full label name
        call    findLabel               ; try get the label's value

        ; TODO: handle missing label


        halt

        ;-----------------------------------------------------------------------
        ; a value has been added, check for the presence of an operator:
        ; if there's no operator, the expression ends here
@operator:
        call    skipWhitespace          ; read first character of the next word
        jr      z,      @end            ; if end-of-file, end the expression

        cp      CHAR_OP_ADD             ; add operator?
        jr      z,      -               ; push token to heap, find next operand
        cp      CHAR_OP_SUB             ; subtract operator?
        jr      z,      -               ; ...
        cp      CHAR_OP_MUL             ; multiply operator?
        jr      z,      -               ; ...
        cp      CHAR_OP_DIV             ; divide operator?
        jr      z,      -               ; ...
        cp      CHAR_OP_AND             ; and operator?
        jr      z,      -               ; ...
        cp      CHAR_OP_OR              ; or operator?
        jr      z,      -               ; ...
        cp      CHAR_OP_XOR             ; xor operator?
        jr      z,      -               ; ...
        cp      CHAR_OP_MOD             ; modulo operator?
        jr      z,      -               ; ...

        ;-----------------------------------------------------------------------
        ; whatever it is, it isn't an operator;
        ; fall through and terminate the expression
        ;
@end:   ld      [HL],   CHAR_END        ; terminate the expression (0)
        ret


deferExpr:
;===============================================================================
; push an expression to the heap:
;
; - the link addr to the previous expression
; - the current code-segment address
; - the current virtual program-counter
;   (in case of relative jump)
; - the current line number in the input file
; - the current column number in the input file
;   (in case of error)
; - the size of the output; 1 or 2 bytes
; - the addr of the expr tokens
;
; in:   HL              current heap position
;       IX              virtual program-counter
;
; out:  HL              updated heap position (defer record added to heap)
;       DE              updated code-segment addr (expr result space reserved)
;       IX              updated virtual program-counter (as with DE)
;       A, BC           (clobbered)
;-------------------------------------------------------------------------------
        ld      DE,     [code]          ; retrieve current code-segment addr

        ; we need to push a bunch of values to the heap and the fastest way
        ; to write 16-bit values easily is... the stack! simply make the heap
        ; into the stack and we can PUSH our stuff on to it!
        ;
        ; WE DO NOT NEED TO DISABLE INTERRUPTS!!! any interrupt is going to
        ; push to our heap and then pop the address off when it returns,
        ; which has no affect on the values we're pushing
        ;
        ld      [sp],   SP              ; backup stack pointer
        ld      SP,     HL              ; move stack to heap!
        ;-----------------------------------------------------------------------

        ; link this expression to the previous one:
        ; (since the heap address is in SP, we can reuse HL)
        ;
        ld      HL,     [defer]         ; get previous deferred expr address
        push    HL                      ; write to heap
        ld      [defer],SP              ; write heap addr to the entry point!

        ; push the current code-segment position; this is where
        ; the expression result will be filled in after evaluation
        push    DE

        ; push the current virtual program-counter
        ; (for calculating relative jumps)
        push    IX                      ; PC is always stored in IX, not RAM

        ; push the source file line-number
        ld      BC,     [row]
        push    BC
        ; push the source file column-number, plus the number of bytes
        ; the result should occupy in the code-segment
        ld      BC,     [stride_col]
        push    BC

        ; reserve bytes for the expr result:
        ;
        ; this routine is only called if there is a parameter, which assumes
        ; a minimum of 1 byte, so check for a second byte
        ;
        dec     C                       ; is the stride 1 or 2?
        jr      z,      +               ; if it is 1, skip the 2nd byte
        inc     DE                      ; reserve a byte and increment
        inc     IX                      ;  virtual program-counter
+       inc     DE                      ; reserve an additional byte
        inc     IX                      ;  and increment program-counter
        ld      [code], DE              ; write back updated code-segment addr

        ;-----------------------------------------------------------------------
        ld      HL,     0               ; there is no `LD HL, SP` (!?), so
        add     HL,     SP              ;  it's quicker to just add SP to 0!
        ld      SP,     [sp]            ; restore stack pointer!

        ; begin parsing the expression, packing it into bytecode:
        ;-----------------------------------------------------------------------
        call    skipWhitespace          ; read first character of the next word
        jp      z,      errExpr         ; unexpected end of file!

        call    parseExpr               ; -- addr to write is in expr header

        ; attempt to evaluate the expression
        ; ...

        ld      DE,     [code]
        ret


parseHexNumber:
;===============================================================================
; parses an ASCII hexadecimal number and returns the value:
;
; out:  BC              the value, 0 padded for numbers < 256
;       A, DE           (clobbered)
;-------------------------------------------------------------------------------
        ld      C,      0               ; return value will go here

        ; try to read up to 4 digits; the 5th character
        ; must be whitespace or end-of-file!
        ;
        ; the bottom of the stack is used for temporary bytes (e.g. $FC00..)
        ; as we know this is page-aligned and can use INC L instead of INC HL
        ;
        ld      B,      5
        ld      DE,     [temp]          ; where to write the bytes
-       call    osGetChar               ; read a char from file
        cp      33                      ; ASCII space or below?
        jr      c,      +               ; stop when reaching whitespace
        ld      [DE],   A               ; append byte
        inc     L                       ; space for next digit
        djnz    -                       ; decrement B, loop until 0

        ; if a 5th byte was read that wasn't whitespace,
        ; it's an error -- the number is too long!
        jp      errHex

        ;-----------------------------------------------------------------------
+       ld      DE,     [temp]          ; go back to the start of the number
        
        ; number of digits in hex number is reversed;
        ; B=1 for 4 digits, B=2 for 3 digits, B=1 for 2 digits and B=0 for 1
        ;
        dec     B                       ; 4 digits?
        jr      z,      @four
        dec     B                       ; 3 digits?
        jr      z,      @three
        dec     B                       ; 2 digits?
        jr      z,      @two
        dec     B                       ; B=0 for 1-byte hex number in C
        jr      z,      @one

        ; if there were _no_ digits after the hexadecimal
        ; sigil ("$") then B was 5 and we error
        jp      errHex

        ; four-digit hex number:
        ;-----------------------------------------------------------------------
        ; a 4th digit must go in the upper nybble of B:
        ;
@four:  ld      A,      [DE]            ; get digit
        call    @digit                  ; convert digit to number
        add     A,      A               ;
        add     A,      A               ; left-shift (faster than `sla A`)
        add     A,      A               ; (shift lo-nybble to hi-nybble)
        add     A,      A               ;
        ld      B,      A               ; answer goes in B
        inc     L                       ; move to 3rd digit
        ;-----------------------------------------------------------------------
        ; a 3rd digit goes in the lower nybble of B:
        ;
@three: ld      A,      [DE]            ; get digit
        call    @digit                  ; convert digit to number
        or      B                       ; combine with hi-nybble (if present)
        ld      B,      A               ; answer goes in B
        inc     L                       ; move to 2nd digit
        ;-----------------------------------------------------------------------
        ; a 2nd digit goes in the upper nybble of C:
        ;
@two:   ld      A,      [DE]            ; get digit
        call    @digit                  ; convert digit to number
        add     A,      A               ;
        add     A,      A               ; left-shift (faster than `sla A`)
        add     A,      A               ; (shift lo-nybble to hi-nybble)
        add     A,      A               ;
        ld      C,      A               ; answer goes in C
        inc     L                       ; move to 1st digit
        ;-----------------------------------------------------------------------
        ; 1st digit goes in the lower nybble of C:
        ;
@one:   ld      A,      [DE]            ; get digit
        call    @digit                  ; convert digit to number
        or      C                       ; combine with hi-nybble (if present)
        ld      C,      A               ; answer goes in C

        ret                             ; ship it!

        ; convert a digit to a number:
        ;=======================================================================
        ; whitespace must already be precluded. err if not hex-digit
        ;
        ; valid hex digit?
        ;
        ; if we unset bit 5 then ASCII "a"-"f" (97-102) becomes "A"-"F" (65-70)
        ; without also altering existing uppercase letters. This also has the
        ; side-effect of changing ASCII "0"-"9" (30-39) to codes 16-25!
        ; (this is why ASCII codes 0-32 must be precluded beforehand)
        ;
@digit: res     5,      A               ; force upper-case for "a"-"f"
        sub     '0'                     ; anything < "0" becomes >=128 (hi-bit)
        cp      10                      ; 0-9 ("0"-"9") is okay
        ret     c                       ; exit early for 0-9

        ; between ASCII "9" and "A" is ":", ";", "<", "=", ">", "?" and "@";
        ; if we subtract 17, "A" becomes 0 and any of those 7 become negative
        ; (>=128, hi-bit set), therefore we only need to check 0-5 ("A"-"F")
        sub     17
        cp      6                       ; 0-5 ("A"-"F") are allowed
        jp      nc,     errHex          ; error for anything above "F"
        add     10                      ; rebase "A" to 10, "F" to 15

        ret


printHexByte:
;===============================================================================
; print a byte as hexadecimal:
;
; in:   A               byte to print
; out:  A, BC           (clobbered)
;-------------------------------------------------------------------------------
        call    getHexByte
        ld      A,      B
        call    osPrintChar
        ld      A,      C
        jp      osPrintChar

getHexByte:
;===============================================================================
; convert a byte into two ASCII hexadecimal digits:
;
; in:   A               input byte
; out:  BC              ASCII hex digits in hi,lo (printable) order
;       DE|HL|IX/Y      (preserved)
;       A               (clobbered)
;-------------------------------------------------------------------------------
        ld      B,      A               ; preserve for 2nd digit
        rra                             ;
        rra                             ; shift upper nybble down
        rra                             ;
        rra                             ;
        call    @digit                  ; convert to ASCII
        ld      A,      B               ; retrieve 2nd digit
        ld      B,      C               ; set upper ASCII digit

        ; fallthrough to convert 2nd digit
        ; ...

        ; NOTE: multiple online sources cite this method,
        ;       dating back to at least the 70s!
@digit: and     %00001111               ; isolate low-nybble
        add     $90                     ; magic!
        daa                             ; adjust to decimal
        adc     $40                     ; more magic!
        daa                             ; adjust to decimal
        ld      C,      A
        ret
.ENDB

; * * *   O B J E C T   C O D E   * * *
;===============================================================================
; this is where the assembled code will be placed;
; anything beyond this point will be overwritten
;
code:
;-------------------------------------------------------------------------------
        .ADDR __code                    ; pointer to current position

__code: ; WARNING: ANYTHING PLACED AFTER HERE WILL BE OVERWRITTEN

;///////////////////////////////////////////////////////////////////////////////