; v80, (C) Kroc Camen 2023-2024, MIT License
; error stuff
;
; TODO: use an error number to deduplicate these calls
; TODO: with any error, print out file name, line & col number
;
_strFile:       .BYTE "File not found!$"
_strEndOfFile:  .BYTE "Unexpected end of file!$"
_strWord:       .BYTE "Word too long! (max 32 chars)$"
_strOpcode:     .BYTE "Invalid Z80 instruction!$"
_strParam:      .BYTE "Expected instruction parameter!$"
_strExpr:       .BYTE "Invalid expression!$"
_strHex:        .BYTE "Invalid hexadecimal number!$"
_strLabelRedef: .BYTE "Labels cannot be redefined!$"
_strLabelUndef: .BYTE "Label is undefined!$"
_strConst:      .BYTE "Forward-reference in constant define!$"
_strConstUndef: .BYTE "Undefined constant!$"

_printQuit:
;===============================================================================
; (print string and quit to OS)
;-------------------------------------------------------------------------------
        call    osPrintStr
        jp      osQuit

errFile:
;===============================================================================
; file not found!
;-------------------------------------------------------------------------------
        ld      DE,     _strFile
        jr      _printQuit

errEndOfFile:
;===============================================================================
; unexpected end of file!
;-------------------------------------------------------------------------------
        ld      DE,     _strEndOfFile
        jr      _printQuit

errWord:
;===============================================================================
; word is too long!
;-------------------------------------------------------------------------------
        ld      DE,     _strWord
        jr      _printQuit

errOpcode:
;===============================================================================
; not a recognised opcode!
;-------------------------------------------------------------------------------
        ld      DE,     _strOpcode
        jr      _printQuit

errParam:
;===============================================================================
; instruction parameter expected!
;-------------------------------------------------------------------------------
        ld      DE,     _strParam
        jr      _printQuit

errExpr:
;===============================================================================
; not a valid expression!
;-------------------------------------------------------------------------------
        ld      DE,     _strExpr
        jr      _printQuit

errHex:
;===============================================================================
; not a valid hexadecimal number!
;-------------------------------------------------------------------------------
        ld      DE,     _strHex
        jr      _printQuit

errLabelRedef:
;===============================================================================
; labels cannot be redefined!
;-------------------------------------------------------------------------------
        ld      DE,     _strLabelRedef
        jr      _printQuit

errLabelUndef:
;===============================================================================
; label is undefined! (forward-reference remains)
;-------------------------------------------------------------------------------
        ld      DE,     _strLabelUndef
        jr      _printQuit


errConst:
;===============================================================================
; constants cannot be defined using forward-references!
;-------------------------------------------------------------------------------
        ld      DE,     _strConst
        jr      _printQuit

errConstUndef:
;===============================================================================
; use of undefined constant in expr!
;-------------------------------------------------------------------------------
        ld      DE,     _strConstUndef
        jr      _printQuit


.MACRO .printCharA
;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
.IFDEF  DEBUG
        ;///////////////////////////////////////////////////////////////////////
        push    AF
        call    osPrintChar
        pop     AF
.ENDIF  ;///////////////////////////////////////////////////////////////////////
;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
.ENDM

.MACRO  .printChar
;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
.IFDEF  DEBUG
        ;///////////////////////////////////////////////////////////////////////
        push    AF
        ld      A,      \1
        call    osPrintChar
        pop     AF
.ENDIF  ;///////////////////////////////////////////////////////////////////////
;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
.ENDM

.MACRO  .printHexByte
;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
.IFDEF  DEBUG
        ;///////////////////////////////////////////////////////////////////////
        push    AF
        push    BC
        call    printHexByte
        pop     BC
        pop     AF
.ENDIF  ;///////////////////////////////////////////////////////////////////////
;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
.ENDM
