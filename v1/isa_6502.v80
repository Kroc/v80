; v80, (C) Kroc Camen 2023-2024, MIT License
; 6502 ISA opcode tree
;
; opcode flags byte:
;===============================================================================
; the opcode tree indicates the end of a branch with an opcode-flags
; byte that describes the parameters used:
;
; bit 7 is always set as that indicates an opcode, rather than a branch
;
; bit 0 indicates an immediate, 8-bit parameter
;
; bit 1 is combined with bit 0 to indicate a 16-bit immediate parameter
;
; bit 2 indicates a relative jump. bit 0 is expected to be set as well
;
#OP             %10000000               ; implied, no parameters
#OP_B           %10000001               ; immediate, 8-bit
#OP_W           %10000011               ; immediate, 16-bits
#OP_R           %10000101               ; relative-jump

:opcodes
;===============================================================================
        #AND    128
        #END    0
        #ERR    $ff

        .b 'a   .w :a - $ - 1           ; = a..?
        .b 'b   .w :b - $ - 1           ; = b..?
        .b 'c   .w :c - $ - 1           ; = c..?
        .b 'd   .w :d - $ - 1           ; = d..?
        .b 'e   .w :xor - $ - 1         ; = eor (alias for xor)
        .b 'i   .w :i - $ - 1           ; = i..?
        .b 'j   .w :j - $ - 1           ; = j..?
        .b 'l   .w :l - $ - 1           ; = l..?
        .b 'n   .w :nop - $ - 1         ; = nop?
        .b 'o   .w :ora - $ - 1         ; = ora?
        .b 'p   .w :p - $ - 1           ; = p..?
        .b 'r   .w :r - $ - 1           ; = r..?
        .b 's   .w :s - $ - 1           ; = s..?
        .b 't   .w :t - $ - 1           ; = t..?
        .b 'x | #AND
        ;=======================================================================
:xor    .b 'o | #AND
        .b 'r | #AND
        .b #END $49     #OP_B           ; xor       $nn         | 49 nn
        .b '.   .w _r - $ - 1
        .b '* | #AND
        .b #END $4d     #OP_W           ; xor*      $nnnn       | 4D nn nn
        .b 'z | #AND
        .b '. | #AND
        .b 'x   $41     #OP_B           ; xor*z.x   $nn         | 41 nn
        .b #ERR
        ;-----------------------------------------------------------------------
_r      .b 'z   .w _z - $ - 1
        .b 'y   .w _y - $ - 1
        .b 'x | #AND
        .b '*   $5d     #OP_W           ; xor.x*    $nnnn       | 5D nn nn
        .b #ERR
        ;-----------------------------------------------------------------------
_z      .b #END $45     #OP_B           ; xor.z     $nn         | 45 nn
        .b '. | #AND
        .b 'x   $55     #OP_B           ; xor.z.x   $nn         | 55 nn
        .b #ERR
        ;-----------------------------------------------------------------------
_y      .b '* | #AND
        .b #END $59     #OP_W           ; xor.y*    $nnnn       | 59 nn nn
        .b 'z   $51     #OP_B           ; xor.y*z   $nn         | 51 nn
        .b #ERR
        ;=======================================================================
:a      .b 'd   .w :adc - $ - 1         ; adc?
        .b 'n   .w :and - $ - 1         ; and?
        ;-----------------------------------------------------------------------
        .b 's | #AND
        .b 'l | #AND
        .b #END $0a     #OP             ; asl                   | 0A
        .b '.   .w _r - $ - 1
        .b '*   $0e     #OP_W           ; asl*      $nnnn       | 0E nn nn
        .b #ERR
        ;-----------------------------------------------------------------------
_r      .b 'z   .w _z - $ - 1
        .b 'x | #AND
        .b '*   $1e     #OP_W           ; asl.x*    $nnnn       | 1E nn nn
        .b #ERR
        ;-----------------------------------------------------------------------
_z      .b #END $06     #OP_B           ; asl.z     $nn         | 06 nn
        .b '. | #AND
        .b 'x   $16     #OP_B           ; asl.z.x   $nn         | 16 nn
        .b #ERR
        ;=======================================================================
:adc    .b 'c | #AND
        .b #END $69     #OP_B           ; adc       $nn         | 69 nn
        .b '.   .w _r - $ - 1
        .b '* | #AND
        .b #END $6d     #OP_W           ; adc*      $nnnn       | 6D nn nn
        .b 'z | #AND
        .b '. | #AND
        .b 'x   $61     #OP_B           ; adc*z.x   $nn         | 61 nn
        .b #ERR
        ;-----------------------------------------------------------------------
_r      .b 'z   .w _z - $ - 1
        .b 'y   .w _y - $ - 1
        .b 'x | #AND
        .b '*   $7d     #OP_W           ; adc.x*    $nnnn       | 7D nn nn
        .b #ERR
        ;-----------------------------------------------------------------------
_z      .b #END $65     #OP_B           ; adc.z     $nn         | 65 nn
        .b '. | #AND
        .b 'x   $75     #OP_B           ; adc.z.x   $nn         | 75 nn
        .b #ERR
        ;-----------------------------------------------------------------------
_y      .b '* | #AND
        .b #END $79     #OP_W           ; adc.y*    $nnnn       | 79 nn nn
        .b 'z   $71     #OP_B           ; adc.y*z   $nn         | 71 nn
        .b #ERR
        ;=======================================================================
:and    .b 'd | #AND
        .b #END $29     #OP_B           ; and       $nn         | 29 nn
        .b '.   .w _r - $ - 1
        .b '* | #AND
        .b #END $2d     #OP_W           ; and*      $nnnn       | 2D nn nn
        .b 'z | #AND
        .b '. | #AND
        .b 'x   $21     #OP_B           ; and*z.x   $nn         | 21 nn
        .b #ERR
        ;-----------------------------------------------------------------------
_r      .b 'z   .w _z - $ - 1
        .b 'y   .w _y - $ - 1
        .b 'x | #AND
        .b '*   $3d     #OP_W           ; and.x*    $nnnn       | 3D nn nn
        .b #ERR
        ;-----------------------------------------------------------------------
_z      .b #END $25     #OP_B           ; and.z     $nn         | 25 nn
        .b '. | #AND
        .b 'x   $35     #OP_B           ; and.z.x   $nn         | 35 nn
        .b #ERR
        ;-----------------------------------------------------------------------
_y      .b '* | #AND
        .b #END $39     #OP_W           ; and.y*    $nnnn       | 39 nn nn
        .b 'z   $31     #OP_B           ; and.y*z   $nn         | 31 nn
        .b #ERR
        ;=======================================================================
:b      .b 'c   .w :bc_ - $ - 1
        .b 'e   .w :beq - $ - 1
        .b 'i   .w :bit - $ - 1
        .b 'm   .w :bmi - $ - 1
        .b 'n   .w :bne - $ - 1
        .b 'p   .w :bpl - $ - 1
        .b 'r   .w :brk - $ - 1
        .b 'v | #AND
        .b 'c   $50     #OP_R           ; bvc       $nnnn       | 50 nn
        .b 's   $70     #OP_R           ; bvs       $nnnn       | 70 nn
        .b #ERR
        ;=======================================================================
:bc_    .b 'c   $90     #OP_R           ; bcc       $nnnn       | 90 nn
        .b 's   $b0     #OP_R           ; bcs       $nnnn       | B0 nn
        .b #ERR
        ;=======================================================================
:beq    .b 'q   $f0     #OP_R           ; beq       $nnnn       | F0 nn
        .b #ERR
        ;=======================================================================
:bit    .b 't | #AND
        .b '*   $2c     #OP_W           ; bit*      $nnnn       | 2C nn nn
        .b '. | #AND
        .b 'z   $24     #OP_B           ; bit.z     $nn         | 24 nn
        .b #ERR
        ;=======================================================================
:bmi    .b 'i   $30     #OP_R           ; bmi       $nnnn       | 30 nn
        .b #ERR
        ;=======================================================================
:bne    .b 'e   $d0     #OP_R           ; bne       $nnnn       | D0 nn
        .b #ERR
        ;=======================================================================
:bpl    .b 'l   $10     #OP_R           ; bpl       $nnnn       | 10 nn
        .b #ERR
        ;=======================================================================
:brk    .b 'k   $00     #OP             ; brk                   | 00
        .b #ERR
        ;=======================================================================
:c      .b 'm   .w :cmp - $ - 1
        .b 'p   .w _cp - $ - 1
        .b 'l | #AND
        ;-----------------------------------------------------------------------
_cl     .b 'c   $18     #OP             ; clc                   | 18
        .b 'd   $d8     #OP             ; cld                   | D8
        .b 'i   $58     #OP             ; cli                   | 58
        .b 'v   $b8     #OP             ; clv                   | B8
        .b #ERR
        ;=======================================================================
_cp     .b 'x   .w :cpx - $ - 1
        .b 'y | #AND
        ;-----------------------------------------------------------------------
:cpy    .b #END $c0     #OP_B           ; cpy       $nn         | C0 nn
        .b '*   $cc     #OP_W           ; cpy*      $nnnn       | CC nn nn
        .b '. | #AND
        .b 'z   $c4     #OP_B           ; cpy.z     $nn         | C4 nn
        .b #ERR
        ;=======================================================================
:cpx    .b #END $e0     #OP_B           ; cpx       $nn         | E0 nn
        .b '*   $ec     #OP_W           ; cpx*      $nnnn       | EC nn nn
        .b '. | #AND
        .b 'z   $e4     #OP_B           ; cpx.z     $nn         | E4 nn
        .b #ERR
        ;=======================================================================
:cmp    .b 'p | #AND
        .b #END $c9     #OP_B           ; cmp       $nn         | C9 nn
        .b '.   .w _r - $ - 1
        .b '* | #AND
        .b #END $cd     #OP_W           ; cmp*      $nnnn       | CD nn nn
        .b 'z | #AND
        .b '. | #AND
        .b 'x   $c1     #OP_B           ; cmp*z.x   $nn         | C1 nn
        .b #ERR
        ;-----------------------------------------------------------------------
_r      .b 'z   .w _z - $ - 1
        .b 'y   .w _y - $ - 1
        .b 'x | #AND
        .b '*   $dd     #OP_W           ; cmp.x*    $nnnn       | DD nn nn
        .b #ERR
        ;-----------------------------------------------------------------------
_z      .b #END $c5     #OP_B           ; cmp.z     $nn         | C5 nn
        .b '. | #AND
        .b 'x   $d5     #OP_B           ; cmp.z.x   $nn         | D5 nn
        .b #ERR
        ;-----------------------------------------------------------------------
_y      .b '* | #AND
        .b #END $d9     #OP_W           ; cmp.y*    $nnnn       | D9 nn nn
        .b 'z   $d1     #OP_B           ; cmp.y*z   $nn         | D1 nn
        .b #ERR
        ;=======================================================================
:d      .b 'e | #AND
        .b 'c   .w :dec - $ -1
        .b 'x   $ca     #OP             ; dex                   | CA
        .b 'y   $88     #OP             ; dey                   | 88
        .b #ERR
        ;=======================================================================
:dec    .b '*   $ce     #OP_W           ; dec*      $nnnn       | CE nn nn
        .b '. | #AND
        .b 'z   .w _z - $ - 1
        .b 'x | #AND
        .b '*   $de     #OP_W           ; dec.x*    $nnnn       | DE nn nn
        .b #ERR
        ;-----------------------------------------------------------------------
_z      .b #END $c6     #OP_B           ; dec.z     $nn         | C6 nn
        .b '. | #AND
        .b 'x   $d6     #OP_B           ; dec.z.x   $nn         | D6 nn
        .b #ERR
        ;=======================================================================
:i      .b 'n | #AND
        .b 'c   .w :inc - $ -1
        .b 'x   $e8     #OP             ; inx                   | E8
        .b 'y   $c8     #OP             ; iny                   | C8
        .b #ERR
        ;-----------------------------------------------------------------------
:inc    .b '*   $ee     #OP_W           ; inc*      $nnnn       | EE nn nn
        .b '. | #AND
        .b 'z   .w _z - $ - 1
        .b 'x | #AND
        .b '*   $fe     #OP_W           ; inc.x*    $nnnn       | FE nn nn
        .b #ERR
        ;-----------------------------------------------------------------------
_z      .b #END $e6     #OP_B           ; inc.z     $nn         | E6 nn
        .b '. | #AND
        .b 'x   $f6     #OP_B           ; inc.z.x   $nn         | F6 nn
        .b #ERR
        ;=======================================================================
:j      .b 'm   .w :jmp - $ - 1
        .b 's | #AND
        .b 'r   $20     #OP_W           ; jsr       $nnnn       | 20 nn nn
        .b #ERR
        ;=======================================================================
:jmp    .b 'p | #AND
        .b #END $4c     #OP_W           ; jmp       $nnnn       | 4C nn nn
        .b '*   $6c     #OP_W           ; jmp*      $nnnn       | 6C nn nn
        .b #ERR
        ;=======================================================================
:l      .b 'd   .w :ld_ - $ - 1
        .b 's | #AND
        .b 'r | #AND
        ;-----------------------------------------------------------------------
        .b #END $4a     #OP             ; lsr                   | 4A
        .b '.   .w _r - $ - 1
        .b '*   $4e     #OP_W           ; lsr*      $nnnn       | 4E nn nn
        .b #ERR
        ;-----------------------------------------------------------------------
_r      .b 'z   .w _z - $ - 1
        .b 'x | #AND
        .b '*   $5e     #OP_W           ; lsr.x*    $nnnn       | 5E nn nn
        .b #ERR
        ;-----------------------------------------------------------------------
_z      .b #END $46     #OP_B           ; lsr.z     $nn         | 46 nn
        .b '. | #AND
        .b 'x   $56     #OP_B           ; lsr.z.x   $nn         | 56 nn
        .b #ERR
        ;=======================================================================
:ld_    .b 'a   .w :lda - $ - 1
        .b 'x   .w :ldx - $ - 1
        .b 'y | #AND
        ;-----------------------------------------------------------------------
        .b #END $a0     #OP_B           ; ldy       $nn         | A0 nn
        .b '.   .w _r - $ - 1
        .b '*   $ac     #OP_W           ; ldy*      $nnnn       | AC nn nn
        .b #ERR
        ;-----------------------------------------------------------------------
_r      .b 'z   .w _z - $ - 1
        .b 'x | #AND
        .b '*   $bc     #OP_W           ; ldy.x*    $nnnn       | BC nn nn
        .b #ERR
        ;-----------------------------------------------------------------------
_z      .b #END $a4     #OP_B           ; ldy.z     $nn         | A4 nn
        .b '. | #AND
        .b 'x   $b4     #OP_B           ; ldy.z.x   $nn         | B4 nn
        .b #ERR
        ;=======================================================================
:ldx    .b #END $a2     #OP_B           ; ldx       $nn         | A2 nn
        .b '.   .w _r - $ - 1
        .b '*   $ae     #OP_W           ; ldx*      $nnnn       | AE nn nn
        .b #ERR
        ;-----------------------------------------------------------------------
_r      .b 'z   .w _z - $ - 1
        .b 'y | #AND
        .b '*   $be     #OP_W           ; ldx.y*    $nnnn       | BE nn nn
        .b #ERR
        ;-----------------------------------------------------------------------
_z      .b #END $a6     #OP_B           ; ldx.z     $nn         | A6 nn
        .b '. | #AND
        .b 'y   $b6     #OP_B           ; ldx.z.y   $nn         | B6 nn
        .b #ERR
        ;=======================================================================
:lda    .b #END $a9     #OP_B           ; lda       $nn         | A9 nn
        .b '.   .w _r - $ - 1
        .b '* | #AND
        .b #END $ad     #OP_W           ; lda*      $nnnn       | AD nn nn
        .b 'z | #AND
        .b '. | #AND
        .b 'x   $a1     #OP_B           ; lda*z.x   $nn         | A1 nn
        .b #ERR
        ;-----------------------------------------------------------------------
_r      .b 'z   .w _z - $ - 1
        .b 'y   .w _y - $ - 1
        .b 'x | #AND
        .b '*   $bd     #OP_W           ; lda.x*    $nnnn       | BD nn nn
        .b #ERR
        ;-----------------------------------------------------------------------
_z      .b #END $a5     #OP_B           ; lda.z     $nn         | A5 nn
        .b '. | #AND
        .b 'x   $b5     #OP_B           ; lda.z.x   $nn         | B5 nn
        .b #ERR
        ;-----------------------------------------------------------------------
_y      .b '* | #AND
        .b #END $b9     #OP_W           ; lda.y*    $nnnn       | B9 nn nn
        .b 'z   $b1     #OP_B           ; lda.y*z   $nn         | B1 nn
        .b #ERR
        ;=======================================================================
:nop    .b 'o | #AND
        .b 'p   $ea     #OP             ; nop                   | EA
        .b #ERR
        ;=======================================================================
:ora    .b 'r | #AND
        .b 'a | #AND
        .b #END $09     #OP_B           ; ora       $nn         | 09 nn
        .b '.   .w _r - $ - 1
        .b '* | #AND
        .b #END $0d     #OP_W           ; ora*      $nnnn       | 0D nn nn
        .b 'z | #AND
        .b '. | #AND
        .b 'x   $01     #OP_B           ; ora*z.x   $nn         | 01 nn
        .b #ERR
        ;-----------------------------------------------------------------------
_r      .b 'z   .w _z - $ - 1
        .b 'y   .w _y - $ - 1
        .b 'x | #AND
        .b '*   $1d     #OP_W           ; ora.x*    $nnnn       | 1D nn nn
        .b #ERR
        ;-----------------------------------------------------------------------
_z      .b #END $05     #OP_B           ; ora.z     $nn         | 05 nn
        .b '. | #AND
        .b 'x   $15     #OP_B           ; ora.z.x   $nn         | 15 nn
        .b #ERR
        ;-----------------------------------------------------------------------
_y      .b '* | #AND
        .b #END $19     #OP_W           ; ora.y*    $nnnn       | 19 nn nn
        .b 'z   $11     #OP_B           ; ora.y*z   $nn         | 11 nn
        .b #ERR
        ;=======================================================================
:p      .b 'h   .w _ph - $ - 1
        .b 'l | #AND
        .b 'a   $68     #OP             ; pla                   | 68
        .b 'p   $28     #OP             ; plp                   | 28
        .b #ERR
        ;-----------------------------------------------------------------------
_ph     .b 'a   $48     #OP             ; pha                   | 48
        .b 'p   $08     #OP             ; php                   | 08
        .b #ERR
        ;=======================================================================
:r      .b 'o   .w _ro - $ - 1
        .b 't | #AND
        .b 's   $60     #OP             ; rts                   | 60
        .b 'i   $40     #OP             ; rti                   | 40
        .b #ERR
        ;=======================================================================
_ro     .b 'l   .w :rol - $ - 1
        .b 'r | #AND
        ;-----------------------------------------------------------------------
        .b #END $6a     #OP             ; ror                   | 6A
        .b '.   .w _r - $ - 1
        .b '*   $6e     #OP_W           ; ror*      $nnnn       | 6E nn nn
        .b #ERR
        ;-----------------------------------------------------------------------
_r      .b 'z   .w _z - $ - 1
        .b 'x | #AND
        .b '*   $7e     #OP_W           ; ror.x*    $nnnn       | 7E nn nn
        .b #ERR
        ;-----------------------------------------------------------------------
_z      .b #END $66     #OP_B           ; ror.z     $nn         | 66 nn
        .b '. | #AND
        .b 'x   $76     #OP_B           ; ror.z.x   $nn         | 76 nn
        .b #ERR
        ;=======================================================================
:rol    .b #END $2a     #OP             ; rol                   | 2A
        .b '.   .w _r - $ - 1
        .b '*   $2e     #OP_W           ; rol*      $nnnn       | 2E nn nn
        .b #ERR
        ;-----------------------------------------------------------------------
_r      .b 'z   .w _z - $ - 1
        .b 'x | #AND
        .b '*   $3e     #OP_W           ; rol.x*    $nnnn       | 3E nn nn
        .b #ERR
        ;-----------------------------------------------------------------------
_z      .b #END $26     #OP_B           ; rol.z     $nn         | 26 nn
        .b '. | #AND
        .b 'x   $36     #OP_B           ; rol.z.x   $nn         | 36 nn
        .b #ERR
        ;=======================================================================
:s      .b 't   .w :st_ - $ - 1
        .b 'b   .w :sbc - $ - 1
        .b 'e | #AND
        .b 'c   $38     #OP             ; sec                   | 38
        .b 'i   $78     #OP             ; sei                   | 78
        .b 'd   $f8     #OP             ; sed                   | F8
        .b #ERR
        ;=======================================================================
:sbc    .b 'c | #AND
        .b #END $e9     #OP_B           ; sbc       $nn         | E9 nn
        .b '.   .w _r - $ - 1
        .b '* | #AND
        .b #END $ed     #OP_W           ; sbc*      $nnnn       | ED nn nn
        .b 'z | #AND
        .b '. | #AND
        .b 'x   $e1     #OP_B           ; sbc*z.x   $nn         | E1 nn
        .b #ERR
        ;-----------------------------------------------------------------------
_r      .b 'z   .w _z - $ - 1
        .b 'y   .w _y - $ - 1
        .b 'x | #AND
        .b '*   $fd     #OP_W           ; sbc.x*    $nnnn       | FD nn nn
        .b #ERR
        ;-----------------------------------------------------------------------
_z      .b #END $e5     #OP_B           ; sbc.z     $nn         | E5 nn
        .b '. | #AND
        .b 'x   $f5     #OP_B           ; sbc.z.x   $nn         | F5 nn
        .b #ERR
        ;-----------------------------------------------------------------------
_y      .b '* | #AND
        .b #END $f9     #OP_W           ; sbc.y*    $nnnn       | F9 nn nn
        .b 'z   $f1     #OP_B           ; sbc.y*z   $nn         | F1 nn
        .b #ERR
        ;=======================================================================
:st_    .b 'a   .w :sta - $ - 1         ; sta?
        .b 'x   .w :stx - $ - 1         ; stx?
        .b 'y | #AND
        ;-----------------------------------------------------------------------
        .b '.   .w _z - $ - 1
        .b '*   $8c     #OP_W           ; sty*      $nnnn       | 8C nn nn
        .b #ERR
        ;-----------------------------------------------------------------------
_z      .b 'z | #AND
        .b #END $84     #OP_B           ; sty.z     $nn         | 84 nn
        .b '. | #AND
        .b 'x   $94     #OP_B           ; sty.z.x   $nn         | 94 nn
        .b #ERR
        ;=======================================================================
:stx    .b '.   .w _z - $ - 1
        .b '*   $8e     #OP_W           ; stx*      $nnnn       | 8E nn nn
        .b #ERR
        ;-----------------------------------------------------------------------
_z      .b 'z | #AND
        .b #END $86     #OP_B           ; stx.z     $nn         | 86 nn
        .b '. | #AND
        .b 'y   $96     #OP_B           ; stx.z.y   $nn         | 96 nn
        .b #ERR
        ;=======================================================================
:sta    .b '.   .w _r - $ - 1
        .b '* | #AND
        .b #END $8d     #OP_W           ; sta*      $nnnn       | 8D nn nn
        .b 'z | #AND
        .b '. | #AND
        .b 'x   $81     #OP_B           ; sta*z.x   $nn         | 81 nn
        .b #ERR
        ;-----------------------------------------------------------------------
_r      .b 'z   .w _z - $ - 1
        .b 'y   .w _y - $ - 1
        .b 'x | #AND
        .b '*   $9d     #OP_W           ; sta.x*    $nnnn       | 9D nn nn
        .b #ERR
        ;-----------------------------------------------------------------------
_z      .b #END $85     #OP_B           ; sta.z     $nn         | 85 nn
        .b '. | #AND
        .b 'x   $95     #OP_B           ; sta.z.x   $nn         | 95 nn
        .b #ERR
        ;-----------------------------------------------------------------------
_y      .b '* | #AND
        .b #END $99     #OP_W           ; sta.y*    $nnnn       | 99 nn nn
        .b 'z   $91     #OP_B           ; sta.y*z   $nn         | 91 nn
        .b #ERR
        ;=======================================================================
:t      .b 'a   .w _a - $ - 1           ; ta_
        .b 'x   .w _x - $ - 1           ; tx_
        .b 'y   .w _y - $ - 1           ; ty_
        ;-----------------------------------------------------------------------
        .b 's | #AND
        .b 'x   $ba     #OP             ; tsx                   | BA
        .b #ERR
        ;=======================================================================
        _a      .b 'x   $aa     #OP             ; tax                   | AA
        .b 'y   $a8     #OP             ; tay                   | A8
        .b #ERR
        ;=======================================================================
_x      .b 'a   $8a     #OP             ; txa                   | 8A
        .b 's   $9a     #OP             ; txs                   | 9A
        .b #ERR
        ;=======================================================================
_y      .b 'a   $98     #OP             ; tya                   | 98
        ;=======================================================================