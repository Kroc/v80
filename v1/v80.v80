; v80, (C) Kroc Camen 2023-2024, MIT License
; an 8-bit native multi-platform, multi-ISA assembler
;
; you cannot assemble this file! -- you must assemble from a chosen operating-
; system and ISA pair such as "cpm_z80.v80" which assembles a version of v80
; that runs on CP/M, and assembles z80 instructions
;
; syntax:
;
#CHAR_COMMENT           ';              ; comment
#CHAR_KEYWORD           '.              ; keyword
#CHAR_HEX               '$              ; hexadecimal literal or PC
#CHAR_BIN               '%              ; binary literal
#CHAR_CHAR              ''              ; character literal
#CHAR_LABEL             ':              ; a label (16-bit)
#CHAR_LOCAL             '_              ; local label
#CHAR_CONST             '#              ; a constant (flexible size)
#CHAR_STR               '"              ; a string
#CHAR_COND              '?              ; condition marker
#CHAR_COND_Z            '=              ; `?=`, condition equal marker
#CHAR_COND_NZ           '!              ; `?!`, condition not-equal marker
#CHAR_COND_POS          '+              ; `?+`, condition positive marker
#CHAR_COND_NEG          '-              ; `?-`, condition negative marker
#CHAR_OP_LO             '<              ; lo-byte unary operator
#CHAR_OP_HI             '>              ; hi-byte unary operator
#CHAR_OP_NOT            '!              ; not unary operator
#CHAR_OP_NEG            '-              ; negate unary operator
#CHAR_OP_ADD            '+              ; add operator
#CHAR_OP_SUB            '-              ; subtract operator
#CHAR_OP_MUL            '*              ; multiply operator
#CHAR_OP_DIV            '/              ; divide operator
#CHAR_OP_AND            '&              ; and operator
#CHAR_OP_OR             '|              ; or operator
#CHAR_OP_XOR            '^              ; xor operator
#CHAR_OP_MOD            '\              ; modulo operator
#CHAR_EXPR_IN1          '(              ; open parenthesis
#CHAR_EXPR_OUT1         ')              ; close parenthesis
#CHAR_EXPR_IN2          '[              ; square brackets for marking
#CHAR_EXPR_OUT2         ']              ;  memory references in instructions

#DEBUG                  0               ; set to 1 to enable debug features

; memory map:
;
;         $xx00         $xx80
;   +-----+------+------+-----+-------------------------------+---------+
;   | v80 | word | expr | str | code->                 <-heap | <-stack |
;   +-----+------+------+-----+-------------------------------+---------+
;         | <-32   <-96 | 128 |                               |     256
;
;       v80:    the v80 assembler
;       word:   a buffer for capturing words (symbol names); builds downwards
;       expr:   expressions are tokenised here; builds downwards
;       str:    forward buffer for reading strings, file-names
;       code:   source code is assembled here
;       heap:   symbols and other in-flight data goes here; builds downwards
;       stack:  usual Z80 stack; builds downwards
;
; (see the end of the file for :str, :word, :expr & :code labels)
;
#WORD_LEN       31                      ; maximum symbol name length

;===============================================================================
; heap:
;-------------------------------------------------------------------------------
; as assembly progresses, the dictionary of symbols and deferred expressions
; will be built up on the heap. it works downwards from the top of memory
; in order to maximise the available space before the assembled binary
; and heap collide. during initialisation the heap will be placed 512 bytes
; below the stack at the top of memory, giving enough room for the stack
; and other buffers
;
; like the stack, the heap is pre-decrement meaning that the heap address
; is decremented first before writing a value, ergo the heap addr points
; to a currently occupied byte on the heap
;
:sp     .w      $fd00                   ; stack pointer backup
:heap   .w      $fc00                   ; current position on the heap

; dictionaries:
;-------------------------------------------------------------------------------
; labels and constants are stored as a linked-list of dictionary entries.
; each has its own entry point to avoid wasting time searching for labels
; amongst constants and vice-versa. $0000 terminates the list
;
; although the heap extends downwards, the link address has to point to
; the lo-byte of the entry's link field which is technically the 2nd byte
; of the record
;                     +------+
;          .----------+ addr |  (entry point)
;          V          +------+
; - - -----+------+
;  ...data | addr |             (heap extends downwards)
; - - -----+------+
;
:label  .w      $0000                   ; addr of last label dictionary-entry
:const  .w      $0000                   ; addr of last const dictionary-entry

; local labels are appended to the last non-local label defined, a pointer
; to which is stored here. this addr is updated after each non-local label
; is defined, where as `label` above is updated after every label; just be
; aware that despite the name this addr is always the last *non-local* label
; defined! also this address points directly to the name-length field rather
; than the link-addr field since its intended to retrieve the last defined
; label name, not as a dictionary entry point like the others
;
:local  .w      $0000                   ; addr of last non-local label

; the name of each file needs to be kept in case of error. a deferred expr
; could error long after a file has been closed and another opened. each file-
; name is stored as a symbol on the heap and its addr is used as a reference.
; this avoids duplicating names for files included multiple times
;
:file   .w      $0000                   ; addr of current file-name record
:files  .w      $0000                   ; dictionary entry point for file-names

; (char and ccol are combined into a word when pushed
;  to the stack during file-includes)
;
:char_ccol
:char   .b      $00                     ; last char read from input
:ccol   .b      $00                     ; last char read column-number
:crow   .w      $0000                   ; last char read line-number

; the line-number / column reported on error should be at the start
; of a word, not at the last character read, which could be a newline
;
:wcol   .b      $00                     ; column number to report on err
:wrow   .w      $0000                   ; line number to report on err

.i      "v80_echo.v80"                  ; various printing routines
.i      "v80_err.v80"                   ; error messages
.i      "v80_expr.v80"                  ; expression parsing and evaluation
.i      "v80_asm.v80"                   ; main parsing and assembling loop

:main
;===============================================================================
        ; initialise stack / heap:
        ;
        ; this *assumes* the stack is completely empty, i.e. at $FD00 rather
        ; than $FCFE. the OS bootstrap *must* JP to main instead of CALL!
        ;
        ;   - - - -------+------------------+
        ;         <-heap |          <-stack |
        ;   - - - -------+------------------+
        ;
        ld.HL   $0000                   ; oddly, there's no `ld HL, SP`!
        add.HL.SP                       ; get stack address, e.g. $FD00
        ld*$.HL [ :sp ]                 ; (save value for printing later)
        dec.H                           ; go down 1 page (e.g. $FD00 > $FC00)
        ld*$.HL [ :heap ]               ; this will be the top of the heap
        ld.A.H                          ; patch stack-overflow check routine
        ld*$.A  [ :errIfStackOverflow_hi + 1 ]

        ; how do you measure the maximum depth of the stack
        ; used during program execution?
        ;
        ; you could record the stack depth every time you push, or at least
        ; often enough, but that slows down execution. rather, we can write
        ; an initial value to every stack space and after execution we can
        ; check how deep the original value remains. But what if the data
        ; pushed to the stack happens to contain that value?
        ;
        ; the only value you can almost guarantee will never be pushed to the
        ; stack is... the address of the stack itself! For example, if the
        ; stack is at $FC80 then you won't ever see $FC80 stored there
        ; -- this is programmatically useless
        ;
        ; therefore we fill each stack space with its own address and after
        ; execution check for stack positions that have changed, revealing
        ; the deepest push to the stack during execution!
        ;
        ld.HL*  [ :sp ]                 ; load HL with the stack pointer
        ld.B    256 / 2                 ; number of slots in stack, 2 bytes ea.
_push   dec.HL                          ; decrement HL first to match the
        dec.HL                          ;  stack-pointer after it pushes HL
        push.HL                         ;  (stack is decrement-then-copy)
        djnz    _push                   ; loop all stack pushes
        ld.SP*  [ :sp ]                 ; restore stack pointer

        ; print addresses:
        ;
        call    :printThisComment
                .b      "CODE @ " 0
        ld.BC   :code                   ; start addr of code-segment
        call    :printHexNum            ; print addr as hex-number

        call    :printThis
                .b      ", HEAP @ " 0
        ld.BC*  [ :heap ]               ; start addr of heap
        call    :printHexNum            ; print addr as hex-number

        call    :printThis
                .b      ", STACK @ " 0
        ld.BC*  [ :sp ]                 ; start addr of stack
        call    :printHexNum            ; print addr as hex-number

        call    :osPrintNewline
        call    :osPrintNewline

        ; assemble the source file:
        ;=======================================================================
        ; parse the command-line parameters and return an addr [DE] to the
        ; input file-name as a forwards, null-terminated string but also set
        ; the output file-name privately -- we leave all command-line parsing
        ; to the OS due to differing file-system limitations
        ;
        call    :osParseParams

        ; the virtual program-counter is permanently pinned to IX since
        ; it's a value that needs to be incremented often but not read
        ; back too often. this avoids a bunch of HL/DE register swapping
        ;
        ld.IX   $0000                   ; virtual program-counter

        ; the code-segment address (where assembled binary code goes)
        ; is pinned to IY. as with the virtual program-counter, despite
        ; the IY register being slower to utilise, it is used sparingly
        ; and avoids costly register swapping
        ;
        ld.IY   :code                   ; code-segment address

        ld.HL*  [ :heap ]               ; start the heap
        call    :assembleFile           ; assemble! (DE is file-name str addr)

        ; 1st pass complete, calculate RAM usage:
        ;
        ; +----------------+----------------------+---------------+
        ; | code-segment-> |     <-free RAM->     | <-heap        |
        ; +----------------+----------------------+---------------+
        ; ^ code           ^ IY                   ^ HL            ^ [heap]
        ;
        ; calculate final size of the heap:
        ; (works downwards from top of RAM)
        ;
        call    :errIfHeapOverflow      ; last check for heap overflow!
        ex.DE.HL                        ; swap heap end-address to DE
        ld.HL*  [ :heap ]               ; get heap starting address (high!)
        sbc.HL.DE                       ; calculate end-start difference
        ld*$.HL  [ _heap + 1 ]          ; save value for printing later

        ; calculate free RAM size:
        ; (size between end of code-segment and end-of-heap)
        ;
        ex.DE.HL                        ; return last heap addr to HL
        ld.D.IYH                        ; copy code-segment last address
        ld.E.IYL                        ;  into DE for SBC HL, DE
        sbc.HL.DE                       ; calculate end-start difference
        ld*$.HL [ _free + 1 ]           ; save value for printing later

        ; calculate size of code-segment:
        ; (size of generated binary)
        ;
        ex.DE.HL                        ; swap code end addr into HL
        ld.DE   :code                   ; code-segment start addr
        sbc.HL.DE                       ; calculate end-start difference
        ld*$.HL [ _code + 1 ]           ; save value for printing later

        ; how deep is your stack?
        ;-----------------------------------------------------------------------
        ; since counting towards zero is faster on Z80 we start at the top and
        ; walk down the stack slots checking if each contains its own address
        ;
        ; WARN: this code assumes that stack is at its top (e.g. $FD00),
        ;       because this code is in the top-most main routine
        ; 
_end    ld.HL   0                       ; load HL with the stack pointer
        add.HL.SP                       ; (oddly, there's no `ld HL, SP`!)
        ld.BC   256 / 2                 ; begin at the top, report remaining
        ;-----------------------------------------------------------------------
_loop   dec.HL                          ; (decrement into hi-byte)
        ld.A.H                          ; compare hi-byte first
        cpd                             ; CP A, [HL]; DEC HL; DEC BC
        jp?nv   _ok                     ; exit when BC = 0 (all stack checked)
        jr?nz   _loop                   ; skip checking lo-byte if mismatch
        ld.A.L                          ; compare lo-byte of stack addr
        cp*HL                           ;  with lo-byte in stack slot
        jr?nz   _loop                   ; keep looping if mismatch
        ;-----------------------------------------------------------------------
        ; we error if the stack reached 0 bytes because we cannot guarantee
        ; that it went under without a sentinel and an additional check
        ;
_ok     ld.A.C                          ; BC is number of unused stack slots
        add.A                           ; *2 for bytes (RLA won't set z-flag!)
        jp?z    :errRangeStack          ; if 0, stack overflow!
        ld*$.A  [ _stack + 1 ]          ; save value for printing later

        ; 2nd pass!
        ;-----------------------------------------------------------------------
        ; (actually more like 1.5 because we aren't reading the code again)
        ;
        ; we calculate the stats above first becasue no more data will need
        ; to be written to the heap and we want to re-use HL for the 2nd pass
        ;
        ; note that IX (virtual program-counter) & IY (code-segment addr)
        ; will be changed to repeat each deferred expression
        ;
        ld*$.IY [ _iy + 1 ]             ; save code-segment end-addr for output
        ld.HL   :defer                  ; start of deferred expression chain
        call    _defer                  ; re-evaluate deferred expressions

        ; output file:
        ;=======================================================================
        ; the output file-name is already known to the OS which read it
        ; from the command-line parameters during osParseParams
        ;
        ld.BC   $0000                   ; don't show file/line/col if an
        ld*$.BC [ :file ]               ; error occurs during write out
        ld.HL   :code                   ; code-segment start addr
_iy     ld.DE   $0000                   ; code-segment end addr patched in here
        call    :osSaveCode             ; defer all writing work to the OS

        ; print final stats:
        ;-----------------------------------------------------------------------
        call    :osPrintNewline
        call    :echoCommentBar

        call    :printThisComment
                .b      " CODE: " 0
_code   ld.BC   $0000                   ; value to print (code size)
        call    _size                   ; ...
        ;-----------------------------------------------------------------------
        call    :printThisComment
                .b      " HEAP: " 0
_heap   ld.BC   $0000                   ; value to print (heap size)
        call    _size                   ; ...
        ;-----------------------------------------------------------------------
        call    :printThisComment       ; print deferred-expression stats
                .b      "DEFER: " 0     ; ...
        ld.BC*  [ :deferBytes + 1 ]     ; first, number of bytes for all
        CALL    :printDecNumSpc         ;  deferred-expressions
        ld.DE   _bytes                  ; (re-use "bytes" string below)
        CALL    :osPrintStrZ            ; ...
        ld.BC*  [ :deferCount + 1 ]     ; total number of deferred-expressions
        call    :printDecNumSpc         ; 
        call    :printThis              ; 
                .b      " exprs" #LF 0  ; 
        ;-----------------------------------------------------------------------
        call    :printThisComment       ; 
                .b      " FREE: " 0     ; 
_free   ld.BC   $0000                   ; value to print (free bytes)
        call    _size                   ; ...
        ;-----------------------------------------------------------------------
        call    :printThisComment       ; 
                .b      "STACK: " 0     ; 
_stack  ld.BC   $0000                   ; lastly, the number of bytes free
        call    :printDecNumSpc         ;  on the stack at peak usage
        call    :printThis              ; 
                .b      " free" #LF 0   ; 

        jp      :osQuit                 ; jump to CP/M to quit the program

        ; print a decimal number and append "bytes":
        ;-----------------------------------------------------------------------
_size   call    :printDecNumSpc         ; print number with leading spaces
        call    :printThis              ; append "bytes"
_bytes          .b      " bytes " 0     ; ...
        jp      :osPrintNewline         ; + newline

        ; re-evaluate deferred expressions:
        ;=======================================================================
        ; once all files are assembled, any labels not defined in earlier
        ; experssions should have their values by now. we walk the deferred
        ; expressions attempting to evaluate them and patch in their values
        ; into the code-segment
        ;
        ; - - - -+------------+-------+-----+-----+------+----+------+------+
        ; <-heap | expr ¦ len | param | col | row | file | pc | code | link |
        ; - - - -+------------+-------+-----+-----+------+----+------+------+
        ;
        ;       link            addr to next deferred expr in chain
        ;       code            addr in code-segment to write value when known
        ;       pc              virtual program-counter at the time
        ;       file            addr to file-name record
        ;       row             line number of expr
        ;       col             column number of expr
        ;       param           parameter & flag-byte for value
        ;       len             length of expression bytecode
        ;       expr            expression bytecode
        ;
        ;-----------------------------------------------------------------------
        ; follow the link, but finish if it's $0000
        ;
_defer  ld.A*HL                         ; read next expr addr, lo-byte
        inc.HL                          ; move *up* to link addr hi-byte
        ld.H*HL                         ; read next expr addr, hi-byte
        ld.L.A                          ; (complete the addr)
        or.H                            ; is the link addr $0000?
        ret?z                           ; return at end of chain

        push.HL                         ; preserve addr to snap back to

        ; set the code-segment addr and virtual
        ; program-counter for the deferred expr:
        ;
        call    _popw                   ; get the code-segment addr
        ld.IYH.B                        ;  from the deferred expression
        ld.IYL.C                        ;  and set current code-segment addr
        call    _popw                   ; likewise get and set
        ld.IXH.B                        ;  the virtual program-counter
        ld.IXL.C                        ;  from the deferred expression

        call    _popw                   ; if the expr errors during evaluation
        ld*$.BC [ :file ]               ;  return the file, line and column
        call    _popw                   ;  numbers of the deferred expr
        ld*$.BC [ :wrow ]               ; ...
        call    _popw                   ; ..
        ld*$.BC [ :param_ecol ]         ; .
        ld.A.B                          ; column number needs copying
        ld*$.A  [ :wcol ]               ;  to current start-of-word

        dec.HL                          ; lastly, the expr bytecode
        call    :evalExpr               ; evaluate! returns result in DE
        ld.B.D                          ; swap to BC for emitParam
        ld.C.E                          ; ...

        ; patch the result into the binary:
        ;
        ; with the code-segement address set, the virtual program-counter,
        ; the source file / line / column and the parameter byte restored
        ; we just need to emit the value to the code-segment
        ;
        call    :emitParam

        pop.HL                          ; snap back to the defer record
        jr      _defer                  ;  link-field to follow the chain

        ;=======================================================================
_popw   dec.HL                          ; pop a word off the heap into BC
        ld.B*HL                         ; (used for pulling fields from
        dec.HL                          ;  the deferred expr record)
        ld.C*HL                         ; ...
        ret


;///////////////////////////////////////////////////////////////////////////////
; WARNING: ANYTHING PLACED AFTER HERE WILL BE OVERWRITTEN
;-------------------------------------------------------------------------------
; this entire section and anything included in the binary after this point
; are in the code-segment and will be overwritten by the binary as it is
; assembled! v80 places once-off initialisation routines here that are safe
; to obliterate once assembly starts to save RAM -- see the system file
; (such as "v80_cpm.v80") which, after including this file, appends more code
;
:end_of_v80

; buffers:
;
; the buffers are placed at the end of v80's fixed code, but have to be aligned
; to a page. the line of code below adds the remainder of a page to the current
; addr and then defines the buffer addresses, *without* emitting any bytes.
; using .a or .f would emit bytes adding unecessary padding to the program but
; we want the unused space between here and the start of the next page
; to be back-filled with initialisation code
;
;         $xx00         $xx80
;   +-----+------+------+-----+-------------------------------+---------+
;   | v80 | word | expr | str | code->                 <-heap | <-stack |
;   +-----+------+------+-----+-------------------------------+---------+
;         | <-32   <-96 | 128 |                               |     256
;
$       $ + ( $100 - ( $ \ $100 ))      ; align to page
:buffers

; the word buffer is used to capture symbol names. it works backwards with
; the top-most byte being the word-length. it must start at a page boundary
; because the lo-byte addr is assumed to be $00...$1F for optimisation
;
$ ( :buffers + #WORD_LEN )      :word   ; e.g. $2100...$211F (32 bytes)

; calculations are compiled into bytecode to allow for later evaluation,
; i.e. for deferred calculations where a symbol is not yet known
;
$ ( :buffers + 127 )            :expr   ; e.g. $2120...$217F (96 bytes)

; the string buffer is used to capture forwards strings
; e.g. file-names used in include keywords
;
$ ( :buffers + 128 )            :str    ; e.g. $2180...$21FF (128 bytes)

; the buffers begin after the end of the v80's code but are aligned to the next
; page so that their addresses fall within a page and cycles can be saved using
; `inc.e` instead of `inc.de` etc. the code-segment, where assembled code is
; written, begins after the buffers at a page bounadry. this is also
; necessary for CP/M which writes files in 128-byte sectors
;
$ ( :buffers + 256 )            :code   ; e.g. $2200

;///////////////////////////////////////////////////////////////////////////////
; after defining the buffer addresses, return the program-counter to what it
; was. note that changing the virtual program-counter *does not* emit padding
; bytes, allowing you to define arbitrary label addresses
;
$       :end_of_v80