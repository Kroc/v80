; v80, (C) Kroc Camen 2023-2024, MIT License
; error stuff
;
.BLOCK  "code-err"

_errmsg:
;===============================================================================
@inval_cond     .BYTE "Invalid condition", 0
@inval_expr     .BYTE "Invalid expression", 0
@inval_file     .BYTE "Invalid file-name", 0
@inval_ins      .BYTE "Invalid instruction", 0
@inval_key      .BYTE "Invalid keyword", 0
@inval_num      .BYTE "Invalid number", 0
@inval_str      .BYTE "Invalid string", 0
@inval_sym      .BYTE "Invalid symbol name", 0
@range_disk     .BYTE "Disk full", 0
@range_heap     .BYTE "Heap overflow", 0
@range_line     .BYTE "Line too long, 127 cols max.", 0
@range_over     .BYTE "Expression overflow", 0
@range_param    .BYTE "Expression exceeds 8-bit parameter", 0
@range_stack    .BYTE "Stack overflow", 0
@range_str      .BYTE ".w cannot take strings", 0
@redef_label    .BYTE "Labels cannot be redefined", 0
@undef_const    .BYTE "Undefined constant", 0
@undef_file     .BYTE "File not found", 0
@undef_label    .BYTE "Label was not defined", 0
@undef_local    .BYTE "Local label without label", 0
@unexp_defer    .BYTE "Forward-references to labels not allowed here", 0
@unexp_eol      .BYTE "Expected expression", 0


; print error message and quit:
;===============================================================================
; this is a fall through 'ladder' that sets HL to the error string addr based
; on entrypoint. opcode $DD is manually inserted to "skip" the next LD HL $....
; instruction by converting it to LD IX $.... (with IX not being used)
; 
errInvalCond:
        ;-----------------------------------------------------------------------
        ld      HL,     _errmsg@inval_cond
        .BYTE   $dd                     ; = LD IX, $nnnn (skip next 3 bytes!)
errInvalExpr:
        ;-----------------------------------------------------------------------
        ld      HL,     _errmsg@inval_expr
        .BYTE   $dd                     ; = LD IX, $nnnn (skip next 3 bytes!)
errInvalFile:
        ;-----------------------------------------------------------------------
        ld      HL,     _errmsg@inval_file
        .BYTE   $dd                     ; = LD IX, $nnnn (skip next 3 bytes!)
errInvalIns:
        ;-----------------------------------------------------------------------
        ld      HL,     _errmsg@inval_ins
        .BYTE   $dd                     ; = LD IX, $nnnn (skip next 3 bytes!)
errInvalKey:
        ;-----------------------------------------------------------------------
        ld      HL,     _errmsg@inval_key
        .BYTE   $dd                     ; = LD IX, $nnnn (skip next 3 bytes!)
errInvalNum:
        ;-----------------------------------------------------------------------
        ld      HL,     _errmsg@inval_num
        .BYTE   $dd                     ; = LD IX, $nnnn (skip next 3 bytes!)
errInvalStr:
        ;-----------------------------------------------------------------------
        ld      HL,     _errmsg@inval_str
        .BYTE   $dd                     ; = LD IX, $nnnn (skip next 3 bytes!)
errInvalSym:
        ;-----------------------------------------------------------------------
        ld      HL,     _errmsg@inval_sym
        .BYTE   $dd                     ; = LD IX, $nnnn (skip next 3 bytes!)
errRangeDisk:
        ;-----------------------------------------------------------------------
        ld      HL,     _errmsg@range_disk
        .BYTE   $dd                     ; = LD IX, $nnnn (skip next 3 bytes!)
errRangeHeap:
        ;-----------------------------------------------------------------------
        ld      HL,     _errmsg@range_heap
        .BYTE   $dd                     ; = LD IX, $nnnn (skip next 3 bytes!)
errRangeLine:
        ;-----------------------------------------------------------------------
        ld      HL,     _errmsg@range_line
        .BYTE   $dd                     ; = LD IX, $nnnn (skip next 3 bytes!)
errRangeOver:
        ;-----------------------------------------------------------------------
        ld      HL,     _errmsg@range_over
        .BYTE   $dd                     ; = LD IX, $nnnn (skip next 3 bytes!)
errRangeParam:
        ;-----------------------------------------------------------------------
        ld      HL,     _errmsg@range_param
        .BYTE   $dd                     ; = LD IX, $nnnn (skip next 3 bytes!)
errRangeStack:
        ;-----------------------------------------------------------------------
        ld      HL,     _errmsg@range_stack
        .BYTE   $dd                     ; = LD IX, $nnnn (skip next 3 bytes!)
errRangeStr:
        ;-----------------------------------------------------------------------
        ld      HL,     _errmsg@range_str
        .BYTE   $dd                     ; = LD IX, $nnnn (skip next 3 bytes!)
errRedefLabel:
        ;-----------------------------------------------------------------------
        ld      HL,     _errmsg@redef_label
        .BYTE   $dd                     ; = LD IX, $nnnn (skip next 3 bytes!)
errUndefConst:
        ;-----------------------------------------------------------------------
        ld      HL,     _errmsg@undef_const
        .BYTE   $dd                     ; = LD IX, $nnnn (skip next 3 bytes!)
errUndefFile:
        ;-----------------------------------------------------------------------
        ld      HL,     _errmsg@undef_file
        .BYTE   $dd                     ; = LD IX, $nnnn (skip next 3 bytes!)
errUndefLabel:
        ;-----------------------------------------------------------------------
        ld      HL,     _errmsg@undef_label
        .BYTE   $dd                     ; = LD IX, $nnnn (skip next 3 bytes!)
errUndefLocal:
        ;-----------------------------------------------------------------------
        ld      HL,     _errmsg@undef_local
        .BYTE   $dd                     ; = LD IX, $nnnn (skip next 3 bytes!)
errUnexpDefer:
        ;-----------------------------------------------------------------------
        ld      HL,     _errmsg@unexp_defer
        .BYTE   $dd                     ; = LD IX, $nnnn (skip next 3 bytes!)
errUnexpEOL:
        ;-----------------------------------------------------------------------
        ld      HL,     _errmsg@unexp_eol

        ; fall through
        ; ...

err:
;===============================================================================
; print an error message and quit:
;
; in:   HL              error string addr
; out:  -               program terminates!
;===============================================================================
        call    osPrintNewline          ; print two newlines and a leading
        call    osPrintNewline          ;  "ERROR:" string
        ld      DE,     @err            ; ...
        call    osPrintStrZ             ; ...

        ex      DE,     HL              ; swap error string addr to DE
        call    osPrintStrZ             ; print passed error-string
        ld      A,      '!'             ; ("!" is shared between all error 
        call    osPrintChar             ;  messages. this saves 1 byte each
        call    osPrintNewline          ;  error message, after the 8th)
        ld      DE,     @txt            ; print following line
        call    osPrintLn               ;  with note on "error.txt"

        ; if the file-name addr is $0000 this is not a parsing error,
        ; such as the command line parameter file-name not being found
        ;
        ld      A,      [file+1]        ; file-names are pushed to the heap
        and     A                       ;  so it is sufficient to check only
        jp      z,      osQuit          ;  if the hi-byte is $00

        ; print file-name, line number and column:
        ;-----------------------------------------------------------------------
        ld      DE,     @file
        call    osPrintStrZ

        ; print file-name:
        ld      DE,     [file]          ; addr of current file-name
        call    printSymbolName         ; print the backwards string
        call    osPrintNewline          ;  + newline

        ; print start-of-word line number and column:
        ; (this is not the same as the line/col of last char read
        ;  which could be the end-of-line after an expression)
        ;
        ld      DE,     @row
        call    osPrintStrZ
        ld      BC,     [wrow]
        call    printDecNumber
        call    osPrintNewline
        ld      DE,     @col
        call    osPrintStrZ
        ld      A,      [wcol]
        ld      C,      A
        ld      B,      0
        call    printDecNumber

        jp      osQuit

@err    .BYTE   "! ERROR: ", 0
@txt    .BYTE   "!        See errors.txt for detailed causes", 0
@file   .BYTE   "!  FILE: ", 0
@row    .BYTE   "!  LINE: ", 0
@col    .BYTE   "!   COL: ", 0

.ENDB