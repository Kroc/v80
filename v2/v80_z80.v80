; v80, (C) Kroc Camen 2023-2024, MIT License
; code specifically for emitting Z80 opcodes
;
:emitOpcode
;===============================================================================
; write CPU opcode bytes, parsing any required parameters:
;
; in:   B               opcode flags byte from the opcode table
;       A               same as above but with bit 7 ANDed off
;       C               opcode byte
;       HL              heap address for any deferred expressions
;
; out:  HL              parsing of instruction parameters may push to heap
;       A, BC, DE       (clobbered)
;===============================================================================
        ; opcode with extensions or parameters:
        ;
        bit6.B                          ; bit 6 indicates IX or IY
        jr?nz   _ixy                    ; go handle IX|IY madness...

        ; is it a $CB or $ED extended opcode?
        ;
        bit4.B                          ; bit 4 indicates an extended opcode
        jr?z    _noext                  ; not extended? skip over $CB/$ED

        ; output $CB or $ED opcode extension byte:
        ;
        and     %00100010               ; bit 5&1 = $22 ($ED) or $00 ($CB)
        add     $cb                     ; $CB+$00 = $CB or $CB+$22 = $ED
        ld*IY.A [ 0 ]                   ; emit $CB|$ED prefix byte
        inc.IY                          ; move to next byte in code-segment
        inc.IX                          ; increment virtual program-counter

        ; at this point, all parameters (if any) follow the opcode,
        ; so we can output the opcode now and forget it
        ;-----------------------------------------------------------------------
_noext  ld*IY.C [ 0 ]                   ; emit opcode byte
        inc.IY                          ; move to next byte in code-segment
        inc.IX                          ; increment virtual program-counter
        ;-----------------------------------------------------------------------

        ; any parameters?
        ;
        ; bit 2 indicates any kind of parameter for non IX|IY opcodes,
        ; i.e. 8 / 16 bit immediate, or relative (bit 3). there are no
        ; 2-parameter Z80 opcodes without IX|IY so 1 param can be assumed
        ;
        bit2.B                          ; if no parameters, extensions
        ret?z                           ;  have been done, finish now!

        ; a single, 1 or 2 byte parameter:
        ;
        and     %00000001               ; LSB indicates 2-bytes
        add     1                       ; param has at least 1-byte

        bit3.B                          ; relative jump?
        jr?z    _1                      ; skip over the next instruction if not
        or      %10000000               ; add the rel-flag to the param type

        ; parse the following expression and
        ; write the value to the code-segment
_1      jp      :parseParam

        ;=======================================================================
        ; handle IX|IY opcodes: (bit 5 chooses between IX & IY)
        ;
_ixy    and     %00100000               ; isolate bit 5
        or      %11011101               ; map to $DD (IX) or $FD (IY)
        ld*IY.A [ 0 ]                   ; emit IX|IY prefix byte
        inc.IY                          ; move to next byte in code-segment
        inc.IX                          ; increment virtual program-counter

        ; on the Z80, a combination of $DD|$FB (IX|IY) + $CB opcodes place
        ; the opcode after the offset parameter! if this is the case, we
        ; have to insert the parameter first, then return for the opcode
        ;
        bit4.B                          ; bit 4 on indicates $CB-extended
        jr?nz   _cb                     ; go handle reverse parameter order

        ; at this point, all parameters (if any) follow the opcode,
        ; so we can output the opcode now and forget it
        ;-----------------------------------------------------------------------
        ld*IY.C [ 0 ]                   ; emit opcode byte
        inc.IY                          ; move to next byte in code-segment
        inc.IX                          ; increment virtual program-counter
        ;-----------------------------------------------------------------------

        ; bit 3 (offset), bit 2 (8-bit immediate), and
        ; bit 0 (16-bit immediate) indicate parameters
        ;
        ld.A.B                          ; opcode flags byte
        and     %00001101               ; filter out parameter flags
        ret?z                           ; if none, we are finished

        ; there are only two Z80 instructions that use 2 parameters
        ; -- LD [IX+$aa], $bb and the matching IY-variant
        ;
        xor     %00001100               ; flip just the bits for 2 params
        jr?z    _two                    ; divert for 2 params!

        ; only one parameter
        ; -- determine parameter width (byte or word)
        ;
        xor.A                           ; set A to zero
        rrc.B                           ; pop off bit 0 of opcode-flags
        adc     1                       ; add that bit, if present

        ; parse the following expression and
        ; write the value to the code-segment
        jp      :parseParam

        ;-----------------------------------------------------------------------
        ; handle two-parameter instruction special case:
        ;
_two    inc.A                           ; (set the parameter width to 1-byte)

        ; the first expression will read to the first character of the next
        ; word following the expression, or a newline / end-of-file. since
        ; a 2nd parameter is expected, newline or end-of-file is an error!
        ;
        call    :parseParam             ; parse and emit 1st parameter
        jp      :nextParam              ; parse and emit 2nd parameter

        ;-----------------------------------------------------------------------
        ; IX|IY + $CB is the edge-case that keeps on giving: at all other
        ; times the IX|IY offset byte follows the opcode, but not here!
        ;
_cb     ld*IY   [ 0 ]   $cb             ; emit $CB prefix byte
        inc.IY                          ; move to next byte in code-segment
        inc.IX                          ; increment virtual program-counter
        push.BC                         ; keep opcode until emit time

        ld.A    1                       ; parse the following expression and
        call    :parseParam             ;  write the value to the code-segment

        pop.BC                          ; retrieve delayed opcode
        ld*IY.C [ 0 ]                   ; emit opcode byte
        inc.IY                          ; move to next byte in code-segment
        inc.IX                          ; increment virtual program-counter

        ret

#size_of_emit   $ - :emitOpcode